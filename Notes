1. We will need to research the cryptography libraries we can use in dotnet.
    * Golang we used go-ethereum
    * Typescript we used Ethers project
    
2. Nthereum Library
    * What are the couple of major bugs
    * The issue with Eleptic Curve, what was the issue, and solution used by Illuvium.
    * Can we contribute these fixes back to Nthereum?

3. Json.Net Library? Was it Newtonsoft Json library Itamar was referring to.
4. Are they happy to share code base and learnings? this is not an issue. If this costs us I would say not required.


1. Signers abstrated away
2. hex should be a big int
3. data to be a string
4. 0x expectation should be handled internally.
5. Just take private keys and abstract it away.

Usage is for backend applications.
Minting
Transfers


I had a great customer interview with the Illuvium tech lead about the C# SDK with Itamar. I will share the recording when I have access to it.
He has built Illuvium's C# SDK and had to roll his own crypto libraries since the existing ones in the market are not up to scratch. It feels like we could re-use most of the work Itamar has done, and he's also expressed interest in maintaining the C# SDK in the future.
Once we get the release candidate for the Golang SDK done, we could research the C# SDK, get some questions together for Itamar, and have another meeting with him and the engineers working on the project.
His wishlists:
Multi-targeting version. He’d love to have the SDK target .net 3.3 and 6.
Fewer dependencies are better.
Avoiding json.NET
Crypto dependencies - how are we handling these? Keccak?
The state of the market isn’t great for this.
We’re using nthereum - we’re underwhelmed by it: very little coverage and a couple of significant bugs.
I lost four days of my life trying to debug an elliptic curve.
Nthereum uses a “bouncy castle” under the hood.
Ended up hand rolling code.