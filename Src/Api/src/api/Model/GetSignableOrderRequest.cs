/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// GetSignableOrderRequest
    /// </summary>
    [DataContract(Name = "GetSignableOrderRequest")]
    public partial class GetSignableOrderRequest : IEquatable<GetSignableOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSignableOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableOrderRequest" /> class.
        /// </summary>
        /// <param name="amountBuy">Fee-exclusive amount to buy the asset (required).</param>
        /// <param name="amountSell">Amount to sell (quantity) (required).</param>
        /// <param name="expirationTimestamp">ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour.</param>
        /// <param name="fees">Inclusion of either maker or taker fees.</param>
        /// <param name="tokenBuy">tokenBuy (required).</param>
        /// <param name="tokenSell">tokenSell (required).</param>
        /// <param name="user">Ethereum address of the submitting user (required).</param>
        public GetSignableOrderRequest(string amountBuy = default(string), string amountSell = default(string), int expirationTimestamp = default(int), List<FeeEntry> fees = default(List<FeeEntry>), SignableToken tokenBuy = default(SignableToken), SignableToken tokenSell = default(SignableToken), string user = default(string))
        {
            // to ensure "amountBuy" is required (not null)
            if (amountBuy == null)
            {
                throw new ArgumentNullException("amountBuy is a required property for GetSignableOrderRequest and cannot be null");
            }
            this.AmountBuy = amountBuy;
            // to ensure "amountSell" is required (not null)
            if (amountSell == null)
            {
                throw new ArgumentNullException("amountSell is a required property for GetSignableOrderRequest and cannot be null");
            }
            this.AmountSell = amountSell;
            // to ensure "tokenBuy" is required (not null)
            if (tokenBuy == null)
            {
                throw new ArgumentNullException("tokenBuy is a required property for GetSignableOrderRequest and cannot be null");
            }
            this.TokenBuy = tokenBuy;
            // to ensure "tokenSell" is required (not null)
            if (tokenSell == null)
            {
                throw new ArgumentNullException("tokenSell is a required property for GetSignableOrderRequest and cannot be null");
            }
            this.TokenSell = tokenSell;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for GetSignableOrderRequest and cannot be null");
            }
            this.User = user;
            this.ExpirationTimestamp = expirationTimestamp;
            this.Fees = fees;
        }

        /// <summary>
        /// Fee-exclusive amount to buy the asset
        /// </summary>
        /// <value>Fee-exclusive amount to buy the asset</value>
        [DataMember(Name = "amount_buy", IsRequired = true, EmitDefaultValue = true)]
        public string AmountBuy { get; set; }

        /// <summary>
        /// Amount to sell (quantity)
        /// </summary>
        /// <value>Amount to sell (quantity)</value>
        [DataMember(Name = "amount_sell", IsRequired = true, EmitDefaultValue = true)]
        public string AmountSell { get; set; }

        /// <summary>
        /// ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour
        /// </summary>
        /// <value>ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour</value>
        [DataMember(Name = "expiration_timestamp", EmitDefaultValue = false)]
        public int ExpirationTimestamp { get; set; }

        /// <summary>
        /// Inclusion of either maker or taker fees
        /// </summary>
        /// <value>Inclusion of either maker or taker fees</value>
        [DataMember(Name = "fees", EmitDefaultValue = false)]
        public List<FeeEntry> Fees { get; set; }

        /// <summary>
        /// Gets or Sets TokenBuy
        /// </summary>
        [DataMember(Name = "token_buy", IsRequired = true, EmitDefaultValue = true)]
        public SignableToken TokenBuy { get; set; }

        /// <summary>
        /// Gets or Sets TokenSell
        /// </summary>
        [DataMember(Name = "token_sell", IsRequired = true, EmitDefaultValue = true)]
        public SignableToken TokenSell { get; set; }

        /// <summary>
        /// Ethereum address of the submitting user
        /// </summary>
        /// <value>Ethereum address of the submitting user</value>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSignableOrderRequest {\n");
            sb.Append("  AmountBuy: ").Append(AmountBuy).Append("\n");
            sb.Append("  AmountSell: ").Append(AmountSell).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  TokenBuy: ").Append(TokenBuy).Append("\n");
            sb.Append("  TokenSell: ").Append(TokenSell).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSignableOrderRequest);
        }

        /// <summary>
        /// Returns true if GetSignableOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSignableOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSignableOrderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AmountBuy == input.AmountBuy ||
                    (this.AmountBuy != null &&
                    this.AmountBuy.Equals(input.AmountBuy))
                ) && 
                (
                    this.AmountSell == input.AmountSell ||
                    (this.AmountSell != null &&
                    this.AmountSell.Equals(input.AmountSell))
                ) && 
                (
                    this.ExpirationTimestamp == input.ExpirationTimestamp ||
                    this.ExpirationTimestamp.Equals(input.ExpirationTimestamp)
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.TokenBuy == input.TokenBuy ||
                    (this.TokenBuy != null &&
                    this.TokenBuy.Equals(input.TokenBuy))
                ) && 
                (
                    this.TokenSell == input.TokenSell ||
                    (this.TokenSell != null &&
                    this.TokenSell.Equals(input.TokenSell))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountBuy != null)
                {
                    hashCode = (hashCode * 59) + this.AmountBuy.GetHashCode();
                }
                if (this.AmountSell != null)
                {
                    hashCode = (hashCode * 59) + this.AmountSell.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpirationTimestamp.GetHashCode();
                if (this.Fees != null)
                {
                    hashCode = (hashCode * 59) + this.Fees.GetHashCode();
                }
                if (this.TokenBuy != null)
                {
                    hashCode = (hashCode * 59) + this.TokenBuy.GetHashCode();
                }
                if (this.TokenSell != null)
                {
                    hashCode = (hashCode * 59) + this.TokenSell.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
