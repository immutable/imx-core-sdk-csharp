/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// MintResultDetails
    /// </summary>
    [DataContract(Name = "MintResultDetails")]
    public partial class MintResultDetails : IEquatable<MintResultDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MintResultDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MintResultDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MintResultDetails" /> class.
        /// </summary>
        /// <param name="contractAddress">Contract address of this token (required).</param>
        /// <param name="tokenId">IMX ID of this token (required).</param>
        /// <param name="txId">Mint Transaction ID (required).</param>
        public MintResultDetails(string contractAddress = default(string), string tokenId = default(string), int txId = default(int))
        {
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for MintResultDetails and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for MintResultDetails and cannot be null");
            }
            this.TokenId = tokenId;
            this.TxId = txId;
        }

        /// <summary>
        /// Contract address of this token
        /// </summary>
        /// <value>Contract address of this token</value>
        [DataMember(Name = "contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// IMX ID of this token
        /// </summary>
        /// <value>IMX ID of this token</value>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// Mint Transaction ID
        /// </summary>
        /// <value>Mint Transaction ID</value>
        [DataMember(Name = "tx_id", IsRequired = true, EmitDefaultValue = true)]
        public int TxId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MintResultDetails {\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MintResultDetails);
        }

        /// <summary>
        /// Returns true if MintResultDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of MintResultDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MintResultDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.TxId == input.TxId ||
                    this.TxId.Equals(input.TxId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TxId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
