/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// EncodeAssetTokenData
    /// </summary>
    [DataContract(Name = "EncodeAssetTokenData")]
    public partial class EncodeAssetTokenData : IEquatable<EncodeAssetTokenData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EncodeAssetTokenData" /> class.
        /// </summary>
        /// <param name="blueprint">Blueprint information of the token to be encoded. Used if token is mintable..</param>
        /// <param name="id">ID of the token to be encoded. Used if token is mintable..</param>
        /// <param name="tokenAddress">Contract address of the token to be encoded.</param>
        /// <param name="tokenId">TokenId of the token to be encoded. Used if token is non-mintable.</param>
        public EncodeAssetTokenData(string blueprint = default(string), string id = default(string), string tokenAddress = default(string), string tokenId = default(string))
        {
            this.Blueprint = blueprint;
            this.Id = id;
            this.TokenAddress = tokenAddress;
            this.TokenId = tokenId;
        }

        /// <summary>
        /// Blueprint information of the token to be encoded. Used if token is mintable.
        /// </summary>
        /// <value>Blueprint information of the token to be encoded. Used if token is mintable.</value>
        [DataMember(Name = "blueprint", EmitDefaultValue = false)]
        public string Blueprint { get; set; }

        /// <summary>
        /// ID of the token to be encoded. Used if token is mintable.
        /// </summary>
        /// <value>ID of the token to be encoded. Used if token is mintable.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Contract address of the token to be encoded
        /// </summary>
        /// <value>Contract address of the token to be encoded</value>
        [DataMember(Name = "token_address", EmitDefaultValue = false)]
        public string TokenAddress { get; set; }

        /// <summary>
        /// TokenId of the token to be encoded. Used if token is non-mintable
        /// </summary>
        /// <value>TokenId of the token to be encoded. Used if token is non-mintable</value>
        [DataMember(Name = "token_id", EmitDefaultValue = false)]
        public string TokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EncodeAssetTokenData {\n");
            sb.Append("  Blueprint: ").Append(Blueprint).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EncodeAssetTokenData);
        }

        /// <summary>
        /// Returns true if EncodeAssetTokenData instances are equal
        /// </summary>
        /// <param name="input">Instance of EncodeAssetTokenData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EncodeAssetTokenData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Blueprint == input.Blueprint ||
                    (this.Blueprint != null &&
                    this.Blueprint.Equals(input.Blueprint))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TokenAddress == input.TokenAddress ||
                    (this.TokenAddress != null &&
                    this.TokenAddress.Equals(input.TokenAddress))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blueprint != null)
                {
                    hashCode = (hashCode * 59) + this.Blueprint.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TokenAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenAddress.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
