/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// AggregateLimit
    /// </summary>
    [DataContract(Name = "aggregate.Limit")]
    public partial class AggregateLimit : IEquatable<AggregateLimit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregateLimit" /> class.
        /// </summary>
        /// <param name="maxAmount">Max transaction amount.</param>
        /// <param name="minAmount">Min transaction amount.</param>
        public AggregateLimit(decimal maxAmount = default(decimal), decimal minAmount = default(decimal))
        {
            this.MaxAmount = maxAmount;
            this.MinAmount = minAmount;
        }

        /// <summary>
        /// Max transaction amount
        /// </summary>
        /// <value>Max transaction amount</value>
        [DataMember(Name = "max_amount", EmitDefaultValue = false)]
        public decimal MaxAmount { get; set; }

        /// <summary>
        /// Min transaction amount
        /// </summary>
        /// <value>Min transaction amount</value>
        [DataMember(Name = "min_amount", EmitDefaultValue = false)]
        public decimal MinAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregateLimit {\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregateLimit);
        }

        /// <summary>
        /// Returns true if AggregateLimit instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregateLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregateLimit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxAmount == input.MaxAmount ||
                    this.MaxAmount.Equals(input.MaxAmount)
                ) && 
                (
                    this.MinAmount == input.MinAmount ||
                    this.MinAmount.Equals(input.MinAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.MinAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
