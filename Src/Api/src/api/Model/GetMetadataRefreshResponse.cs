/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// GetMetadataRefreshResponse
    /// </summary>
    [DataContract(Name = "GetMetadataRefreshResponse")]
    public partial class GetMetadataRefreshResponse : IEquatable<GetMetadataRefreshResponse>, IValidatableObject
    {
        /// <summary>
        /// The metadata refresh status
        /// </summary>
        /// <value>The metadata refresh status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgress = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 3

        }


        /// <summary>
        /// The metadata refresh status
        /// </summary>
        /// <value>The metadata refresh status</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMetadataRefreshResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMetadataRefreshResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMetadataRefreshResponse" /> class.
        /// </summary>
        /// <param name="collectionAddress">The collection address (required).</param>
        /// <param name="completedAt">When the metadata refresh completed.</param>
        /// <param name="refreshId">The metadata refresh ID (required).</param>
        /// <param name="startedAt">When the metadata refresh started (required).</param>
        /// <param name="status">The metadata refresh status (required).</param>
        /// <param name="summary">The current metadata refresh summary. The summary continue to update until metadata refresh is completed (required).</param>
        public GetMetadataRefreshResponse(string collectionAddress = default(string), string completedAt = default(string), string refreshId = default(string), string startedAt = default(string), StatusEnum status = default(StatusEnum), List<MetadataRefreshSummary> summary = default(List<MetadataRefreshSummary>))
        {
            // to ensure "collectionAddress" is required (not null)
            if (collectionAddress == null)
            {
                throw new ArgumentNullException("collectionAddress is a required property for GetMetadataRefreshResponse and cannot be null");
            }
            this.CollectionAddress = collectionAddress;
            // to ensure "refreshId" is required (not null)
            if (refreshId == null)
            {
                throw new ArgumentNullException("refreshId is a required property for GetMetadataRefreshResponse and cannot be null");
            }
            this.RefreshId = refreshId;
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new ArgumentNullException("startedAt is a required property for GetMetadataRefreshResponse and cannot be null");
            }
            this.StartedAt = startedAt;
            this.Status = status;
            // to ensure "summary" is required (not null)
            if (summary == null)
            {
                throw new ArgumentNullException("summary is a required property for GetMetadataRefreshResponse and cannot be null");
            }
            this.Summary = summary;
            this.CompletedAt = completedAt;
        }

        /// <summary>
        /// The collection address
        /// </summary>
        /// <value>The collection address</value>
        [DataMember(Name = "collection_address", IsRequired = true, EmitDefaultValue = true)]
        public string CollectionAddress { get; set; }

        /// <summary>
        /// When the metadata refresh completed
        /// </summary>
        /// <value>When the metadata refresh completed</value>
        [DataMember(Name = "completed_at", EmitDefaultValue = true)]
        public string CompletedAt { get; set; }

        /// <summary>
        /// The metadata refresh ID
        /// </summary>
        /// <value>The metadata refresh ID</value>
        [DataMember(Name = "refresh_id", IsRequired = true, EmitDefaultValue = true)]
        public string RefreshId { get; set; }

        /// <summary>
        /// When the metadata refresh started
        /// </summary>
        /// <value>When the metadata refresh started</value>
        [DataMember(Name = "started_at", IsRequired = true, EmitDefaultValue = true)]
        public string StartedAt { get; set; }

        /// <summary>
        /// The current metadata refresh summary. The summary continue to update until metadata refresh is completed
        /// </summary>
        /// <value>The current metadata refresh summary. The summary continue to update until metadata refresh is completed</value>
        [DataMember(Name = "summary", IsRequired = true, EmitDefaultValue = true)]
        public List<MetadataRefreshSummary> Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMetadataRefreshResponse {\n");
            sb.Append("  CollectionAddress: ").Append(CollectionAddress).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  RefreshId: ").Append(RefreshId).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMetadataRefreshResponse);
        }

        /// <summary>
        /// Returns true if GetMetadataRefreshResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMetadataRefreshResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMetadataRefreshResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CollectionAddress == input.CollectionAddress ||
                    (this.CollectionAddress != null &&
                    this.CollectionAddress.Equals(input.CollectionAddress))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.RefreshId == input.RefreshId ||
                    (this.RefreshId != null &&
                    this.RefreshId.Equals(input.RefreshId))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Summary == input.Summary ||
                    this.Summary != null &&
                    input.Summary != null &&
                    this.Summary.SequenceEqual(input.Summary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CollectionAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionAddress.GetHashCode();
                }
                if (this.CompletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedAt.GetHashCode();
                }
                if (this.RefreshId != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshId.GetHashCode();
                }
                if (this.StartedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
