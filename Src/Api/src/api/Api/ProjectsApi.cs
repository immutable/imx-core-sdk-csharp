/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using api.Client;
using api.Model;

namespace api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a project
        /// </summary>
        /// <remarks>
        /// Create a project
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createProjectRequest">create a project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateProjectResponse</returns>
        CreateProjectResponse CreateProject(string iMXSignature, string iMXTimestamp, CreateProjectRequest createProjectRequest, int operationIndex = 0);

        /// <summary>
        /// Create a project
        /// </summary>
        /// <remarks>
        /// Create a project
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createProjectRequest">create a project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateProjectResponse</returns>
        ApiResponse<CreateProjectResponse> CreateProjectWithHttpInfo(string iMXSignature, string iMXTimestamp, CreateProjectRequest createProjectRequest, int operationIndex = 0);
        /// <summary>
        /// Get a project
        /// </summary>
        /// <remarks>
        /// Get a project
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project ID</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Project</returns>
        Project GetProject(string id, string iMXSignature, string iMXTimestamp, int operationIndex = 0);

        /// <summary>
        /// Get a project
        /// </summary>
        /// <remarks>
        /// Get a project
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project ID</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> GetProjectWithHttpInfo(string id, string iMXSignature, string iMXTimestamp, int operationIndex = 0);
        /// <summary>
        /// Get projects
        /// </summary>
        /// <remarks>
        /// Get projects
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProjectsResponse</returns>
        GetProjectsResponse GetProjects(string iMXSignature, string iMXTimestamp, int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), int operationIndex = 0);

        /// <summary>
        /// Get projects
        /// </summary>
        /// <remarks>
        /// Get projects
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProjectsResponse</returns>
        ApiResponse<GetProjectsResponse> GetProjectsWithHttpInfo(string iMXSignature, string iMXTimestamp, int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a project
        /// </summary>
        /// <remarks>
        /// Create a project
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createProjectRequest">create a project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateProjectResponse</returns>
        System.Threading.Tasks.Task<CreateProjectResponse> CreateProjectAsync(string iMXSignature, string iMXTimestamp, CreateProjectRequest createProjectRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a project
        /// </summary>
        /// <remarks>
        /// Create a project
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createProjectRequest">create a project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateProjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateProjectResponse>> CreateProjectWithHttpInfoAsync(string iMXSignature, string iMXTimestamp, CreateProjectRequest createProjectRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a project
        /// </summary>
        /// <remarks>
        /// Get a project
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project ID</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> GetProjectAsync(string id, string iMXSignature, string iMXTimestamp, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a project
        /// </summary>
        /// <remarks>
        /// Get a project
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project ID</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> GetProjectWithHttpInfoAsync(string id, string iMXSignature, string iMXTimestamp, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get projects
        /// </summary>
        /// <remarks>
        /// Get projects
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProjectsResponse</returns>
        System.Threading.Tasks.Task<GetProjectsResponse> GetProjectsAsync(string iMXSignature, string iMXTimestamp, int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get projects
        /// </summary>
        /// <remarks>
        /// Get projects
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProjectsResponse>> GetProjectsWithHttpInfoAsync(string iMXSignature, string iMXTimestamp, int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IProjectsApiSync, IProjectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IProjectsApi
    {
        private api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(string basePath)
        {
            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                new api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsApi(api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProjectsApi(api.Client.ISynchronousClient client, api.Client.IAsynchronousClient asyncClient, api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a project Create a project
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createProjectRequest">create a project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateProjectResponse</returns>
        public CreateProjectResponse CreateProject(string iMXSignature, string iMXTimestamp, CreateProjectRequest createProjectRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<CreateProjectResponse> localVarResponse = CreateProjectWithHttpInfo(iMXSignature, iMXTimestamp, createProjectRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a project Create a project
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createProjectRequest">create a project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateProjectResponse</returns>
        public api.Client.ApiResponse<CreateProjectResponse> CreateProjectWithHttpInfo(string iMXSignature, string iMXTimestamp, CreateProjectRequest createProjectRequest, int operationIndex = 0)
        {
            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling ProjectsApi->CreateProject");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling ProjectsApi->CreateProject");
            }

            // verify the required parameter 'createProjectRequest' is set
            if (createProjectRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'createProjectRequest' when calling ProjectsApi->CreateProject");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = createProjectRequest;

            localVarRequestOptions.Operation = "ProjectsApi.CreateProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateProjectResponse>("/v1/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a project Create a project
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createProjectRequest">create a project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateProjectResponse</returns>
        public async System.Threading.Tasks.Task<CreateProjectResponse> CreateProjectAsync(string iMXSignature, string iMXTimestamp, CreateProjectRequest createProjectRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<CreateProjectResponse> localVarResponse = await CreateProjectWithHttpInfoAsync(iMXSignature, iMXTimestamp, createProjectRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a project Create a project
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createProjectRequest">create a project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateProjectResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<CreateProjectResponse>> CreateProjectWithHttpInfoAsync(string iMXSignature, string iMXTimestamp, CreateProjectRequest createProjectRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling ProjectsApi->CreateProject");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling ProjectsApi->CreateProject");
            }

            // verify the required parameter 'createProjectRequest' is set
            if (createProjectRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'createProjectRequest' when calling ProjectsApi->CreateProject");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = createProjectRequest;

            localVarRequestOptions.Operation = "ProjectsApi.CreateProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateProjectResponse>("/v1/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a project Get a project
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project ID</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Project</returns>
        public Project GetProject(string id, string iMXSignature, string iMXTimestamp, int operationIndex = 0)
        {
            api.Client.ApiResponse<Project> localVarResponse = GetProjectWithHttpInfo(id, iMXSignature, iMXTimestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a project Get a project
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project ID</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Project</returns>
        public api.Client.ApiResponse<Project> GetProjectWithHttpInfo(string id, string iMXSignature, string iMXTimestamp, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetProject");
            }

            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling ProjectsApi->GetProject");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling ProjectsApi->GetProject");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("id", api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter

            localVarRequestOptions.Operation = "ProjectsApi.GetProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Project>("/v1/projects/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a project Get a project
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project ID</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> GetProjectAsync(string id, string iMXSignature, string iMXTimestamp, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<Project> localVarResponse = await GetProjectWithHttpInfoAsync(id, iMXSignature, iMXTimestamp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a project Get a project
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Project ID</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<Project>> GetProjectWithHttpInfoAsync(string id, string iMXSignature, string iMXTimestamp, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'id' when calling ProjectsApi->GetProject");
            }

            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling ProjectsApi->GetProject");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling ProjectsApi->GetProject");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter

            localVarRequestOptions.Operation = "ProjectsApi.GetProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Project>("/v1/projects/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get projects Get projects
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProjectsResponse</returns>
        public GetProjectsResponse GetProjects(string iMXSignature, string iMXTimestamp, int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), int operationIndex = 0)
        {
            api.Client.ApiResponse<GetProjectsResponse> localVarResponse = GetProjectsWithHttpInfo(iMXSignature, iMXTimestamp, pageSize, cursor, orderBy, direction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get projects Get projects
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProjectsResponse</returns>
        public api.Client.ApiResponse<GetProjectsResponse> GetProjectsWithHttpInfo(string iMXSignature, string iMXTimestamp, int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling ProjectsApi->GetProjects");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling ProjectsApi->GetProjects");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter

            localVarRequestOptions.Operation = "ProjectsApi.GetProjects";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProjectsResponse>("/v1/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get projects Get projects
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProjectsResponse</returns>
        public async System.Threading.Tasks.Task<GetProjectsResponse> GetProjectsAsync(string iMXSignature, string iMXTimestamp, int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<GetProjectsResponse> localVarResponse = await GetProjectsWithHttpInfoAsync(iMXSignature, iMXTimestamp, pageSize, cursor, orderBy, direction, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get projects Get projects
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProjectsResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<GetProjectsResponse>> GetProjectsWithHttpInfoAsync(string iMXSignature, string iMXTimestamp, int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling ProjectsApi->GetProjects");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling ProjectsApi->GetProjects");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter

            localVarRequestOptions.Operation = "ProjectsApi.GetProjects";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProjectsResponse>("/v1/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
