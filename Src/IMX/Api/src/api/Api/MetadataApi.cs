/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using api.Client;
using api.Model;

namespace api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add metadata schema to collection
        /// </summary>
        /// <remarks>
        /// Add metadata schema to collection
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="addMetadataSchemaToCollectionRequest">add metadata schema to a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse AddMetadataSchemaToCollection(string address, string iMXSignature, string iMXTimestamp, AddMetadataSchemaToCollectionRequest addMetadataSchemaToCollectionRequest, int operationIndex = 0);

        /// <summary>
        /// Add metadata schema to collection
        /// </summary>
        /// <remarks>
        /// Add metadata schema to collection
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="addMetadataSchemaToCollectionRequest">add metadata schema to a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> AddMetadataSchemaToCollectionWithHttpInfo(string address, string iMXSignature, string iMXTimestamp, AddMetadataSchemaToCollectionRequest addMetadataSchemaToCollectionRequest, int operationIndex = 0);
        /// <summary>
        /// Get collection metadata schema
        /// </summary>
        /// <remarks>
        /// Get collection metadata schema
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MetadataSchemaProperty&gt;</returns>
        List<MetadataSchemaProperty> GetMetadataSchema(string address, int operationIndex = 0);

        /// <summary>
        /// Get collection metadata schema
        /// </summary>
        /// <remarks>
        /// Get collection metadata schema
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MetadataSchemaProperty&gt;</returns>
        ApiResponse<List<MetadataSchemaProperty>> GetMetadataSchemaWithHttpInfo(string address, int operationIndex = 0);
        /// <summary>
        /// Update metadata schema by name
        /// </summary>
        /// <remarks>
        /// Update metadata schema by name
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="name">Metadata schema name</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="metadataSchemaRequest">update metadata schema</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse UpdateMetadataSchemaByName(string address, string name, string iMXSignature, string iMXTimestamp, MetadataSchemaRequest metadataSchemaRequest, int operationIndex = 0);

        /// <summary>
        /// Update metadata schema by name
        /// </summary>
        /// <remarks>
        /// Update metadata schema by name
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="name">Metadata schema name</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="metadataSchemaRequest">update metadata schema</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> UpdateMetadataSchemaByNameWithHttpInfo(string address, string name, string iMXSignature, string iMXTimestamp, MetadataSchemaRequest metadataSchemaRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add metadata schema to collection
        /// </summary>
        /// <remarks>
        /// Add metadata schema to collection
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="addMetadataSchemaToCollectionRequest">add metadata schema to a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> AddMetadataSchemaToCollectionAsync(string address, string iMXSignature, string iMXTimestamp, AddMetadataSchemaToCollectionRequest addMetadataSchemaToCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add metadata schema to collection
        /// </summary>
        /// <remarks>
        /// Add metadata schema to collection
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="addMetadataSchemaToCollectionRequest">add metadata schema to a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> AddMetadataSchemaToCollectionWithHttpInfoAsync(string address, string iMXSignature, string iMXTimestamp, AddMetadataSchemaToCollectionRequest addMetadataSchemaToCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get collection metadata schema
        /// </summary>
        /// <remarks>
        /// Get collection metadata schema
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MetadataSchemaProperty&gt;</returns>
        System.Threading.Tasks.Task<List<MetadataSchemaProperty>> GetMetadataSchemaAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get collection metadata schema
        /// </summary>
        /// <remarks>
        /// Get collection metadata schema
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MetadataSchemaProperty&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MetadataSchemaProperty>>> GetMetadataSchemaWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update metadata schema by name
        /// </summary>
        /// <remarks>
        /// Update metadata schema by name
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="name">Metadata schema name</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="metadataSchemaRequest">update metadata schema</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> UpdateMetadataSchemaByNameAsync(string address, string name, string iMXSignature, string iMXTimestamp, MetadataSchemaRequest metadataSchemaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update metadata schema by name
        /// </summary>
        /// <remarks>
        /// Update metadata schema by name
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="name">Metadata schema name</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="metadataSchemaRequest">update metadata schema</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> UpdateMetadataSchemaByNameWithHttpInfoAsync(string address, string name, string iMXSignature, string iMXTimestamp, MetadataSchemaRequest metadataSchemaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApi : IMetadataApiSync, IMetadataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataApi : IMetadataApi
    {
        private api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataApi(string basePath)
        {
            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                new api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetadataApi(api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetadataApi(api.Client.ISynchronousClient client, api.Client.IAsynchronousClient asyncClient, api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add metadata schema to collection Add metadata schema to collection
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="addMetadataSchemaToCollectionRequest">add metadata schema to a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse AddMetadataSchemaToCollection(string address, string iMXSignature, string iMXTimestamp, AddMetadataSchemaToCollectionRequest addMetadataSchemaToCollectionRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<SuccessResponse> localVarResponse = AddMetadataSchemaToCollectionWithHttpInfo(address, iMXSignature, iMXTimestamp, addMetadataSchemaToCollectionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add metadata schema to collection Add metadata schema to collection
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="addMetadataSchemaToCollectionRequest">add metadata schema to a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public api.Client.ApiResponse<SuccessResponse> AddMetadataSchemaToCollectionWithHttpInfo(string address, string iMXSignature, string iMXTimestamp, AddMetadataSchemaToCollectionRequest addMetadataSchemaToCollectionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'address' when calling MetadataApi->AddMetadataSchemaToCollection");
            }

            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling MetadataApi->AddMetadataSchemaToCollection");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling MetadataApi->AddMetadataSchemaToCollection");
            }

            // verify the required parameter 'addMetadataSchemaToCollectionRequest' is set
            if (addMetadataSchemaToCollectionRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'addMetadataSchemaToCollectionRequest' when calling MetadataApi->AddMetadataSchemaToCollection");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("address", api.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = addMetadataSchemaToCollectionRequest;

            localVarRequestOptions.Operation = "MetadataApi.AddMetadataSchemaToCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessResponse>("/v1/collections/{address}/metadata-schema", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMetadataSchemaToCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add metadata schema to collection Add metadata schema to collection
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="addMetadataSchemaToCollectionRequest">add metadata schema to a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> AddMetadataSchemaToCollectionAsync(string address, string iMXSignature, string iMXTimestamp, AddMetadataSchemaToCollectionRequest addMetadataSchemaToCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<SuccessResponse> localVarResponse = await AddMetadataSchemaToCollectionWithHttpInfoAsync(address, iMXSignature, iMXTimestamp, addMetadataSchemaToCollectionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add metadata schema to collection Add metadata schema to collection
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="addMetadataSchemaToCollectionRequest">add metadata schema to a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<SuccessResponse>> AddMetadataSchemaToCollectionWithHttpInfoAsync(string address, string iMXSignature, string iMXTimestamp, AddMetadataSchemaToCollectionRequest addMetadataSchemaToCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'address' when calling MetadataApi->AddMetadataSchemaToCollection");
            }

            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling MetadataApi->AddMetadataSchemaToCollection");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling MetadataApi->AddMetadataSchemaToCollection");
            }

            // verify the required parameter 'addMetadataSchemaToCollectionRequest' is set
            if (addMetadataSchemaToCollectionRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'addMetadataSchemaToCollectionRequest' when calling MetadataApi->AddMetadataSchemaToCollection");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", api.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = addMetadataSchemaToCollectionRequest;

            localVarRequestOptions.Operation = "MetadataApi.AddMetadataSchemaToCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessResponse>("/v1/collections/{address}/metadata-schema", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMetadataSchemaToCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get collection metadata schema Get collection metadata schema
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MetadataSchemaProperty&gt;</returns>
        public List<MetadataSchemaProperty> GetMetadataSchema(string address, int operationIndex = 0)
        {
            api.Client.ApiResponse<List<MetadataSchemaProperty>> localVarResponse = GetMetadataSchemaWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection metadata schema Get collection metadata schema
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MetadataSchemaProperty&gt;</returns>
        public api.Client.ApiResponse<List<MetadataSchemaProperty>> GetMetadataSchemaWithHttpInfo(string address, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'address' when calling MetadataApi->GetMetadataSchema");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("address", api.Client.ClientUtils.ParameterToString(address)); // path parameter

            localVarRequestOptions.Operation = "MetadataApi.GetMetadataSchema";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MetadataSchemaProperty>>("/v1/collections/{address}/metadata-schema", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get collection metadata schema Get collection metadata schema
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MetadataSchemaProperty&gt;</returns>
        public async System.Threading.Tasks.Task<List<MetadataSchemaProperty>> GetMetadataSchemaAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<List<MetadataSchemaProperty>> localVarResponse = await GetMetadataSchemaWithHttpInfoAsync(address, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection metadata schema Get collection metadata schema
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MetadataSchemaProperty&gt;)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<List<MetadataSchemaProperty>>> GetMetadataSchemaWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'address' when calling MetadataApi->GetMetadataSchema");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", api.Client.ClientUtils.ParameterToString(address)); // path parameter

            localVarRequestOptions.Operation = "MetadataApi.GetMetadataSchema";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MetadataSchemaProperty>>("/v1/collections/{address}/metadata-schema", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update metadata schema by name Update metadata schema by name
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="name">Metadata schema name</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="metadataSchemaRequest">update metadata schema</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse UpdateMetadataSchemaByName(string address, string name, string iMXSignature, string iMXTimestamp, MetadataSchemaRequest metadataSchemaRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<SuccessResponse> localVarResponse = UpdateMetadataSchemaByNameWithHttpInfo(address, name, iMXSignature, iMXTimestamp, metadataSchemaRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update metadata schema by name Update metadata schema by name
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="name">Metadata schema name</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="metadataSchemaRequest">update metadata schema</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public api.Client.ApiResponse<SuccessResponse> UpdateMetadataSchemaByNameWithHttpInfo(string address, string name, string iMXSignature, string iMXTimestamp, MetadataSchemaRequest metadataSchemaRequest, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'address' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            // verify the required parameter 'metadataSchemaRequest' is set
            if (metadataSchemaRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'metadataSchemaRequest' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("address", api.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", api.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = metadataSchemaRequest;

            localVarRequestOptions.Operation = "MetadataApi.UpdateMetadataSchemaByName";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SuccessResponse>("/v1/collections/{address}/metadata-schema/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMetadataSchemaByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update metadata schema by name Update metadata schema by name
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="name">Metadata schema name</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="metadataSchemaRequest">update metadata schema</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> UpdateMetadataSchemaByNameAsync(string address, string name, string iMXSignature, string iMXTimestamp, MetadataSchemaRequest metadataSchemaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<SuccessResponse> localVarResponse = await UpdateMetadataSchemaByNameWithHttpInfoAsync(address, name, iMXSignature, iMXTimestamp, metadataSchemaRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update metadata schema by name Update metadata schema by name
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="name">Metadata schema name</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="metadataSchemaRequest">update metadata schema</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<SuccessResponse>> UpdateMetadataSchemaByNameWithHttpInfoAsync(string address, string name, string iMXSignature, string iMXTimestamp, MetadataSchemaRequest metadataSchemaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'address' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'name' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling MetadataApi->UpdateMetadataSchemaByName");
            }

            // verify the required parameter 'metadataSchemaRequest' is set
            if (metadataSchemaRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'metadataSchemaRequest' when calling MetadataApi->UpdateMetadataSchemaByName");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", api.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", api.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", api.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", api.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = metadataSchemaRequest;

            localVarRequestOptions.Operation = "MetadataApi.UpdateMetadataSchemaByName";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SuccessResponse>("/v1/collections/{address}/metadata-schema/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMetadataSchemaByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
