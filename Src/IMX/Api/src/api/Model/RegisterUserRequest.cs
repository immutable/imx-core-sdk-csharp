/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// RegisterUserRequest
    /// </summary>
    [DataContract(Name = "RegisterUserRequest")]
    public partial class RegisterUserRequest : IEquatable<RegisterUserRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUserRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterUserRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUserRequest" /> class.
        /// </summary>
        /// <param name="email">User email.</param>
        /// <param name="ethSignature">Eth signature (required).</param>
        /// <param name="etherKey">The ether key of the user (required).</param>
        /// <param name="starkKey">Public stark key of the user (required).</param>
        /// <param name="starkSignature">Payload signature (required).</param>
        public RegisterUserRequest(string email = default(string), string ethSignature = default(string), string etherKey = default(string), string starkKey = default(string), string starkSignature = default(string))
        {
            // to ensure "ethSignature" is required (not null)
            if (ethSignature == null)
            {
                throw new ArgumentNullException("ethSignature is a required property for RegisterUserRequest and cannot be null");
            }
            this.EthSignature = ethSignature;
            // to ensure "etherKey" is required (not null)
            if (etherKey == null)
            {
                throw new ArgumentNullException("etherKey is a required property for RegisterUserRequest and cannot be null");
            }
            this.EtherKey = etherKey;
            // to ensure "starkKey" is required (not null)
            if (starkKey == null)
            {
                throw new ArgumentNullException("starkKey is a required property for RegisterUserRequest and cannot be null");
            }
            this.StarkKey = starkKey;
            // to ensure "starkSignature" is required (not null)
            if (starkSignature == null)
            {
                throw new ArgumentNullException("starkSignature is a required property for RegisterUserRequest and cannot be null");
            }
            this.StarkSignature = starkSignature;
            this.Email = email;
        }

        /// <summary>
        /// User email
        /// </summary>
        /// <value>User email</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Eth signature
        /// </summary>
        /// <value>Eth signature</value>
        [DataMember(Name = "eth_signature", IsRequired = true, EmitDefaultValue = true)]
        public string EthSignature { get; set; }

        /// <summary>
        /// The ether key of the user
        /// </summary>
        /// <value>The ether key of the user</value>
        [DataMember(Name = "ether_key", IsRequired = true, EmitDefaultValue = true)]
        public string EtherKey { get; set; }

        /// <summary>
        /// Public stark key of the user
        /// </summary>
        /// <value>Public stark key of the user</value>
        [DataMember(Name = "stark_key", IsRequired = true, EmitDefaultValue = true)]
        public string StarkKey { get; set; }

        /// <summary>
        /// Payload signature
        /// </summary>
        /// <value>Payload signature</value>
        [DataMember(Name = "stark_signature", IsRequired = true, EmitDefaultValue = true)]
        public string StarkSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterUserRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EthSignature: ").Append(EthSignature).Append("\n");
            sb.Append("  EtherKey: ").Append(EtherKey).Append("\n");
            sb.Append("  StarkKey: ").Append(StarkKey).Append("\n");
            sb.Append("  StarkSignature: ").Append(StarkSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterUserRequest);
        }

        /// <summary>
        /// Returns true if RegisterUserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterUserRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EthSignature == input.EthSignature ||
                    (this.EthSignature != null &&
                    this.EthSignature.Equals(input.EthSignature))
                ) && 
                (
                    this.EtherKey == input.EtherKey ||
                    (this.EtherKey != null &&
                    this.EtherKey.Equals(input.EtherKey))
                ) && 
                (
                    this.StarkKey == input.StarkKey ||
                    (this.StarkKey != null &&
                    this.StarkKey.Equals(input.StarkKey))
                ) && 
                (
                    this.StarkSignature == input.StarkSignature ||
                    (this.StarkSignature != null &&
                    this.StarkSignature.Equals(input.StarkSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.EthSignature != null)
                {
                    hashCode = (hashCode * 59) + this.EthSignature.GetHashCode();
                }
                if (this.EtherKey != null)
                {
                    hashCode = (hashCode * 59) + this.EtherKey.GetHashCode();
                }
                if (this.StarkKey != null)
                {
                    hashCode = (hashCode * 59) + this.StarkKey.GetHashCode();
                }
                if (this.StarkSignature != null)
                {
                    hashCode = (hashCode * 59) + this.StarkSignature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
