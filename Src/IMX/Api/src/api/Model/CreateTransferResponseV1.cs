/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// CreateTransferResponseV1
    /// </summary>
    [DataContract(Name = "CreateTransferResponseV1")]
    public partial class CreateTransferResponseV1 : IEquatable<CreateTransferResponseV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransferResponseV1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTransferResponseV1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransferResponseV1" /> class.
        /// </summary>
        /// <param name="sentSignature">[deprecated] Sent signature (required).</param>
        /// <param name="status">[deprecated] The status of transfer (required).</param>
        /// <param name="time">[deprecated] Time of the transfer (required).</param>
        /// <param name="transferId">ID of the transfer (required).</param>
        public CreateTransferResponseV1(string sentSignature = default(string), string status = default(string), int time = default(int), int transferId = default(int))
        {
            // to ensure "sentSignature" is required (not null)
            if (sentSignature == null)
            {
                throw new ArgumentNullException("sentSignature is a required property for CreateTransferResponseV1 and cannot be null");
            }
            this.SentSignature = sentSignature;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for CreateTransferResponseV1 and cannot be null");
            }
            this.Status = status;
            this.Time = time;
            this.TransferId = transferId;
        }

        /// <summary>
        /// [deprecated] Sent signature
        /// </summary>
        /// <value>[deprecated] Sent signature</value>
        [DataMember(Name = "sent_signature", IsRequired = true, EmitDefaultValue = true)]
        public string SentSignature { get; set; }

        /// <summary>
        /// [deprecated] The status of transfer
        /// </summary>
        /// <value>[deprecated] The status of transfer</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// [deprecated] Time of the transfer
        /// </summary>
        /// <value>[deprecated] Time of the transfer</value>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public int Time { get; set; }

        /// <summary>
        /// ID of the transfer
        /// </summary>
        /// <value>ID of the transfer</value>
        [DataMember(Name = "transfer_id", IsRequired = true, EmitDefaultValue = true)]
        public int TransferId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransferResponseV1 {\n");
            sb.Append("  SentSignature: ").Append(SentSignature).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TransferId: ").Append(TransferId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransferResponseV1);
        }

        /// <summary>
        /// Returns true if CreateTransferResponseV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransferResponseV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransferResponseV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SentSignature == input.SentSignature ||
                    (this.SentSignature != null &&
                    this.SentSignature.Equals(input.SentSignature))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.TransferId == input.TransferId ||
                    this.TransferId.Equals(input.TransferId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SentSignature != null)
                {
                    hashCode = (hashCode * 59) + this.SentSignature.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                hashCode = (hashCode * 59) + this.TransferId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
