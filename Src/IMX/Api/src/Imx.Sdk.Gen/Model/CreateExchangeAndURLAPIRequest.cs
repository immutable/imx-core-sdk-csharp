/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// CreateExchangeAndURLAPIRequest
    /// </summary>
    [DataContract(Name = "CreateExchangeAndURLAPIRequest")]
    public partial class CreateExchangeAndURLAPIRequest : IEquatable<CreateExchangeAndURLAPIRequest>, IValidatableObject
    {
        /// <summary>
        /// Provider name
        /// </summary>
        /// <value>Provider name</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderEnum
        {
            /// <summary>
            /// Enum Moonpay for value: moonpay
            /// </summary>
            [EnumMember(Value = "moonpay")]
            Moonpay = 1,

            /// <summary>
            /// Enum Layerswap for value: layerswap
            /// </summary>
            [EnumMember(Value = "layerswap")]
            Layerswap = 2

        }


        /// <summary>
        /// Provider name
        /// </summary>
        /// <value>Provider name</value>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        public ProviderEnum? Provider { get; set; }
        /// <summary>
        /// Transaction type
        /// </summary>
        /// <value>Transaction type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Onramp for value: onramp
            /// </summary>
            [EnumMember(Value = "onramp")]
            Onramp = 1,

            /// <summary>
            /// Enum Offramp for value: offramp
            /// </summary>
            [EnumMember(Value = "offramp")]
            Offramp = 2

        }


        /// <summary>
        /// Transaction type
        /// </summary>
        /// <value>Transaction type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateExchangeAndURLAPIRequest" /> class.
        /// </summary>
        /// <param name="provider">Provider name.</param>
        /// <param name="type">Transaction type.</param>
        /// <param name="walletAddress">Ethereum address of the user who wants to create transaction.</param>
        /// <param name="widget">widget.</param>
        public CreateExchangeAndURLAPIRequest(ProviderEnum? provider = default(ProviderEnum?), TypeEnum? type = default(TypeEnum?), string walletAddress = default(string), WidgetParams widget = default(WidgetParams))
        {
            this.Provider = provider;
            this.Type = type;
            this.WalletAddress = walletAddress;
            this.Widget = widget;
        }

        /// <summary>
        /// Ethereum address of the user who wants to create transaction
        /// </summary>
        /// <value>Ethereum address of the user who wants to create transaction</value>
        [DataMember(Name = "wallet_address", EmitDefaultValue = false)]
        public string WalletAddress { get; set; }

        /// <summary>
        /// Gets or Sets Widget
        /// </summary>
        [DataMember(Name = "widget", EmitDefaultValue = false)]
        public WidgetParams Widget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateExchangeAndURLAPIRequest {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WalletAddress: ").Append(WalletAddress).Append("\n");
            sb.Append("  Widget: ").Append(Widget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateExchangeAndURLAPIRequest);
        }

        /// <summary>
        /// Returns true if CreateExchangeAndURLAPIRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateExchangeAndURLAPIRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateExchangeAndURLAPIRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Provider == input.Provider ||
                    this.Provider.Equals(input.Provider)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.WalletAddress == input.WalletAddress ||
                    (this.WalletAddress != null &&
                    this.WalletAddress.Equals(input.WalletAddress))
                ) && 
                (
                    this.Widget == input.Widget ||
                    (this.Widget != null &&
                    this.Widget.Equals(input.Widget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.WalletAddress != null)
                {
                    hashCode = (hashCode * 59) + this.WalletAddress.GetHashCode();
                }
                if (this.Widget != null)
                {
                    hashCode = (hashCode * 59) + this.Widget.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
