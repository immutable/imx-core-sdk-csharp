/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// GetSignableTransferRequest
    /// </summary>
    [DataContract(Name = "GetSignableTransferRequest")]
    public partial class GetSignableTransferRequest : IEquatable<GetSignableTransferRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableTransferRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSignableTransferRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableTransferRequest" /> class.
        /// </summary>
        /// <param name="senderEtherKey">Ethereum address of the transferring user (required).</param>
        /// <param name="signableRequests">List of signable transfer details (required).</param>
        public GetSignableTransferRequest(string senderEtherKey = default(string), List<SignableTransferDetails> signableRequests = default(List<SignableTransferDetails>))
        {
            // to ensure "senderEtherKey" is required (not null)
            if (senderEtherKey == null)
            {
                throw new ArgumentNullException("senderEtherKey is a required property for GetSignableTransferRequest and cannot be null");
            }
            this.SenderEtherKey = senderEtherKey;
            // to ensure "signableRequests" is required (not null)
            if (signableRequests == null)
            {
                throw new ArgumentNullException("signableRequests is a required property for GetSignableTransferRequest and cannot be null");
            }
            this.SignableRequests = signableRequests;
        }

        /// <summary>
        /// Ethereum address of the transferring user
        /// </summary>
        /// <value>Ethereum address of the transferring user</value>
        [DataMember(Name = "sender_ether_key", IsRequired = true, EmitDefaultValue = true)]
        public string SenderEtherKey { get; set; }

        /// <summary>
        /// List of signable transfer details
        /// </summary>
        /// <value>List of signable transfer details</value>
        [DataMember(Name = "signable_requests", IsRequired = true, EmitDefaultValue = true)]
        public List<SignableTransferDetails> SignableRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSignableTransferRequest {\n");
            sb.Append("  SenderEtherKey: ").Append(SenderEtherKey).Append("\n");
            sb.Append("  SignableRequests: ").Append(SignableRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSignableTransferRequest);
        }

        /// <summary>
        /// Returns true if GetSignableTransferRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSignableTransferRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSignableTransferRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SenderEtherKey == input.SenderEtherKey ||
                    (this.SenderEtherKey != null &&
                    this.SenderEtherKey.Equals(input.SenderEtherKey))
                ) && 
                (
                    this.SignableRequests == input.SignableRequests ||
                    this.SignableRequests != null &&
                    input.SignableRequests != null &&
                    this.SignableRequests.SequenceEqual(input.SignableRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SenderEtherKey != null)
                {
                    hashCode = (hashCode * 59) + this.SenderEtherKey.GetHashCode();
                }
                if (this.SignableRequests != null)
                {
                    hashCode = (hashCode * 59) + this.SignableRequests.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
