/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// MetadataRefreshErrors
    /// </summary>
    [DataContract(Name = "MetadataRefreshErrors")]
    public partial class MetadataRefreshErrors : IEquatable<MetadataRefreshErrors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRefreshErrors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetadataRefreshErrors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRefreshErrors" /> class.
        /// </summary>
        /// <param name="clientResponseBody">Metadata API response for the token (required).</param>
        /// <param name="clientResponseStatusCode">Metadata API response code for the token (required).</param>
        /// <param name="clientTokenMetadataUrl">Requested metadata url for the token (required).</param>
        /// <param name="collectionAddress">The collection contract address (required).</param>
        /// <param name="createdAt">When the error was created (required).</param>
        /// <param name="errorCode">Metadata refresh error code (required).</param>
        /// <param name="tokenId">The token ID (required).</param>
        public MetadataRefreshErrors(string clientResponseBody = default(string), string clientResponseStatusCode = default(string), string clientTokenMetadataUrl = default(string), string collectionAddress = default(string), string createdAt = default(string), string errorCode = default(string), string tokenId = default(string))
        {
            // to ensure "clientResponseBody" is required (not null)
            if (clientResponseBody == null)
            {
                throw new ArgumentNullException("clientResponseBody is a required property for MetadataRefreshErrors and cannot be null");
            }
            this.ClientResponseBody = clientResponseBody;
            // to ensure "clientResponseStatusCode" is required (not null)
            if (clientResponseStatusCode == null)
            {
                throw new ArgumentNullException("clientResponseStatusCode is a required property for MetadataRefreshErrors and cannot be null");
            }
            this.ClientResponseStatusCode = clientResponseStatusCode;
            // to ensure "clientTokenMetadataUrl" is required (not null)
            if (clientTokenMetadataUrl == null)
            {
                throw new ArgumentNullException("clientTokenMetadataUrl is a required property for MetadataRefreshErrors and cannot be null");
            }
            this.ClientTokenMetadataUrl = clientTokenMetadataUrl;
            // to ensure "collectionAddress" is required (not null)
            if (collectionAddress == null)
            {
                throw new ArgumentNullException("collectionAddress is a required property for MetadataRefreshErrors and cannot be null");
            }
            this.CollectionAddress = collectionAddress;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for MetadataRefreshErrors and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "errorCode" is required (not null)
            if (errorCode == null)
            {
                throw new ArgumentNullException("errorCode is a required property for MetadataRefreshErrors and cannot be null");
            }
            this.ErrorCode = errorCode;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for MetadataRefreshErrors and cannot be null");
            }
            this.TokenId = tokenId;
        }

        /// <summary>
        /// Metadata API response for the token
        /// </summary>
        /// <value>Metadata API response for the token</value>
        [DataMember(Name = "client_response_body", IsRequired = true, EmitDefaultValue = true)]
        public string ClientResponseBody { get; set; }

        /// <summary>
        /// Metadata API response code for the token
        /// </summary>
        /// <value>Metadata API response code for the token</value>
        [DataMember(Name = "client_response_status_code", IsRequired = true, EmitDefaultValue = true)]
        public string ClientResponseStatusCode { get; set; }

        /// <summary>
        /// Requested metadata url for the token
        /// </summary>
        /// <value>Requested metadata url for the token</value>
        [DataMember(Name = "client_token_metadata_url", IsRequired = true, EmitDefaultValue = true)]
        public string ClientTokenMetadataUrl { get; set; }

        /// <summary>
        /// The collection contract address
        /// </summary>
        /// <value>The collection contract address</value>
        [DataMember(Name = "collection_address", IsRequired = true, EmitDefaultValue = true)]
        public string CollectionAddress { get; set; }

        /// <summary>
        /// When the error was created
        /// </summary>
        /// <value>When the error was created</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Metadata refresh error code
        /// </summary>
        /// <value>Metadata refresh error code</value>
        [DataMember(Name = "error_code", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// The token ID
        /// </summary>
        /// <value>The token ID</value>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataRefreshErrors {\n");
            sb.Append("  ClientResponseBody: ").Append(ClientResponseBody).Append("\n");
            sb.Append("  ClientResponseStatusCode: ").Append(ClientResponseStatusCode).Append("\n");
            sb.Append("  ClientTokenMetadataUrl: ").Append(ClientTokenMetadataUrl).Append("\n");
            sb.Append("  CollectionAddress: ").Append(CollectionAddress).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetadataRefreshErrors);
        }

        /// <summary>
        /// Returns true if MetadataRefreshErrors instances are equal
        /// </summary>
        /// <param name="input">Instance of MetadataRefreshErrors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetadataRefreshErrors input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClientResponseBody == input.ClientResponseBody ||
                    (this.ClientResponseBody != null &&
                    this.ClientResponseBody.Equals(input.ClientResponseBody))
                ) && 
                (
                    this.ClientResponseStatusCode == input.ClientResponseStatusCode ||
                    (this.ClientResponseStatusCode != null &&
                    this.ClientResponseStatusCode.Equals(input.ClientResponseStatusCode))
                ) && 
                (
                    this.ClientTokenMetadataUrl == input.ClientTokenMetadataUrl ||
                    (this.ClientTokenMetadataUrl != null &&
                    this.ClientTokenMetadataUrl.Equals(input.ClientTokenMetadataUrl))
                ) && 
                (
                    this.CollectionAddress == input.CollectionAddress ||
                    (this.CollectionAddress != null &&
                    this.CollectionAddress.Equals(input.CollectionAddress))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientResponseBody != null)
                {
                    hashCode = (hashCode * 59) + this.ClientResponseBody.GetHashCode();
                }
                if (this.ClientResponseStatusCode != null)
                {
                    hashCode = (hashCode * 59) + this.ClientResponseStatusCode.GetHashCode();
                }
                if (this.ClientTokenMetadataUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ClientTokenMetadataUrl.GetHashCode();
                }
                if (this.CollectionAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionAddress.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.ErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
