/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// MintableTokenDetails
    /// </summary>
    [DataContract(Name = "MintableTokenDetails")]
    public partial class MintableTokenDetails : IEquatable<MintableTokenDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MintableTokenDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MintableTokenDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MintableTokenDetails" /> class.
        /// </summary>
        /// <param name="blueprint">Blueprint of this token (required).</param>
        /// <param name="clientTokenId">ID provided by the client for this token (required).</param>
        /// <param name="tokenId">IMX Id of this token (required).</param>
        public MintableTokenDetails(string blueprint = default(string), string clientTokenId = default(string), string tokenId = default(string))
        {
            // to ensure "blueprint" is required (not null)
            if (blueprint == null)
            {
                throw new ArgumentNullException("blueprint is a required property for MintableTokenDetails and cannot be null");
            }
            this.Blueprint = blueprint;
            // to ensure "clientTokenId" is required (not null)
            if (clientTokenId == null)
            {
                throw new ArgumentNullException("clientTokenId is a required property for MintableTokenDetails and cannot be null");
            }
            this.ClientTokenId = clientTokenId;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for MintableTokenDetails and cannot be null");
            }
            this.TokenId = tokenId;
        }

        /// <summary>
        /// Blueprint of this token
        /// </summary>
        /// <value>Blueprint of this token</value>
        [DataMember(Name = "blueprint", IsRequired = true, EmitDefaultValue = true)]
        public string Blueprint { get; set; }

        /// <summary>
        /// ID provided by the client for this token
        /// </summary>
        /// <value>ID provided by the client for this token</value>
        [DataMember(Name = "client_token_id", IsRequired = true, EmitDefaultValue = true)]
        public string ClientTokenId { get; set; }

        /// <summary>
        /// IMX Id of this token
        /// </summary>
        /// <value>IMX Id of this token</value>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MintableTokenDetails {\n");
            sb.Append("  Blueprint: ").Append(Blueprint).Append("\n");
            sb.Append("  ClientTokenId: ").Append(ClientTokenId).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MintableTokenDetails);
        }

        /// <summary>
        /// Returns true if MintableTokenDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of MintableTokenDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MintableTokenDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Blueprint == input.Blueprint ||
                    (this.Blueprint != null &&
                    this.Blueprint.Equals(input.Blueprint))
                ) && 
                (
                    this.ClientTokenId == input.ClientTokenId ||
                    (this.ClientTokenId != null &&
                    this.ClientTokenId.Equals(input.ClientTokenId))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blueprint != null)
                {
                    hashCode = (hashCode * 59) + this.Blueprint.GetHashCode();
                }
                if (this.ClientTokenId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientTokenId.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
