/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// TokenData
    /// </summary>
    [DataContract(Name = "TokenData")]
    public partial class TokenData : IEquatable<TokenData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenData" /> class.
        /// </summary>
        /// <param name="decimals">Number of decimals supported by this asset.</param>
        /// <param name="id">[DEPRECATED] Internal Immutable X Token ID.</param>
        /// <param name="properties">properties.</param>
        /// <param name="quantity">Quantity of this asset - inclusive of fees for buy order in v1 API and exclusive of fees in v3 API (required).</param>
        /// <param name="quantityWithFees">Quantity of this asset with the sum of all fees applied to the asset (required).</param>
        /// <param name="symbol">Symbol of a token.</param>
        /// <param name="tokenAddress">Address of ERC721/ERC20 contract.</param>
        /// <param name="tokenId">ERC721 Token ID.</param>
        public TokenData(int decimals = default(int), string id = default(string), AssetProperties properties = default(AssetProperties), string quantity = default(string), string quantityWithFees = default(string), string symbol = default(string), string tokenAddress = default(string), string tokenId = default(string))
        {
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new ArgumentNullException("quantity is a required property for TokenData and cannot be null");
            }
            this.Quantity = quantity;
            // to ensure "quantityWithFees" is required (not null)
            if (quantityWithFees == null)
            {
                throw new ArgumentNullException("quantityWithFees is a required property for TokenData and cannot be null");
            }
            this.QuantityWithFees = quantityWithFees;
            this.Decimals = decimals;
            this.Id = id;
            this.Properties = properties;
            this.Symbol = symbol;
            this.TokenAddress = tokenAddress;
            this.TokenId = tokenId;
        }

        /// <summary>
        /// Number of decimals supported by this asset
        /// </summary>
        /// <value>Number of decimals supported by this asset</value>
        [DataMember(Name = "decimals", EmitDefaultValue = false)]
        public int Decimals { get; set; }

        /// <summary>
        /// [DEPRECATED] Internal Immutable X Token ID
        /// </summary>
        /// <value>[DEPRECATED] Internal Immutable X Token ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public AssetProperties Properties { get; set; }

        /// <summary>
        /// Quantity of this asset - inclusive of fees for buy order in v1 API and exclusive of fees in v3 API
        /// </summary>
        /// <value>Quantity of this asset - inclusive of fees for buy order in v1 API and exclusive of fees in v3 API</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public string Quantity { get; set; }

        /// <summary>
        /// Quantity of this asset with the sum of all fees applied to the asset
        /// </summary>
        /// <value>Quantity of this asset with the sum of all fees applied to the asset</value>
        [DataMember(Name = "quantity_with_fees", IsRequired = true, EmitDefaultValue = true)]
        public string QuantityWithFees { get; set; }

        /// <summary>
        /// Symbol of a token
        /// </summary>
        /// <value>Symbol of a token</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Address of ERC721/ERC20 contract
        /// </summary>
        /// <value>Address of ERC721/ERC20 contract</value>
        [DataMember(Name = "token_address", EmitDefaultValue = false)]
        public string TokenAddress { get; set; }

        /// <summary>
        /// ERC721 Token ID
        /// </summary>
        /// <value>ERC721 Token ID</value>
        [DataMember(Name = "token_id", EmitDefaultValue = false)]
        public string TokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenData {\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityWithFees: ").Append(QuantityWithFees).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenData);
        }

        /// <summary>
        /// Returns true if TokenData instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Decimals == input.Decimals ||
                    this.Decimals.Equals(input.Decimals)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuantityWithFees == input.QuantityWithFees ||
                    (this.QuantityWithFees != null &&
                    this.QuantityWithFees.Equals(input.QuantityWithFees))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.TokenAddress == input.TokenAddress ||
                    (this.TokenAddress != null &&
                    this.TokenAddress.Equals(input.TokenAddress))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Decimals.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.QuantityWithFees != null)
                {
                    hashCode = (hashCode * 59) + this.QuantityWithFees.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.TokenAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenAddress.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
