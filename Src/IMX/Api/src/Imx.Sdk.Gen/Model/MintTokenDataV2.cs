/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// MintTokenDataV2
    /// </summary>
    [DataContract(Name = "MintTokenDataV2")]
    public partial class MintTokenDataV2 : IEquatable<MintTokenDataV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MintTokenDataV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MintTokenDataV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MintTokenDataV2" /> class.
        /// </summary>
        /// <param name="blueprint">Token metadata blueprint (required).</param>
        /// <param name="id">Token ID Note: While the Token ID is required to be a string, it still needs to be a valid uint256 as per the ERC-721 token standard. (required).</param>
        /// <param name="royalties">List of mint fees.</param>
        public MintTokenDataV2(string blueprint = default(string), string id = default(string), List<MintFee> royalties = default(List<MintFee>))
        {
            // to ensure "blueprint" is required (not null)
            if (blueprint == null)
            {
                throw new ArgumentNullException("blueprint is a required property for MintTokenDataV2 and cannot be null");
            }
            this.Blueprint = blueprint;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MintTokenDataV2 and cannot be null");
            }
            this.Id = id;
            this.Royalties = royalties;
        }

        /// <summary>
        /// Token metadata blueprint
        /// </summary>
        /// <value>Token metadata blueprint</value>
        [DataMember(Name = "blueprint", IsRequired = true, EmitDefaultValue = true)]
        public string Blueprint { get; set; }

        /// <summary>
        /// Token ID Note: While the Token ID is required to be a string, it still needs to be a valid uint256 as per the ERC-721 token standard.
        /// </summary>
        /// <value>Token ID Note: While the Token ID is required to be a string, it still needs to be a valid uint256 as per the ERC-721 token standard.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// List of mint fees
        /// </summary>
        /// <value>List of mint fees</value>
        [DataMember(Name = "royalties", EmitDefaultValue = false)]
        public List<MintFee> Royalties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MintTokenDataV2 {\n");
            sb.Append("  Blueprint: ").Append(Blueprint).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Royalties: ").Append(Royalties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MintTokenDataV2);
        }

        /// <summary>
        /// Returns true if MintTokenDataV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of MintTokenDataV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MintTokenDataV2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Blueprint == input.Blueprint ||
                    (this.Blueprint != null &&
                    this.Blueprint.Equals(input.Blueprint))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Royalties == input.Royalties ||
                    this.Royalties != null &&
                    input.Royalties != null &&
                    this.Royalties.SequenceEqual(input.Royalties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blueprint != null)
                {
                    hashCode = (hashCode * 59) + this.Blueprint.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Royalties != null)
                {
                    hashCode = (hashCode * 59) + this.Royalties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
