/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// Collection
    /// </summary>
    [DataContract(Name = "Collection")]
    public partial class Collection : IEquatable<Collection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Collection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Collection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Collection" /> class.
        /// </summary>
        /// <param name="address">Ethereum address of the ERC721 contract (required).</param>
        /// <param name="collectionImageUrl">URL of the tile image for this collection (required).</param>
        /// <param name="createdAt">Timestamp of when the collection was created (required).</param>
        /// <param name="description">Description of the collection (required).</param>
        /// <param name="iconUrl">URL of the icon for this collection (required).</param>
        /// <param name="metadataApiUrl">URL of the metadata for this collection (required).</param>
        /// <param name="name">Name of the collection (required).</param>
        /// <param name="projectId">The collection&#39;s project ID (required).</param>
        /// <param name="projectOwnerAddress">Project owner address (required).</param>
        /// <param name="updatedAt">Timestamp of when the collection was updated (required).</param>
        public Collection(string address = default(string), string collectionImageUrl = default(string), string createdAt = default(string), string description = default(string), string iconUrl = default(string), string metadataApiUrl = default(string), string name = default(string), int projectId = default(int), string projectOwnerAddress = default(string), string updatedAt = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for Collection and cannot be null");
            }
            this.Address = address;
            // to ensure "collectionImageUrl" is required (not null)
            if (collectionImageUrl == null)
            {
                throw new ArgumentNullException("collectionImageUrl is a required property for Collection and cannot be null");
            }
            this.CollectionImageUrl = collectionImageUrl;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for Collection and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Collection and cannot be null");
            }
            this.Description = description;
            // to ensure "iconUrl" is required (not null)
            if (iconUrl == null)
            {
                throw new ArgumentNullException("iconUrl is a required property for Collection and cannot be null");
            }
            this.IconUrl = iconUrl;
            // to ensure "metadataApiUrl" is required (not null)
            if (metadataApiUrl == null)
            {
                throw new ArgumentNullException("metadataApiUrl is a required property for Collection and cannot be null");
            }
            this.MetadataApiUrl = metadataApiUrl;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Collection and cannot be null");
            }
            this.Name = name;
            this.ProjectId = projectId;
            // to ensure "projectOwnerAddress" is required (not null)
            if (projectOwnerAddress == null)
            {
                throw new ArgumentNullException("projectOwnerAddress is a required property for Collection and cannot be null");
            }
            this.ProjectOwnerAddress = projectOwnerAddress;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for Collection and cannot be null");
            }
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Ethereum address of the ERC721 contract
        /// </summary>
        /// <value>Ethereum address of the ERC721 contract</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// URL of the tile image for this collection
        /// </summary>
        /// <value>URL of the tile image for this collection</value>
        [DataMember(Name = "collection_image_url", IsRequired = true, EmitDefaultValue = true)]
        public string CollectionImageUrl { get; set; }

        /// <summary>
        /// Timestamp of when the collection was created
        /// </summary>
        /// <value>Timestamp of when the collection was created</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Description of the collection
        /// </summary>
        /// <value>Description of the collection</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// URL of the icon for this collection
        /// </summary>
        /// <value>URL of the icon for this collection</value>
        [DataMember(Name = "icon_url", IsRequired = true, EmitDefaultValue = true)]
        public string IconUrl { get; set; }

        /// <summary>
        /// URL of the metadata for this collection
        /// </summary>
        /// <value>URL of the metadata for this collection</value>
        [DataMember(Name = "metadata_api_url", IsRequired = true, EmitDefaultValue = true)]
        public string MetadataApiUrl { get; set; }

        /// <summary>
        /// Name of the collection
        /// </summary>
        /// <value>Name of the collection</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The collection&#39;s project ID
        /// </summary>
        /// <value>The collection&#39;s project ID</value>
        [DataMember(Name = "project_id", IsRequired = true, EmitDefaultValue = true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Project owner address
        /// </summary>
        /// <value>Project owner address</value>
        [DataMember(Name = "project_owner_address", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectOwnerAddress { get; set; }

        /// <summary>
        /// Timestamp of when the collection was updated
        /// </summary>
        /// <value>Timestamp of when the collection was updated</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Collection {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CollectionImageUrl: ").Append(CollectionImageUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  MetadataApiUrl: ").Append(MetadataApiUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectOwnerAddress: ").Append(ProjectOwnerAddress).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Collection);
        }

        /// <summary>
        /// Returns true if Collection instances are equal
        /// </summary>
        /// <param name="input">Instance of Collection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Collection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CollectionImageUrl == input.CollectionImageUrl ||
                    (this.CollectionImageUrl != null &&
                    this.CollectionImageUrl.Equals(input.CollectionImageUrl))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.MetadataApiUrl == input.MetadataApiUrl ||
                    (this.MetadataApiUrl != null &&
                    this.MetadataApiUrl.Equals(input.MetadataApiUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                ) && 
                (
                    this.ProjectOwnerAddress == input.ProjectOwnerAddress ||
                    (this.ProjectOwnerAddress != null &&
                    this.ProjectOwnerAddress.Equals(input.ProjectOwnerAddress))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.CollectionImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionImageUrl.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.IconUrl != null)
                {
                    hashCode = (hashCode * 59) + this.IconUrl.GetHashCode();
                }
                if (this.MetadataApiUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MetadataApiUrl.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                if (this.ProjectOwnerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectOwnerAddress.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
