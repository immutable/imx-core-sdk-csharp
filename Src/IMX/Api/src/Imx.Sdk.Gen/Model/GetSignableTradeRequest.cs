/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// GetSignableTradeRequest
    /// </summary>
    [DataContract(Name = "GetSignableTradeRequest")]
    public partial class GetSignableTradeRequest : IEquatable<GetSignableTradeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableTradeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSignableTradeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableTradeRequest" /> class.
        /// </summary>
        /// <param name="expirationTimestamp">ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour.</param>
        /// <param name="fees">Inclusion of either maker or taker fees.</param>
        /// <param name="orderId">The ID of the maker order involved (required).</param>
        /// <param name="user">Ethereum address of the submitting user (required).</param>
        public GetSignableTradeRequest(int expirationTimestamp = default(int), List<FeeEntry> fees = default(List<FeeEntry>), int orderId = default(int), string user = default(string))
        {
            this.OrderId = orderId;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for GetSignableTradeRequest and cannot be null");
            }
            this.User = user;
            this.ExpirationTimestamp = expirationTimestamp;
            this.Fees = fees;
        }

        /// <summary>
        /// ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour
        /// </summary>
        /// <value>ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour</value>
        [DataMember(Name = "expiration_timestamp", EmitDefaultValue = false)]
        public int ExpirationTimestamp { get; set; }

        /// <summary>
        /// Inclusion of either maker or taker fees
        /// </summary>
        /// <value>Inclusion of either maker or taker fees</value>
        [DataMember(Name = "fees", EmitDefaultValue = false)]
        public List<FeeEntry> Fees { get; set; }

        /// <summary>
        /// The ID of the maker order involved
        /// </summary>
        /// <value>The ID of the maker order involved</value>
        [DataMember(Name = "order_id", IsRequired = true, EmitDefaultValue = true)]
        public int OrderId { get; set; }

        /// <summary>
        /// Ethereum address of the submitting user
        /// </summary>
        /// <value>Ethereum address of the submitting user</value>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSignableTradeRequest {\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSignableTradeRequest);
        }

        /// <summary>
        /// Returns true if GetSignableTradeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSignableTradeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSignableTradeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExpirationTimestamp == input.ExpirationTimestamp ||
                    this.ExpirationTimestamp.Equals(input.ExpirationTimestamp)
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    this.OrderId.Equals(input.OrderId)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ExpirationTimestamp.GetHashCode();
                if (this.Fees != null)
                {
                    hashCode = (hashCode * 59) + this.Fees.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
