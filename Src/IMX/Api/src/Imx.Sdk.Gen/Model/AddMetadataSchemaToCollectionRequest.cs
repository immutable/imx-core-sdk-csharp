/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// AddMetadataSchemaToCollectionRequest
    /// </summary>
    [DataContract(Name = "AddMetadataSchemaToCollectionRequest")]
    public partial class AddMetadataSchemaToCollectionRequest : IEquatable<AddMetadataSchemaToCollectionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMetadataSchemaToCollectionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddMetadataSchemaToCollectionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMetadataSchemaToCollectionRequest" /> class.
        /// </summary>
        /// <param name="contractAddress">Not required from API user.</param>
        /// <param name="metadata">The metadata container (required).</param>
        public AddMetadataSchemaToCollectionRequest(string contractAddress = default(string), List<MetadataSchemaRequest> metadata = default(List<MetadataSchemaRequest>))
        {
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for AddMetadataSchemaToCollectionRequest and cannot be null");
            }
            this.Metadata = metadata;
            this.ContractAddress = contractAddress;
        }

        /// <summary>
        /// Not required from API user
        /// </summary>
        /// <value>Not required from API user</value>
        [DataMember(Name = "contract_address", EmitDefaultValue = false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// The metadata container
        /// </summary>
        /// <value>The metadata container</value>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public List<MetadataSchemaRequest> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddMetadataSchemaToCollectionRequest {\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddMetadataSchemaToCollectionRequest);
        }

        /// <summary>
        /// Returns true if AddMetadataSchemaToCollectionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddMetadataSchemaToCollectionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddMetadataSchemaToCollectionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
