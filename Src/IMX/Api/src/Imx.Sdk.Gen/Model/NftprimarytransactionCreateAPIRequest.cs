/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// NftprimarytransactionCreateAPIRequest
    /// </summary>
    [DataContract(Name = "nftprimarytransaction.CreateAPIRequest")]
    public partial class NftprimarytransactionCreateAPIRequest : IEquatable<NftprimarytransactionCreateAPIRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NftprimarytransactionCreateAPIRequest" /> class.
        /// </summary>
        /// <param name="contractAddress">Contract address of the asset to be created.</param>
        /// <param name="offerId">Temporary asset id.</param>
        /// <param name="provider">Provider name.</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction.</param>
        /// <param name="widget">widget.</param>
        public NftprimarytransactionCreateAPIRequest(string contractAddress = default(string), string offerId = default(string), string provider = default(string), string userWalletAddress = default(string), NftprimarytransactionWidgetParams widget = default(NftprimarytransactionWidgetParams))
        {
            this.ContractAddress = contractAddress;
            this.OfferId = offerId;
            this.Provider = provider;
            this.UserWalletAddress = userWalletAddress;
            this.Widget = widget;
        }

        /// <summary>
        /// Contract address of the asset to be created
        /// </summary>
        /// <value>Contract address of the asset to be created</value>
        [DataMember(Name = "contract_address", EmitDefaultValue = false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Temporary asset id
        /// </summary>
        /// <value>Temporary asset id</value>
        [DataMember(Name = "offer_id", EmitDefaultValue = false)]
        public string OfferId { get; set; }

        /// <summary>
        /// Provider name
        /// </summary>
        /// <value>Provider name</value>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        public string Provider { get; set; }

        /// <summary>
        /// Ethereum address of the user who wants to create transaction
        /// </summary>
        /// <value>Ethereum address of the user who wants to create transaction</value>
        [DataMember(Name = "user_wallet_address", EmitDefaultValue = false)]
        public string UserWalletAddress { get; set; }

        /// <summary>
        /// Gets or Sets Widget
        /// </summary>
        [DataMember(Name = "widget", EmitDefaultValue = false)]
        public NftprimarytransactionWidgetParams Widget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NftprimarytransactionCreateAPIRequest {\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  UserWalletAddress: ").Append(UserWalletAddress).Append("\n");
            sb.Append("  Widget: ").Append(Widget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NftprimarytransactionCreateAPIRequest);
        }

        /// <summary>
        /// Returns true if NftprimarytransactionCreateAPIRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of NftprimarytransactionCreateAPIRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NftprimarytransactionCreateAPIRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.OfferId == input.OfferId ||
                    (this.OfferId != null &&
                    this.OfferId.Equals(input.OfferId))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.UserWalletAddress == input.UserWalletAddress ||
                    (this.UserWalletAddress != null &&
                    this.UserWalletAddress.Equals(input.UserWalletAddress))
                ) && 
                (
                    this.Widget == input.Widget ||
                    (this.Widget != null &&
                    this.Widget.Equals(input.Widget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.OfferId != null)
                {
                    hashCode = (hashCode * 59) + this.OfferId.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.UserWalletAddress != null)
                {
                    hashCode = (hashCode * 59) + this.UserWalletAddress.GetHashCode();
                }
                if (this.Widget != null)
                {
                    hashCode = (hashCode * 59) + this.Widget.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
