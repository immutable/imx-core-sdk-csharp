/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// GetSignableRegistrationOffchainResponse
    /// </summary>
    [DataContract(Name = "GetSignableRegistrationOffchainResponse")]
    public partial class GetSignableRegistrationOffchainResponse : IEquatable<GetSignableRegistrationOffchainResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableRegistrationOffchainResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSignableRegistrationOffchainResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableRegistrationOffchainResponse" /> class.
        /// </summary>
        /// <param name="payloadHash">Hash of the payload to be signed for user registration offchain (required).</param>
        /// <param name="signableMessage">Message to sign with L1 wallet to register user offchain (required).</param>
        public GetSignableRegistrationOffchainResponse(string payloadHash = default(string), string signableMessage = default(string))
        {
            // to ensure "payloadHash" is required (not null)
            if (payloadHash == null)
            {
                throw new ArgumentNullException("payloadHash is a required property for GetSignableRegistrationOffchainResponse and cannot be null");
            }
            this.PayloadHash = payloadHash;
            // to ensure "signableMessage" is required (not null)
            if (signableMessage == null)
            {
                throw new ArgumentNullException("signableMessage is a required property for GetSignableRegistrationOffchainResponse and cannot be null");
            }
            this.SignableMessage = signableMessage;
        }

        /// <summary>
        /// Hash of the payload to be signed for user registration offchain
        /// </summary>
        /// <value>Hash of the payload to be signed for user registration offchain</value>
        [DataMember(Name = "payload_hash", IsRequired = true, EmitDefaultValue = true)]
        public string PayloadHash { get; set; }

        /// <summary>
        /// Message to sign with L1 wallet to register user offchain
        /// </summary>
        /// <value>Message to sign with L1 wallet to register user offchain</value>
        [DataMember(Name = "signable_message", IsRequired = true, EmitDefaultValue = true)]
        public string SignableMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSignableRegistrationOffchainResponse {\n");
            sb.Append("  PayloadHash: ").Append(PayloadHash).Append("\n");
            sb.Append("  SignableMessage: ").Append(SignableMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSignableRegistrationOffchainResponse);
        }

        /// <summary>
        /// Returns true if GetSignableRegistrationOffchainResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSignableRegistrationOffchainResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSignableRegistrationOffchainResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PayloadHash == input.PayloadHash ||
                    (this.PayloadHash != null &&
                    this.PayloadHash.Equals(input.PayloadHash))
                ) && 
                (
                    this.SignableMessage == input.SignableMessage ||
                    (this.SignableMessage != null &&
                    this.SignableMessage.Equals(input.SignableMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayloadHash != null)
                {
                    hashCode = (hashCode * 59) + this.PayloadHash.GetHashCode();
                }
                if (this.SignableMessage != null)
                {
                    hashCode = (hashCode * 59) + this.SignableMessage.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
