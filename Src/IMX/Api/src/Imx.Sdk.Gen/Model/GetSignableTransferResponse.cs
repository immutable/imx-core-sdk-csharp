/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// GetSignableTransferResponse
    /// </summary>
    [DataContract(Name = "GetSignableTransferResponse")]
    public partial class GetSignableTransferResponse : IEquatable<GetSignableTransferResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableTransferResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSignableTransferResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSignableTransferResponse" /> class.
        /// </summary>
        /// <param name="senderStarkKey">Sender of the transfer (required).</param>
        /// <param name="signableMessage">Message to sign with L1 wallet to confirm transfer request (required).</param>
        /// <param name="signableResponses">List of transfer responses without the sender stark key (required).</param>
        public GetSignableTransferResponse(string senderStarkKey = default(string), string signableMessage = default(string), List<SignableTransferResponseDetails> signableResponses = default(List<SignableTransferResponseDetails>))
        {
            // to ensure "senderStarkKey" is required (not null)
            if (senderStarkKey == null)
            {
                throw new ArgumentNullException("senderStarkKey is a required property for GetSignableTransferResponse and cannot be null");
            }
            this.SenderStarkKey = senderStarkKey;
            // to ensure "signableMessage" is required (not null)
            if (signableMessage == null)
            {
                throw new ArgumentNullException("signableMessage is a required property for GetSignableTransferResponse and cannot be null");
            }
            this.SignableMessage = signableMessage;
            // to ensure "signableResponses" is required (not null)
            if (signableResponses == null)
            {
                throw new ArgumentNullException("signableResponses is a required property for GetSignableTransferResponse and cannot be null");
            }
            this.SignableResponses = signableResponses;
        }

        /// <summary>
        /// Sender of the transfer
        /// </summary>
        /// <value>Sender of the transfer</value>
        [DataMember(Name = "sender_stark_key", IsRequired = true, EmitDefaultValue = true)]
        public string SenderStarkKey { get; set; }

        /// <summary>
        /// Message to sign with L1 wallet to confirm transfer request
        /// </summary>
        /// <value>Message to sign with L1 wallet to confirm transfer request</value>
        [DataMember(Name = "signable_message", IsRequired = true, EmitDefaultValue = true)]
        public string SignableMessage { get; set; }

        /// <summary>
        /// List of transfer responses without the sender stark key
        /// </summary>
        /// <value>List of transfer responses without the sender stark key</value>
        [DataMember(Name = "signable_responses", IsRequired = true, EmitDefaultValue = true)]
        public List<SignableTransferResponseDetails> SignableResponses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSignableTransferResponse {\n");
            sb.Append("  SenderStarkKey: ").Append(SenderStarkKey).Append("\n");
            sb.Append("  SignableMessage: ").Append(SignableMessage).Append("\n");
            sb.Append("  SignableResponses: ").Append(SignableResponses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSignableTransferResponse);
        }

        /// <summary>
        /// Returns true if GetSignableTransferResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSignableTransferResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSignableTransferResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SenderStarkKey == input.SenderStarkKey ||
                    (this.SenderStarkKey != null &&
                    this.SenderStarkKey.Equals(input.SenderStarkKey))
                ) && 
                (
                    this.SignableMessage == input.SignableMessage ||
                    (this.SignableMessage != null &&
                    this.SignableMessage.Equals(input.SignableMessage))
                ) && 
                (
                    this.SignableResponses == input.SignableResponses ||
                    this.SignableResponses != null &&
                    input.SignableResponses != null &&
                    this.SignableResponses.SequenceEqual(input.SignableResponses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SenderStarkKey != null)
                {
                    hashCode = (hashCode * 59) + this.SenderStarkKey.GetHashCode();
                }
                if (this.SignableMessage != null)
                {
                    hashCode = (hashCode * 59) + this.SignableMessage.GetHashCode();
                }
                if (this.SignableResponses != null)
                {
                    hashCode = (hashCode * 59) + this.SignableResponses.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
