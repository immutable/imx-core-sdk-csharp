/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// Project
    /// </summary>
    [DataContract(Name = "Project")]
    public partial class Project : IEquatable<Project>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Project() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="collectionLimitExpiresAt">The current period expiry date for collection limit (required).</param>
        /// <param name="collectionMonthlyLimit">The total monthly collection limit (required).</param>
        /// <param name="collectionRemaining">The number of collection remaining in the current period (required).</param>
        /// <param name="companyName">The company name (required).</param>
        /// <param name="contactEmail">The project contact email (must be registered as a developer account with Immutable at https://hub.immutable.com) (required).</param>
        /// <param name="id">The project ID (required).</param>
        /// <param name="mintLimitExpiresAt">The current period expiry date for mint operation limit (required).</param>
        /// <param name="mintMonthlyLimit">The total monthly mint operation limit (required).</param>
        /// <param name="mintRemaining">The number of mint operation remaining in the current period (required).</param>
        /// <param name="name">The project name (required).</param>
        public Project(string collectionLimitExpiresAt = default(string), int collectionMonthlyLimit = default(int), int collectionRemaining = default(int), string companyName = default(string), string contactEmail = default(string), int id = default(int), string mintLimitExpiresAt = default(string), int mintMonthlyLimit = default(int), int mintRemaining = default(int), string name = default(string))
        {
            // to ensure "collectionLimitExpiresAt" is required (not null)
            if (collectionLimitExpiresAt == null)
            {
                throw new ArgumentNullException("collectionLimitExpiresAt is a required property for Project and cannot be null");
            }
            this.CollectionLimitExpiresAt = collectionLimitExpiresAt;
            this.CollectionMonthlyLimit = collectionMonthlyLimit;
            this.CollectionRemaining = collectionRemaining;
            // to ensure "companyName" is required (not null)
            if (companyName == null)
            {
                throw new ArgumentNullException("companyName is a required property for Project and cannot be null");
            }
            this.CompanyName = companyName;
            // to ensure "contactEmail" is required (not null)
            if (contactEmail == null)
            {
                throw new ArgumentNullException("contactEmail is a required property for Project and cannot be null");
            }
            this.ContactEmail = contactEmail;
            this.Id = id;
            // to ensure "mintLimitExpiresAt" is required (not null)
            if (mintLimitExpiresAt == null)
            {
                throw new ArgumentNullException("mintLimitExpiresAt is a required property for Project and cannot be null");
            }
            this.MintLimitExpiresAt = mintLimitExpiresAt;
            this.MintMonthlyLimit = mintMonthlyLimit;
            this.MintRemaining = mintRemaining;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Project and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// The current period expiry date for collection limit
        /// </summary>
        /// <value>The current period expiry date for collection limit</value>
        [DataMember(Name = "collection_limit_expires_at", IsRequired = true, EmitDefaultValue = true)]
        public string CollectionLimitExpiresAt { get; set; }

        /// <summary>
        /// The total monthly collection limit
        /// </summary>
        /// <value>The total monthly collection limit</value>
        [DataMember(Name = "collection_monthly_limit", IsRequired = true, EmitDefaultValue = true)]
        public int CollectionMonthlyLimit { get; set; }

        /// <summary>
        /// The number of collection remaining in the current period
        /// </summary>
        /// <value>The number of collection remaining in the current period</value>
        [DataMember(Name = "collection_remaining", IsRequired = true, EmitDefaultValue = true)]
        public int CollectionRemaining { get; set; }

        /// <summary>
        /// The company name
        /// </summary>
        /// <value>The company name</value>
        [DataMember(Name = "company_name", IsRequired = true, EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The project contact email (must be registered as a developer account with Immutable at https://hub.immutable.com)
        /// </summary>
        /// <value>The project contact email (must be registered as a developer account with Immutable at https://hub.immutable.com)</value>
        [DataMember(Name = "contact_email", IsRequired = true, EmitDefaultValue = true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// The project ID
        /// </summary>
        /// <value>The project ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// The current period expiry date for mint operation limit
        /// </summary>
        /// <value>The current period expiry date for mint operation limit</value>
        [DataMember(Name = "mint_limit_expires_at", IsRequired = true, EmitDefaultValue = true)]
        public string MintLimitExpiresAt { get; set; }

        /// <summary>
        /// The total monthly mint operation limit
        /// </summary>
        /// <value>The total monthly mint operation limit</value>
        [DataMember(Name = "mint_monthly_limit", IsRequired = true, EmitDefaultValue = true)]
        public int MintMonthlyLimit { get; set; }

        /// <summary>
        /// The number of mint operation remaining in the current period
        /// </summary>
        /// <value>The number of mint operation remaining in the current period</value>
        [DataMember(Name = "mint_remaining", IsRequired = true, EmitDefaultValue = true)]
        public int MintRemaining { get; set; }

        /// <summary>
        /// The project name
        /// </summary>
        /// <value>The project name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  CollectionLimitExpiresAt: ").Append(CollectionLimitExpiresAt).Append("\n");
            sb.Append("  CollectionMonthlyLimit: ").Append(CollectionMonthlyLimit).Append("\n");
            sb.Append("  CollectionRemaining: ").Append(CollectionRemaining).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MintLimitExpiresAt: ").Append(MintLimitExpiresAt).Append("\n");
            sb.Append("  MintMonthlyLimit: ").Append(MintMonthlyLimit).Append("\n");
            sb.Append("  MintRemaining: ").Append(MintRemaining).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Project);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="input">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CollectionLimitExpiresAt == input.CollectionLimitExpiresAt ||
                    (this.CollectionLimitExpiresAt != null &&
                    this.CollectionLimitExpiresAt.Equals(input.CollectionLimitExpiresAt))
                ) && 
                (
                    this.CollectionMonthlyLimit == input.CollectionMonthlyLimit ||
                    this.CollectionMonthlyLimit.Equals(input.CollectionMonthlyLimit)
                ) && 
                (
                    this.CollectionRemaining == input.CollectionRemaining ||
                    this.CollectionRemaining.Equals(input.CollectionRemaining)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.MintLimitExpiresAt == input.MintLimitExpiresAt ||
                    (this.MintLimitExpiresAt != null &&
                    this.MintLimitExpiresAt.Equals(input.MintLimitExpiresAt))
                ) && 
                (
                    this.MintMonthlyLimit == input.MintMonthlyLimit ||
                    this.MintMonthlyLimit.Equals(input.MintMonthlyLimit)
                ) && 
                (
                    this.MintRemaining == input.MintRemaining ||
                    this.MintRemaining.Equals(input.MintRemaining)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CollectionLimitExpiresAt != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionLimitExpiresAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CollectionMonthlyLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.CollectionRemaining.GetHashCode();
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.ContactEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.MintLimitExpiresAt != null)
                {
                    hashCode = (hashCode * 59) + this.MintLimitExpiresAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MintMonthlyLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.MintRemaining.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
