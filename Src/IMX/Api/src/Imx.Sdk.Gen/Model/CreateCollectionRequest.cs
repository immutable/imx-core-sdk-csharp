/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// CreateCollectionRequest
    /// </summary>
    [DataContract(Name = "CreateCollectionRequest")]
    public partial class CreateCollectionRequest : IEquatable<CreateCollectionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCollectionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCollectionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCollectionRequest" /> class.
        /// </summary>
        /// <param name="collectionImageUrl">URL of the tile image for this collection.</param>
        /// <param name="contractAddress">Ethereum address of the ERC721 contract (required).</param>
        /// <param name="description">Description of the collection.</param>
        /// <param name="iconUrl">URL of the icon for this collection.</param>
        /// <param name="metadataApiUrl">URL of the metadata for this collection.</param>
        /// <param name="name">Name of the collection (required).</param>
        /// <param name="ownerPublicKey">Owner Public Key: The uncompressed public key of the owner of the contract (required).</param>
        /// <param name="projectId">The collection&#39;s project ID (required).</param>
        public CreateCollectionRequest(string collectionImageUrl = default(string), string contractAddress = default(string), string description = default(string), string iconUrl = default(string), string metadataApiUrl = default(string), string name = default(string), string ownerPublicKey = default(string), int projectId = default(int))
        {
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for CreateCollectionRequest and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateCollectionRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "ownerPublicKey" is required (not null)
            if (ownerPublicKey == null)
            {
                throw new ArgumentNullException("ownerPublicKey is a required property for CreateCollectionRequest and cannot be null");
            }
            this.OwnerPublicKey = ownerPublicKey;
            this.ProjectId = projectId;
            this.CollectionImageUrl = collectionImageUrl;
            this.Description = description;
            this.IconUrl = iconUrl;
            this.MetadataApiUrl = metadataApiUrl;
        }

        /// <summary>
        /// URL of the tile image for this collection
        /// </summary>
        /// <value>URL of the tile image for this collection</value>
        [DataMember(Name = "collection_image_url", EmitDefaultValue = false)]
        public string CollectionImageUrl { get; set; }

        /// <summary>
        /// Ethereum address of the ERC721 contract
        /// </summary>
        /// <value>Ethereum address of the ERC721 contract</value>
        [DataMember(Name = "contract_address", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Description of the collection
        /// </summary>
        /// <value>Description of the collection</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// URL of the icon for this collection
        /// </summary>
        /// <value>URL of the icon for this collection</value>
        [DataMember(Name = "icon_url", EmitDefaultValue = false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// URL of the metadata for this collection
        /// </summary>
        /// <value>URL of the metadata for this collection</value>
        [DataMember(Name = "metadata_api_url", EmitDefaultValue = false)]
        public string MetadataApiUrl { get; set; }

        /// <summary>
        /// Name of the collection
        /// </summary>
        /// <value>Name of the collection</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Owner Public Key: The uncompressed public key of the owner of the contract
        /// </summary>
        /// <value>Owner Public Key: The uncompressed public key of the owner of the contract</value>
        [DataMember(Name = "owner_public_key", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerPublicKey { get; set; }

        /// <summary>
        /// The collection&#39;s project ID
        /// </summary>
        /// <value>The collection&#39;s project ID</value>
        [DataMember(Name = "project_id", IsRequired = true, EmitDefaultValue = true)]
        public int ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCollectionRequest {\n");
            sb.Append("  CollectionImageUrl: ").Append(CollectionImageUrl).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  MetadataApiUrl: ").Append(MetadataApiUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerPublicKey: ").Append(OwnerPublicKey).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCollectionRequest);
        }

        /// <summary>
        /// Returns true if CreateCollectionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCollectionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCollectionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CollectionImageUrl == input.CollectionImageUrl ||
                    (this.CollectionImageUrl != null &&
                    this.CollectionImageUrl.Equals(input.CollectionImageUrl))
                ) && 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.MetadataApiUrl == input.MetadataApiUrl ||
                    (this.MetadataApiUrl != null &&
                    this.MetadataApiUrl.Equals(input.MetadataApiUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OwnerPublicKey == input.OwnerPublicKey ||
                    (this.OwnerPublicKey != null &&
                    this.OwnerPublicKey.Equals(input.OwnerPublicKey))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    this.ProjectId.Equals(input.ProjectId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CollectionImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionImageUrl.GetHashCode();
                }
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.IconUrl != null)
                {
                    hashCode = (hashCode * 59) + this.IconUrl.GetHashCode();
                }
                if (this.MetadataApiUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MetadataApiUrl.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OwnerPublicKey != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerPublicKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
