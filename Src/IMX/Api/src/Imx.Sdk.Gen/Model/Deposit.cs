/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// Deposit
    /// </summary>
    [DataContract(Name = "Deposit")]
    public partial class Deposit : IEquatable<Deposit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Deposit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Deposit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Deposit" /> class.
        /// </summary>
        /// <param name="status">Status of this deposit in Immutable X (required).</param>
        /// <param name="timestamp">Timestamp of the deposit (required).</param>
        /// <param name="token">token (required).</param>
        /// <param name="transactionId">Sequential ID of this transaction within Immutable X (required).</param>
        /// <param name="user">Ethereum address of the user making this deposit (required).</param>
        public Deposit(string status = default(string), string timestamp = default(string), Token token = default(Token), int transactionId = default(int), string user = default(string))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for Deposit and cannot be null");
            }
            this.Status = status;
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new ArgumentNullException("timestamp is a required property for Deposit and cannot be null");
            }
            this.Timestamp = timestamp;
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new ArgumentNullException("token is a required property for Deposit and cannot be null");
            }
            this.Token = token;
            this.TransactionId = transactionId;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for Deposit and cannot be null");
            }
            this.User = user;
        }

        /// <summary>
        /// Status of this deposit in Immutable X
        /// </summary>
        /// <value>Status of this deposit in Immutable X</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Timestamp of the deposit
        /// </summary>
        /// <value>Timestamp of the deposit</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = true)]
        public Token Token { get; set; }

        /// <summary>
        /// Sequential ID of this transaction within Immutable X
        /// </summary>
        /// <value>Sequential ID of this transaction within Immutable X</value>
        [DataMember(Name = "transaction_id", IsRequired = true, EmitDefaultValue = true)]
        public int TransactionId { get; set; }

        /// <summary>
        /// Ethereum address of the user making this deposit
        /// </summary>
        /// <value>Ethereum address of the user making this deposit</value>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Deposit {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Deposit);
        }

        /// <summary>
        /// Returns true if Deposit instances are equal
        /// </summary>
        /// <param name="input">Instance of Deposit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Deposit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    this.TransactionId.Equals(input.TransactionId)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
