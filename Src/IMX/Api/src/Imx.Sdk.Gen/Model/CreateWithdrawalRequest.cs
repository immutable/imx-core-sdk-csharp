/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Imx.Sdk.Gen.Client.OpenAPIDateConverter;

namespace Imx.Sdk.Gen.Model
{
    /// <summary>
    /// CreateWithdrawalRequest
    /// </summary>
    [DataContract(Name = "CreateWithdrawalRequest")]
    public partial class CreateWithdrawalRequest : IEquatable<CreateWithdrawalRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWithdrawalRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateWithdrawalRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWithdrawalRequest" /> class.
        /// </summary>
        /// <param name="amount">Amount to withdraw (required).</param>
        /// <param name="assetId">The ID of asset the user is withdrawing (required).</param>
        /// <param name="nonce">Nonce of the withdrawal (required).</param>
        /// <param name="starkKey">Public stark key of the withdrawing user (required).</param>
        /// <param name="starkSignature">Payload signature (required).</param>
        /// <param name="vaultId">The ID of the vault the asset belong to (required).</param>
        public CreateWithdrawalRequest(string amount = default(string), string assetId = default(string), int nonce = default(int), string starkKey = default(string), string starkSignature = default(string), int vaultId = default(int))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for CreateWithdrawalRequest and cannot be null");
            }
            this.Amount = amount;
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new ArgumentNullException("assetId is a required property for CreateWithdrawalRequest and cannot be null");
            }
            this.AssetId = assetId;
            this.Nonce = nonce;
            // to ensure "starkKey" is required (not null)
            if (starkKey == null)
            {
                throw new ArgumentNullException("starkKey is a required property for CreateWithdrawalRequest and cannot be null");
            }
            this.StarkKey = starkKey;
            // to ensure "starkSignature" is required (not null)
            if (starkSignature == null)
            {
                throw new ArgumentNullException("starkSignature is a required property for CreateWithdrawalRequest and cannot be null");
            }
            this.StarkSignature = starkSignature;
            this.VaultId = vaultId;
        }

        /// <summary>
        /// Amount to withdraw
        /// </summary>
        /// <value>Amount to withdraw</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// The ID of asset the user is withdrawing
        /// </summary>
        /// <value>The ID of asset the user is withdrawing</value>
        [DataMember(Name = "asset_id", IsRequired = true, EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// Nonce of the withdrawal
        /// </summary>
        /// <value>Nonce of the withdrawal</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public int Nonce { get; set; }

        /// <summary>
        /// Public stark key of the withdrawing user
        /// </summary>
        /// <value>Public stark key of the withdrawing user</value>
        [DataMember(Name = "stark_key", IsRequired = true, EmitDefaultValue = true)]
        public string StarkKey { get; set; }

        /// <summary>
        /// Payload signature
        /// </summary>
        /// <value>Payload signature</value>
        [DataMember(Name = "stark_signature", IsRequired = true, EmitDefaultValue = true)]
        public string StarkSignature { get; set; }

        /// <summary>
        /// The ID of the vault the asset belong to
        /// </summary>
        /// <value>The ID of the vault the asset belong to</value>
        [DataMember(Name = "vault_id", IsRequired = true, EmitDefaultValue = true)]
        public int VaultId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateWithdrawalRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  StarkKey: ").Append(StarkKey).Append("\n");
            sb.Append("  StarkSignature: ").Append(StarkSignature).Append("\n");
            sb.Append("  VaultId: ").Append(VaultId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateWithdrawalRequest);
        }

        /// <summary>
        /// Returns true if CreateWithdrawalRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateWithdrawalRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateWithdrawalRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    this.Nonce.Equals(input.Nonce)
                ) && 
                (
                    this.StarkKey == input.StarkKey ||
                    (this.StarkKey != null &&
                    this.StarkKey.Equals(input.StarkKey))
                ) && 
                (
                    this.StarkSignature == input.StarkSignature ||
                    (this.StarkSignature != null &&
                    this.StarkSignature.Equals(input.StarkSignature))
                ) && 
                (
                    this.VaultId == input.VaultId ||
                    this.VaultId.Equals(input.VaultId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                if (this.StarkKey != null)
                {
                    hashCode = (hashCode * 59) + this.StarkKey.GetHashCode();
                }
                if (this.StarkSignature != null)
                {
                    hashCode = (hashCode * 59) + this.StarkSignature.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VaultId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
