/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Imx.Sdk.Gen.Client;
using Imx.Sdk.Gen.Model;

namespace Imx.Sdk.Gen.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancel an order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="id">Order ID to cancel</param>
        /// <param name="cancelOrderRequest">cancel an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelOrderResponse</returns>
        CancelOrderResponse CancelOrder(string xImxEthAddress, string xImxEthSignature, string id, CancelOrderRequest cancelOrderRequest, int operationIndex = 0);

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancel an order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="id">Order ID to cancel</param>
        /// <param name="cancelOrderRequest">cancel an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelOrderResponse</returns>
        ApiResponse<CancelOrderResponse> CancelOrderWithHttpInfo(string xImxEthAddress, string xImxEthSignature, string id, CancelOrderRequest cancelOrderRequest, int operationIndex = 0);
        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Create an order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createOrderRequest">create an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateOrderResponse</returns>
        CreateOrderResponse CreateOrder(string xImxEthAddress, string xImxEthSignature, CreateOrderRequest createOrderRequest, int operationIndex = 0);

        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Create an order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createOrderRequest">create an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateOrderResponse</returns>
        ApiResponse<CreateOrderResponse> CreateOrderWithHttpInfo(string xImxEthAddress, string xImxEthSignature, CreateOrderRequest createOrderRequest, int operationIndex = 0);
        /// <summary>
        /// Get details of an order with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of an order with the given ID
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID</param>
        /// <param name="includeFees">Set flag to true to include fee body for the order (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Order</returns>
        Order GetOrder(string id, bool? includeFees = default(bool?), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0);

        /// <summary>
        /// Get details of an order with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of an order with the given ID
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID</param>
        /// <param name="includeFees">Set flag to true to include fee body for the order (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderWithHttpInfo(string id, bool? includeFees = default(bool?), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0);
        /// <summary>
        /// Get details a signable cancel order
        /// </summary>
        /// <remarks>
        /// Get details a signable cancel order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableCancelOrderRequest">get a signable cancel order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableCancelOrderResponse</returns>
        GetSignableCancelOrderResponse GetSignableCancelOrder(GetSignableCancelOrderRequest getSignableCancelOrderRequest, int operationIndex = 0);

        /// <summary>
        /// Get details a signable cancel order
        /// </summary>
        /// <remarks>
        /// Get details a signable cancel order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableCancelOrderRequest">get a signable cancel order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableCancelOrderResponse</returns>
        ApiResponse<GetSignableCancelOrderResponse> GetSignableCancelOrderWithHttpInfo(GetSignableCancelOrderRequest getSignableCancelOrderRequest, int operationIndex = 0);
        /// <summary>
        /// Get a signable order request (V3)
        /// </summary>
        /// <remarks>
        /// Get a signable order request (V3)
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableOrderRequestV3">get a signable order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableOrderResponse</returns>
        GetSignableOrderResponse GetSignableOrder(GetSignableOrderRequest getSignableOrderRequestV3, int operationIndex = 0);

        /// <summary>
        /// Get a signable order request (V3)
        /// </summary>
        /// <remarks>
        /// Get a signable order request (V3)
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableOrderRequestV3">get a signable order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableOrderResponse</returns>
        ApiResponse<GetSignableOrderResponse> GetSignableOrderWithHttpInfo(GetSignableOrderRequest getSignableOrderRequestV3, int operationIndex = 0);
        /// <summary>
        /// Get a list of orders
        /// </summary>
        /// <remarks>
        /// Get a list of orders
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this order (optional)</param>
        /// <param name="status">Status of this order (optional)</param>
        /// <param name="minTimestamp">Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="buyTokenType">Token type of the asset this order buys (optional)</param>
        /// <param name="buyTokenId">ERC721 Token ID of the asset this order buys (optional)</param>
        /// <param name="buyAssetId">Internal IMX ID of the asset this order buys (optional)</param>
        /// <param name="buyTokenAddress">Token address of the asset this order buys (optional)</param>
        /// <param name="buyTokenName">Token name of the asset this order buys (optional)</param>
        /// <param name="buyMinQuantity">Min quantity for the asset this order buys (optional)</param>
        /// <param name="buyMaxQuantity">Max quantity for the asset this order buys (optional)</param>
        /// <param name="buyMetadata">JSON-encoded metadata filters for the asset this order buys (optional)</param>
        /// <param name="sellTokenType">Token type of the asset this order sells (optional)</param>
        /// <param name="sellTokenId">ERC721 Token ID of the asset this order sells (optional)</param>
        /// <param name="sellAssetId">Internal IMX ID of the asset this order sells (optional)</param>
        /// <param name="sellTokenAddress">Token address of the asset this order sells (optional)</param>
        /// <param name="sellTokenName">Token name of the asset this order sells (optional)</param>
        /// <param name="sellMinQuantity">Min quantity for the asset this order sells (optional)</param>
        /// <param name="sellMaxQuantity">Max quantity for the asset this order sells (optional)</param>
        /// <param name="sellMetadata">JSON-encoded metadata filters for the asset this order sells (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="includeFees">Set flag to true to include fee object for orders (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOrdersResponse</returns>
        ListOrdersResponse ListOrders(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string buyTokenType = default(string), string buyTokenId = default(string), string buyAssetId = default(string), string buyTokenAddress = default(string), string buyTokenName = default(string), string buyMinQuantity = default(string), string buyMaxQuantity = default(string), string buyMetadata = default(string), string sellTokenType = default(string), string sellTokenId = default(string), string sellAssetId = default(string), string sellTokenAddress = default(string), string sellTokenName = default(string), string sellMinQuantity = default(string), string sellMaxQuantity = default(string), string sellMetadata = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), bool? includeFees = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get a list of orders
        /// </summary>
        /// <remarks>
        /// Get a list of orders
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this order (optional)</param>
        /// <param name="status">Status of this order (optional)</param>
        /// <param name="minTimestamp">Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="buyTokenType">Token type of the asset this order buys (optional)</param>
        /// <param name="buyTokenId">ERC721 Token ID of the asset this order buys (optional)</param>
        /// <param name="buyAssetId">Internal IMX ID of the asset this order buys (optional)</param>
        /// <param name="buyTokenAddress">Token address of the asset this order buys (optional)</param>
        /// <param name="buyTokenName">Token name of the asset this order buys (optional)</param>
        /// <param name="buyMinQuantity">Min quantity for the asset this order buys (optional)</param>
        /// <param name="buyMaxQuantity">Max quantity for the asset this order buys (optional)</param>
        /// <param name="buyMetadata">JSON-encoded metadata filters for the asset this order buys (optional)</param>
        /// <param name="sellTokenType">Token type of the asset this order sells (optional)</param>
        /// <param name="sellTokenId">ERC721 Token ID of the asset this order sells (optional)</param>
        /// <param name="sellAssetId">Internal IMX ID of the asset this order sells (optional)</param>
        /// <param name="sellTokenAddress">Token address of the asset this order sells (optional)</param>
        /// <param name="sellTokenName">Token name of the asset this order sells (optional)</param>
        /// <param name="sellMinQuantity">Min quantity for the asset this order sells (optional)</param>
        /// <param name="sellMaxQuantity">Max quantity for the asset this order sells (optional)</param>
        /// <param name="sellMetadata">JSON-encoded metadata filters for the asset this order sells (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="includeFees">Set flag to true to include fee object for orders (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOrdersResponse</returns>
        ApiResponse<ListOrdersResponse> ListOrdersWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string buyTokenType = default(string), string buyTokenId = default(string), string buyAssetId = default(string), string buyTokenAddress = default(string), string buyTokenName = default(string), string buyMinQuantity = default(string), string buyMaxQuantity = default(string), string buyMetadata = default(string), string sellTokenType = default(string), string sellTokenId = default(string), string sellAssetId = default(string), string sellTokenAddress = default(string), string sellTokenName = default(string), string sellMinQuantity = default(string), string sellMaxQuantity = default(string), string sellMetadata = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), bool? includeFees = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancel an order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="id">Order ID to cancel</param>
        /// <param name="cancelOrderRequest">cancel an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrderResponse</returns>
        System.Threading.Tasks.Task<CancelOrderResponse> CancelOrderAsync(string xImxEthAddress, string xImxEthSignature, string id, CancelOrderRequest cancelOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// Cancel an order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="id">Order ID to cancel</param>
        /// <param name="cancelOrderRequest">cancel an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelOrderResponse>> CancelOrderWithHttpInfoAsync(string xImxEthAddress, string xImxEthSignature, string id, CancelOrderRequest cancelOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Create an order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createOrderRequest">create an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOrderResponse</returns>
        System.Threading.Tasks.Task<CreateOrderResponse> CreateOrderAsync(string xImxEthAddress, string xImxEthSignature, CreateOrderRequest createOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Create an order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createOrderRequest">create an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateOrderResponse>> CreateOrderWithHttpInfoAsync(string xImxEthAddress, string xImxEthSignature, CreateOrderRequest createOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details of an order with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of an order with the given ID
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID</param>
        /// <param name="includeFees">Set flag to true to include fee body for the order (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetOrderAsync(string id, bool? includeFees = default(bool?), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of an order with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of an order with the given ID
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID</param>
        /// <param name="includeFees">Set flag to true to include fee body for the order (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderWithHttpInfoAsync(string id, bool? includeFees = default(bool?), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details a signable cancel order
        /// </summary>
        /// <remarks>
        /// Get details a signable cancel order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableCancelOrderRequest">get a signable cancel order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableCancelOrderResponse</returns>
        System.Threading.Tasks.Task<GetSignableCancelOrderResponse> GetSignableCancelOrderAsync(GetSignableCancelOrderRequest getSignableCancelOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details a signable cancel order
        /// </summary>
        /// <remarks>
        /// Get details a signable cancel order
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableCancelOrderRequest">get a signable cancel order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableCancelOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSignableCancelOrderResponse>> GetSignableCancelOrderWithHttpInfoAsync(GetSignableCancelOrderRequest getSignableCancelOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a signable order request (V3)
        /// </summary>
        /// <remarks>
        /// Get a signable order request (V3)
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableOrderRequestV3">get a signable order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableOrderResponse</returns>
        System.Threading.Tasks.Task<GetSignableOrderResponse> GetSignableOrderAsync(GetSignableOrderRequest getSignableOrderRequestV3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a signable order request (V3)
        /// </summary>
        /// <remarks>
        /// Get a signable order request (V3)
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableOrderRequestV3">get a signable order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSignableOrderResponse>> GetSignableOrderWithHttpInfoAsync(GetSignableOrderRequest getSignableOrderRequestV3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of orders
        /// </summary>
        /// <remarks>
        /// Get a list of orders
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this order (optional)</param>
        /// <param name="status">Status of this order (optional)</param>
        /// <param name="minTimestamp">Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="buyTokenType">Token type of the asset this order buys (optional)</param>
        /// <param name="buyTokenId">ERC721 Token ID of the asset this order buys (optional)</param>
        /// <param name="buyAssetId">Internal IMX ID of the asset this order buys (optional)</param>
        /// <param name="buyTokenAddress">Token address of the asset this order buys (optional)</param>
        /// <param name="buyTokenName">Token name of the asset this order buys (optional)</param>
        /// <param name="buyMinQuantity">Min quantity for the asset this order buys (optional)</param>
        /// <param name="buyMaxQuantity">Max quantity for the asset this order buys (optional)</param>
        /// <param name="buyMetadata">JSON-encoded metadata filters for the asset this order buys (optional)</param>
        /// <param name="sellTokenType">Token type of the asset this order sells (optional)</param>
        /// <param name="sellTokenId">ERC721 Token ID of the asset this order sells (optional)</param>
        /// <param name="sellAssetId">Internal IMX ID of the asset this order sells (optional)</param>
        /// <param name="sellTokenAddress">Token address of the asset this order sells (optional)</param>
        /// <param name="sellTokenName">Token name of the asset this order sells (optional)</param>
        /// <param name="sellMinQuantity">Min quantity for the asset this order sells (optional)</param>
        /// <param name="sellMaxQuantity">Max quantity for the asset this order sells (optional)</param>
        /// <param name="sellMetadata">JSON-encoded metadata filters for the asset this order sells (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="includeFees">Set flag to true to include fee object for orders (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrdersResponse</returns>
        System.Threading.Tasks.Task<ListOrdersResponse> ListOrdersAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string buyTokenType = default(string), string buyTokenId = default(string), string buyAssetId = default(string), string buyTokenAddress = default(string), string buyTokenName = default(string), string buyMinQuantity = default(string), string buyMaxQuantity = default(string), string buyMetadata = default(string), string sellTokenType = default(string), string sellTokenId = default(string), string sellAssetId = default(string), string sellTokenAddress = default(string), string sellTokenName = default(string), string sellMinQuantity = default(string), string sellMaxQuantity = default(string), string sellMetadata = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), bool? includeFees = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of orders
        /// </summary>
        /// <remarks>
        /// Get a list of orders
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this order (optional)</param>
        /// <param name="status">Status of this order (optional)</param>
        /// <param name="minTimestamp">Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="buyTokenType">Token type of the asset this order buys (optional)</param>
        /// <param name="buyTokenId">ERC721 Token ID of the asset this order buys (optional)</param>
        /// <param name="buyAssetId">Internal IMX ID of the asset this order buys (optional)</param>
        /// <param name="buyTokenAddress">Token address of the asset this order buys (optional)</param>
        /// <param name="buyTokenName">Token name of the asset this order buys (optional)</param>
        /// <param name="buyMinQuantity">Min quantity for the asset this order buys (optional)</param>
        /// <param name="buyMaxQuantity">Max quantity for the asset this order buys (optional)</param>
        /// <param name="buyMetadata">JSON-encoded metadata filters for the asset this order buys (optional)</param>
        /// <param name="sellTokenType">Token type of the asset this order sells (optional)</param>
        /// <param name="sellTokenId">ERC721 Token ID of the asset this order sells (optional)</param>
        /// <param name="sellAssetId">Internal IMX ID of the asset this order sells (optional)</param>
        /// <param name="sellTokenAddress">Token address of the asset this order sells (optional)</param>
        /// <param name="sellTokenName">Token name of the asset this order sells (optional)</param>
        /// <param name="sellMinQuantity">Min quantity for the asset this order sells (optional)</param>
        /// <param name="sellMaxQuantity">Max quantity for the asset this order sells (optional)</param>
        /// <param name="sellMetadata">JSON-encoded metadata filters for the asset this order sells (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="includeFees">Set flag to true to include fee object for orders (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrdersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOrdersResponse>> ListOrdersWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string buyTokenType = default(string), string buyTokenId = default(string), string buyAssetId = default(string), string buyTokenAddress = default(string), string buyTokenName = default(string), string buyMinQuantity = default(string), string buyMaxQuantity = default(string), string buyMetadata = default(string), string sellTokenType = default(string), string sellTokenId = default(string), string sellAssetId = default(string), string sellTokenAddress = default(string), string sellTokenName = default(string), string sellMinQuantity = default(string), string sellMaxQuantity = default(string), string sellMetadata = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), bool? includeFees = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private Imx.Sdk.Gen.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(string basePath)
        {
            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                new Imx.Sdk.Gen.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(Imx.Sdk.Gen.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(Imx.Sdk.Gen.Client.ISynchronousClient client, Imx.Sdk.Gen.Client.IAsynchronousClient asyncClient, Imx.Sdk.Gen.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Imx.Sdk.Gen.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Imx.Sdk.Gen.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel an order Cancel an order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="id">Order ID to cancel</param>
        /// <param name="cancelOrderRequest">cancel an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelOrderResponse</returns>
        public CancelOrderResponse CancelOrder(string xImxEthAddress, string xImxEthSignature, string id, CancelOrderRequest cancelOrderRequest, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<CancelOrderResponse> localVarResponse = CancelOrderWithHttpInfo(xImxEthAddress, xImxEthSignature, id, cancelOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an order Cancel an order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="id">Order ID to cancel</param>
        /// <param name="cancelOrderRequest">cancel an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelOrderResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<CancelOrderResponse> CancelOrderWithHttpInfo(string xImxEthAddress, string xImxEthSignature, string id, CancelOrderRequest cancelOrderRequest, int operationIndex = 0)
        {
            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling OrdersApi->CancelOrder");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling OrdersApi->CancelOrder");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'id' when calling OrdersApi->CancelOrder");
            }

            // verify the required parameter 'cancelOrderRequest' is set
            if (cancelOrderRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'cancelOrderRequest' when calling OrdersApi->CancelOrder");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.Data = cancelOrderRequest;

            localVarRequestOptions.Operation = "OrdersApi.CancelOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<CancelOrderResponse>("/v1/orders/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an order Cancel an order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="id">Order ID to cancel</param>
        /// <param name="cancelOrderRequest">cancel an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrderResponse</returns>
        public async System.Threading.Tasks.Task<CancelOrderResponse> CancelOrderAsync(string xImxEthAddress, string xImxEthSignature, string id, CancelOrderRequest cancelOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<CancelOrderResponse> localVarResponse = await CancelOrderWithHttpInfoAsync(xImxEthAddress, xImxEthSignature, id, cancelOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an order Cancel an order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="id">Order ID to cancel</param>
        /// <param name="cancelOrderRequest">cancel an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<CancelOrderResponse>> CancelOrderWithHttpInfoAsync(string xImxEthAddress, string xImxEthSignature, string id, CancelOrderRequest cancelOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling OrdersApi->CancelOrder");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling OrdersApi->CancelOrder");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'id' when calling OrdersApi->CancelOrder");
            }

            // verify the required parameter 'cancelOrderRequest' is set
            if (cancelOrderRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'cancelOrderRequest' when calling OrdersApi->CancelOrder");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.Data = cancelOrderRequest;

            localVarRequestOptions.Operation = "OrdersApi.CancelOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CancelOrderResponse>("/v1/orders/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an order Create an order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createOrderRequest">create an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateOrderResponse</returns>
        public CreateOrderResponse CreateOrder(string xImxEthAddress, string xImxEthSignature, CreateOrderRequest createOrderRequest, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<CreateOrderResponse> localVarResponse = CreateOrderWithHttpInfo(xImxEthAddress, xImxEthSignature, createOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order Create an order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createOrderRequest">create an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateOrderResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<CreateOrderResponse> CreateOrderWithHttpInfo(string xImxEthAddress, string xImxEthSignature, CreateOrderRequest createOrderRequest, int operationIndex = 0)
        {
            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling OrdersApi->CreateOrder");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling OrdersApi->CreateOrder");
            }

            // verify the required parameter 'createOrderRequest' is set
            if (createOrderRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'createOrderRequest' when calling OrdersApi->CreateOrder");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.Data = createOrderRequest;

            localVarRequestOptions.Operation = "OrdersApi.CreateOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateOrderResponse>("/v1/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an order Create an order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createOrderRequest">create an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOrderResponse</returns>
        public async System.Threading.Tasks.Task<CreateOrderResponse> CreateOrderAsync(string xImxEthAddress, string xImxEthSignature, CreateOrderRequest createOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<CreateOrderResponse> localVarResponse = await CreateOrderWithHttpInfoAsync(xImxEthAddress, xImxEthSignature, createOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order Create an order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createOrderRequest">create an order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<CreateOrderResponse>> CreateOrderWithHttpInfoAsync(string xImxEthAddress, string xImxEthSignature, CreateOrderRequest createOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling OrdersApi->CreateOrder");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling OrdersApi->CreateOrder");
            }

            // verify the required parameter 'createOrderRequest' is set
            if (createOrderRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'createOrderRequest' when calling OrdersApi->CreateOrder");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.Data = createOrderRequest;

            localVarRequestOptions.Operation = "OrdersApi.CreateOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateOrderResponse>("/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of an order with the given ID Get details of an order with the given ID
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID</param>
        /// <param name="includeFees">Set flag to true to include fee body for the order (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Order</returns>
        public Order GetOrder(string id, bool? includeFees = default(bool?), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<Order> localVarResponse = GetOrderWithHttpInfo(id, includeFees, auxiliaryFeePercentages, auxiliaryFeeRecipients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an order with the given ID Get details of an order with the given ID
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID</param>
        /// <param name="includeFees">Set flag to true to include fee body for the order (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Order</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<Order> GetOrderWithHttpInfo(string id, bool? includeFees = default(bool?), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'id' when calling OrdersApi->GetOrder");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeFees != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "include_fees", includeFees));
            }
            if (auxiliaryFeePercentages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_percentages", auxiliaryFeePercentages));
            }
            if (auxiliaryFeeRecipients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_recipients", auxiliaryFeeRecipients));
            }

            localVarRequestOptions.Operation = "OrdersApi.GetOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Order>("/v1/orders/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of an order with the given ID Get details of an order with the given ID
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID</param>
        /// <param name="includeFees">Set flag to true to include fee body for the order (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetOrderAsync(string id, bool? includeFees = default(bool?), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<Order> localVarResponse = await GetOrderWithHttpInfoAsync(id, includeFees, auxiliaryFeePercentages, auxiliaryFeeRecipients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an order with the given ID Get details of an order with the given ID
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Order ID</param>
        /// <param name="includeFees">Set flag to true to include fee body for the order (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<Order>> GetOrderWithHttpInfoAsync(string id, bool? includeFees = default(bool?), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'id' when calling OrdersApi->GetOrder");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeFees != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "include_fees", includeFees));
            }
            if (auxiliaryFeePercentages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_percentages", auxiliaryFeePercentages));
            }
            if (auxiliaryFeeRecipients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_recipients", auxiliaryFeeRecipients));
            }

            localVarRequestOptions.Operation = "OrdersApi.GetOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Order>("/v1/orders/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details a signable cancel order Get details a signable cancel order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableCancelOrderRequest">get a signable cancel order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableCancelOrderResponse</returns>
        public GetSignableCancelOrderResponse GetSignableCancelOrder(GetSignableCancelOrderRequest getSignableCancelOrderRequest, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetSignableCancelOrderResponse> localVarResponse = GetSignableCancelOrderWithHttpInfo(getSignableCancelOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details a signable cancel order Get details a signable cancel order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableCancelOrderRequest">get a signable cancel order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableCancelOrderResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<GetSignableCancelOrderResponse> GetSignableCancelOrderWithHttpInfo(GetSignableCancelOrderRequest getSignableCancelOrderRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSignableCancelOrderRequest' is set
            if (getSignableCancelOrderRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'getSignableCancelOrderRequest' when calling OrdersApi->GetSignableCancelOrder");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.Data = getSignableCancelOrderRequest;

            localVarRequestOptions.Operation = "OrdersApi.GetSignableCancelOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSignableCancelOrderResponse>("/v1/signable-cancel-order-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableCancelOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details a signable cancel order Get details a signable cancel order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableCancelOrderRequest">get a signable cancel order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableCancelOrderResponse</returns>
        public async System.Threading.Tasks.Task<GetSignableCancelOrderResponse> GetSignableCancelOrderAsync(GetSignableCancelOrderRequest getSignableCancelOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetSignableCancelOrderResponse> localVarResponse = await GetSignableCancelOrderWithHttpInfoAsync(getSignableCancelOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details a signable cancel order Get details a signable cancel order
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableCancelOrderRequest">get a signable cancel order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableCancelOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<GetSignableCancelOrderResponse>> GetSignableCancelOrderWithHttpInfoAsync(GetSignableCancelOrderRequest getSignableCancelOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSignableCancelOrderRequest' is set
            if (getSignableCancelOrderRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'getSignableCancelOrderRequest' when calling OrdersApi->GetSignableCancelOrder");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableCancelOrderRequest;

            localVarRequestOptions.Operation = "OrdersApi.GetSignableCancelOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSignableCancelOrderResponse>("/v1/signable-cancel-order-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableCancelOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a signable order request (V3) Get a signable order request (V3)
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableOrderRequestV3">get a signable order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableOrderResponse</returns>
        public GetSignableOrderResponse GetSignableOrder(GetSignableOrderRequest getSignableOrderRequestV3, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetSignableOrderResponse> localVarResponse = GetSignableOrderWithHttpInfo(getSignableOrderRequestV3);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a signable order request (V3) Get a signable order request (V3)
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableOrderRequestV3">get a signable order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableOrderResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<GetSignableOrderResponse> GetSignableOrderWithHttpInfo(GetSignableOrderRequest getSignableOrderRequestV3, int operationIndex = 0)
        {
            // verify the required parameter 'getSignableOrderRequestV3' is set
            if (getSignableOrderRequestV3 == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'getSignableOrderRequestV3' when calling OrdersApi->GetSignableOrder");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.Data = getSignableOrderRequestV3;

            localVarRequestOptions.Operation = "OrdersApi.GetSignableOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSignableOrderResponse>("/v3/signable-order-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a signable order request (V3) Get a signable order request (V3)
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableOrderRequestV3">get a signable order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableOrderResponse</returns>
        public async System.Threading.Tasks.Task<GetSignableOrderResponse> GetSignableOrderAsync(GetSignableOrderRequest getSignableOrderRequestV3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetSignableOrderResponse> localVarResponse = await GetSignableOrderWithHttpInfoAsync(getSignableOrderRequestV3, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a signable order request (V3) Get a signable order request (V3)
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableOrderRequestV3">get a signable order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<GetSignableOrderResponse>> GetSignableOrderWithHttpInfoAsync(GetSignableOrderRequest getSignableOrderRequestV3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSignableOrderRequestV3' is set
            if (getSignableOrderRequestV3 == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'getSignableOrderRequestV3' when calling OrdersApi->GetSignableOrder");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableOrderRequestV3;

            localVarRequestOptions.Operation = "OrdersApi.GetSignableOrder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSignableOrderResponse>("/v3/signable-order-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of orders Get a list of orders
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this order (optional)</param>
        /// <param name="status">Status of this order (optional)</param>
        /// <param name="minTimestamp">Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="buyTokenType">Token type of the asset this order buys (optional)</param>
        /// <param name="buyTokenId">ERC721 Token ID of the asset this order buys (optional)</param>
        /// <param name="buyAssetId">Internal IMX ID of the asset this order buys (optional)</param>
        /// <param name="buyTokenAddress">Token address of the asset this order buys (optional)</param>
        /// <param name="buyTokenName">Token name of the asset this order buys (optional)</param>
        /// <param name="buyMinQuantity">Min quantity for the asset this order buys (optional)</param>
        /// <param name="buyMaxQuantity">Max quantity for the asset this order buys (optional)</param>
        /// <param name="buyMetadata">JSON-encoded metadata filters for the asset this order buys (optional)</param>
        /// <param name="sellTokenType">Token type of the asset this order sells (optional)</param>
        /// <param name="sellTokenId">ERC721 Token ID of the asset this order sells (optional)</param>
        /// <param name="sellAssetId">Internal IMX ID of the asset this order sells (optional)</param>
        /// <param name="sellTokenAddress">Token address of the asset this order sells (optional)</param>
        /// <param name="sellTokenName">Token name of the asset this order sells (optional)</param>
        /// <param name="sellMinQuantity">Min quantity for the asset this order sells (optional)</param>
        /// <param name="sellMaxQuantity">Max quantity for the asset this order sells (optional)</param>
        /// <param name="sellMetadata">JSON-encoded metadata filters for the asset this order sells (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="includeFees">Set flag to true to include fee object for orders (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOrdersResponse</returns>
        public ListOrdersResponse ListOrders(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string buyTokenType = default(string), string buyTokenId = default(string), string buyAssetId = default(string), string buyTokenAddress = default(string), string buyTokenName = default(string), string buyMinQuantity = default(string), string buyMaxQuantity = default(string), string buyMetadata = default(string), string sellTokenType = default(string), string sellTokenId = default(string), string sellAssetId = default(string), string sellTokenAddress = default(string), string sellTokenName = default(string), string sellMinQuantity = default(string), string sellMaxQuantity = default(string), string sellMetadata = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), bool? includeFees = default(bool?), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<ListOrdersResponse> localVarResponse = ListOrdersWithHttpInfo(pageSize, cursor, orderBy, direction, user, status, minTimestamp, maxTimestamp, updatedMinTimestamp, updatedMaxTimestamp, buyTokenType, buyTokenId, buyAssetId, buyTokenAddress, buyTokenName, buyMinQuantity, buyMaxQuantity, buyMetadata, sellTokenType, sellTokenId, sellAssetId, sellTokenAddress, sellTokenName, sellMinQuantity, sellMaxQuantity, sellMetadata, auxiliaryFeePercentages, auxiliaryFeeRecipients, includeFees);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of orders Get a list of orders
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this order (optional)</param>
        /// <param name="status">Status of this order (optional)</param>
        /// <param name="minTimestamp">Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="buyTokenType">Token type of the asset this order buys (optional)</param>
        /// <param name="buyTokenId">ERC721 Token ID of the asset this order buys (optional)</param>
        /// <param name="buyAssetId">Internal IMX ID of the asset this order buys (optional)</param>
        /// <param name="buyTokenAddress">Token address of the asset this order buys (optional)</param>
        /// <param name="buyTokenName">Token name of the asset this order buys (optional)</param>
        /// <param name="buyMinQuantity">Min quantity for the asset this order buys (optional)</param>
        /// <param name="buyMaxQuantity">Max quantity for the asset this order buys (optional)</param>
        /// <param name="buyMetadata">JSON-encoded metadata filters for the asset this order buys (optional)</param>
        /// <param name="sellTokenType">Token type of the asset this order sells (optional)</param>
        /// <param name="sellTokenId">ERC721 Token ID of the asset this order sells (optional)</param>
        /// <param name="sellAssetId">Internal IMX ID of the asset this order sells (optional)</param>
        /// <param name="sellTokenAddress">Token address of the asset this order sells (optional)</param>
        /// <param name="sellTokenName">Token name of the asset this order sells (optional)</param>
        /// <param name="sellMinQuantity">Min quantity for the asset this order sells (optional)</param>
        /// <param name="sellMaxQuantity">Max quantity for the asset this order sells (optional)</param>
        /// <param name="sellMetadata">JSON-encoded metadata filters for the asset this order sells (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="includeFees">Set flag to true to include fee object for orders (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOrdersResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<ListOrdersResponse> ListOrdersWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string buyTokenType = default(string), string buyTokenId = default(string), string buyAssetId = default(string), string buyTokenAddress = default(string), string buyTokenName = default(string), string buyMinQuantity = default(string), string buyMaxQuantity = default(string), string buyMetadata = default(string), string sellTokenType = default(string), string sellTokenId = default(string), string sellAssetId = default(string), string sellTokenAddress = default(string), string sellTokenName = default(string), string sellMinQuantity = default(string), string sellMaxQuantity = default(string), string sellMetadata = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), bool? includeFees = default(bool?), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (minTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "min_timestamp", minTimestamp));
            }
            if (maxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "max_timestamp", maxTimestamp));
            }
            if (updatedMinTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "updated_min_timestamp", updatedMinTimestamp));
            }
            if (updatedMaxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "updated_max_timestamp", updatedMaxTimestamp));
            }
            if (buyTokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_token_type", buyTokenType));
            }
            if (buyTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_token_id", buyTokenId));
            }
            if (buyAssetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_asset_id", buyAssetId));
            }
            if (buyTokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_token_address", buyTokenAddress));
            }
            if (buyTokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_token_name", buyTokenName));
            }
            if (buyMinQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_min_quantity", buyMinQuantity));
            }
            if (buyMaxQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_max_quantity", buyMaxQuantity));
            }
            if (buyMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_metadata", buyMetadata));
            }
            if (sellTokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_token_type", sellTokenType));
            }
            if (sellTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_token_id", sellTokenId));
            }
            if (sellAssetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_asset_id", sellAssetId));
            }
            if (sellTokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_token_address", sellTokenAddress));
            }
            if (sellTokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_token_name", sellTokenName));
            }
            if (sellMinQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_min_quantity", sellMinQuantity));
            }
            if (sellMaxQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_max_quantity", sellMaxQuantity));
            }
            if (sellMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_metadata", sellMetadata));
            }
            if (auxiliaryFeePercentages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_percentages", auxiliaryFeePercentages));
            }
            if (auxiliaryFeeRecipients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_recipients", auxiliaryFeeRecipients));
            }
            if (includeFees != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "include_fees", includeFees));
            }

            localVarRequestOptions.Operation = "OrdersApi.ListOrders";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOrdersResponse>("/v1/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of orders Get a list of orders
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this order (optional)</param>
        /// <param name="status">Status of this order (optional)</param>
        /// <param name="minTimestamp">Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="buyTokenType">Token type of the asset this order buys (optional)</param>
        /// <param name="buyTokenId">ERC721 Token ID of the asset this order buys (optional)</param>
        /// <param name="buyAssetId">Internal IMX ID of the asset this order buys (optional)</param>
        /// <param name="buyTokenAddress">Token address of the asset this order buys (optional)</param>
        /// <param name="buyTokenName">Token name of the asset this order buys (optional)</param>
        /// <param name="buyMinQuantity">Min quantity for the asset this order buys (optional)</param>
        /// <param name="buyMaxQuantity">Max quantity for the asset this order buys (optional)</param>
        /// <param name="buyMetadata">JSON-encoded metadata filters for the asset this order buys (optional)</param>
        /// <param name="sellTokenType">Token type of the asset this order sells (optional)</param>
        /// <param name="sellTokenId">ERC721 Token ID of the asset this order sells (optional)</param>
        /// <param name="sellAssetId">Internal IMX ID of the asset this order sells (optional)</param>
        /// <param name="sellTokenAddress">Token address of the asset this order sells (optional)</param>
        /// <param name="sellTokenName">Token name of the asset this order sells (optional)</param>
        /// <param name="sellMinQuantity">Min quantity for the asset this order sells (optional)</param>
        /// <param name="sellMaxQuantity">Max quantity for the asset this order sells (optional)</param>
        /// <param name="sellMetadata">JSON-encoded metadata filters for the asset this order sells (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="includeFees">Set flag to true to include fee object for orders (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrdersResponse</returns>
        public async System.Threading.Tasks.Task<ListOrdersResponse> ListOrdersAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string buyTokenType = default(string), string buyTokenId = default(string), string buyAssetId = default(string), string buyTokenAddress = default(string), string buyTokenName = default(string), string buyMinQuantity = default(string), string buyMaxQuantity = default(string), string buyMetadata = default(string), string sellTokenType = default(string), string sellTokenId = default(string), string sellAssetId = default(string), string sellTokenAddress = default(string), string sellTokenName = default(string), string sellMinQuantity = default(string), string sellMaxQuantity = default(string), string sellMetadata = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), bool? includeFees = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<ListOrdersResponse> localVarResponse = await ListOrdersWithHttpInfoAsync(pageSize, cursor, orderBy, direction, user, status, minTimestamp, maxTimestamp, updatedMinTimestamp, updatedMaxTimestamp, buyTokenType, buyTokenId, buyAssetId, buyTokenAddress, buyTokenName, buyMinQuantity, buyMaxQuantity, buyMetadata, sellTokenType, sellTokenId, sellAssetId, sellTokenAddress, sellTokenName, sellMinQuantity, sellMaxQuantity, sellMetadata, auxiliaryFeePercentages, auxiliaryFeeRecipients, includeFees, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of orders Get a list of orders
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this order (optional)</param>
        /// <param name="status">Status of this order (optional)</param>
        /// <param name="minTimestamp">Minimum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum created at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum updated at timestamp for this order, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="buyTokenType">Token type of the asset this order buys (optional)</param>
        /// <param name="buyTokenId">ERC721 Token ID of the asset this order buys (optional)</param>
        /// <param name="buyAssetId">Internal IMX ID of the asset this order buys (optional)</param>
        /// <param name="buyTokenAddress">Token address of the asset this order buys (optional)</param>
        /// <param name="buyTokenName">Token name of the asset this order buys (optional)</param>
        /// <param name="buyMinQuantity">Min quantity for the asset this order buys (optional)</param>
        /// <param name="buyMaxQuantity">Max quantity for the asset this order buys (optional)</param>
        /// <param name="buyMetadata">JSON-encoded metadata filters for the asset this order buys (optional)</param>
        /// <param name="sellTokenType">Token type of the asset this order sells (optional)</param>
        /// <param name="sellTokenId">ERC721 Token ID of the asset this order sells (optional)</param>
        /// <param name="sellAssetId">Internal IMX ID of the asset this order sells (optional)</param>
        /// <param name="sellTokenAddress">Token address of the asset this order sells (optional)</param>
        /// <param name="sellTokenName">Token name of the asset this order sells (optional)</param>
        /// <param name="sellMinQuantity">Min quantity for the asset this order sells (optional)</param>
        /// <param name="sellMaxQuantity">Max quantity for the asset this order sells (optional)</param>
        /// <param name="sellMetadata">JSON-encoded metadata filters for the asset this order sells (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="includeFees">Set flag to true to include fee object for orders (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrdersResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<ListOrdersResponse>> ListOrdersWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string buyTokenType = default(string), string buyTokenId = default(string), string buyAssetId = default(string), string buyTokenAddress = default(string), string buyTokenName = default(string), string buyMinQuantity = default(string), string buyMaxQuantity = default(string), string buyMetadata = default(string), string sellTokenType = default(string), string sellTokenId = default(string), string sellAssetId = default(string), string sellTokenAddress = default(string), string sellTokenName = default(string), string sellMinQuantity = default(string), string sellMaxQuantity = default(string), string sellMetadata = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), bool? includeFees = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (minTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "min_timestamp", minTimestamp));
            }
            if (maxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "max_timestamp", maxTimestamp));
            }
            if (updatedMinTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "updated_min_timestamp", updatedMinTimestamp));
            }
            if (updatedMaxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "updated_max_timestamp", updatedMaxTimestamp));
            }
            if (buyTokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_token_type", buyTokenType));
            }
            if (buyTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_token_id", buyTokenId));
            }
            if (buyAssetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_asset_id", buyAssetId));
            }
            if (buyTokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_token_address", buyTokenAddress));
            }
            if (buyTokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_token_name", buyTokenName));
            }
            if (buyMinQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_min_quantity", buyMinQuantity));
            }
            if (buyMaxQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_max_quantity", buyMaxQuantity));
            }
            if (buyMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "buy_metadata", buyMetadata));
            }
            if (sellTokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_token_type", sellTokenType));
            }
            if (sellTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_token_id", sellTokenId));
            }
            if (sellAssetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_asset_id", sellAssetId));
            }
            if (sellTokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_token_address", sellTokenAddress));
            }
            if (sellTokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_token_name", sellTokenName));
            }
            if (sellMinQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_min_quantity", sellMinQuantity));
            }
            if (sellMaxQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_max_quantity", sellMaxQuantity));
            }
            if (sellMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "sell_metadata", sellMetadata));
            }
            if (auxiliaryFeePercentages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_percentages", auxiliaryFeePercentages));
            }
            if (auxiliaryFeeRecipients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_recipients", auxiliaryFeeRecipients));
            }
            if (includeFees != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "include_fees", includeFees));
            }

            localVarRequestOptions.Operation = "OrdersApi.ListOrders";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOrdersResponse>("/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
