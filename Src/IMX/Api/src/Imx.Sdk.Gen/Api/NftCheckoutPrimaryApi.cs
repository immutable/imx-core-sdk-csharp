/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Imx.Sdk.Gen.Client;
using Imx.Sdk.Gen.Model;

namespace Imx.Sdk.Gen.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INftCheckoutPrimaryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get currencies with limits
        /// </summary>
        /// <remarks>
        /// Returns a list of supported currencies and their limits
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Provider name (optional)</param>
        /// <param name="includeLimits">Flag if limits should be included in the response or not (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencyWithLimits</returns>
        CurrencyWithLimits GetCurrenciesNFTCheckoutPrimary(string provider = default(string), bool? includeLimits = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get currencies with limits
        /// </summary>
        /// <remarks>
        /// Returns a list of supported currencies and their limits
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Provider name (optional)</param>
        /// <param name="includeLimits">Flag if limits should be included in the response or not (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencyWithLimits</returns>
        ApiResponse<CurrencyWithLimits> GetCurrenciesNFTCheckoutPrimaryWithHttpInfo(string provider = default(string), bool? includeLimits = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get NFT primary sale transaction by id
        /// </summary>
        /// <remarks>
        /// given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NftprimarytransactionGetResponse</returns>
        NftprimarytransactionGetResponse GetNftPrimaryTransaction(string transactionId, int operationIndex = 0);

        /// <summary>
        /// Get NFT primary sale transaction by id
        /// </summary>
        /// <remarks>
        /// given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NftprimarytransactionGetResponse</returns>
        ApiResponse<NftprimarytransactionGetResponse> GetNftPrimaryTransactionWithHttpInfo(string transactionId, int operationIndex = 0);
        /// <summary>
        /// Get a list of NFT primary sales transactions
        /// </summary>
        /// <remarks>
        /// Returns a list of NFT primary sales transactions
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="transactionId">Transaction id (optional)</param>
        /// <param name="contractAddress">Contract address of the asset (optional)</param>
        /// <param name="sellerWalletAddress">Ethereum address of the seller (optional)</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction (optional)</param>
        /// <param name="status">Transaction status (optional)</param>
        /// <param name="provider">Checkout provider name (optional)</param>
        /// <param name="mintId">Minting transaction ID - see mintTokens response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NftprimarytransactionListTransactionsResponse</returns>
        NftprimarytransactionListTransactionsResponse GetNftPrimaryTransactions(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string transactionId = default(string), string contractAddress = default(string), string sellerWalletAddress = default(string), string userWalletAddress = default(string), string status = default(string), string provider = default(string), string mintId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of NFT primary sales transactions
        /// </summary>
        /// <remarks>
        /// Returns a list of NFT primary sales transactions
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="transactionId">Transaction id (optional)</param>
        /// <param name="contractAddress">Contract address of the asset (optional)</param>
        /// <param name="sellerWalletAddress">Ethereum address of the seller (optional)</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction (optional)</param>
        /// <param name="status">Transaction status (optional)</param>
        /// <param name="provider">Checkout provider name (optional)</param>
        /// <param name="mintId">Minting transaction ID - see mintTokens response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NftprimarytransactionListTransactionsResponse</returns>
        ApiResponse<NftprimarytransactionListTransactionsResponse> GetNftPrimaryTransactionsWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string transactionId = default(string), string contractAddress = default(string), string sellerWalletAddress = default(string), string userWalletAddress = default(string), string status = default(string), string provider = default(string), string mintId = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INftCheckoutPrimaryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get currencies with limits
        /// </summary>
        /// <remarks>
        /// Returns a list of supported currencies and their limits
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Provider name (optional)</param>
        /// <param name="includeLimits">Flag if limits should be included in the response or not (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyWithLimits</returns>
        System.Threading.Tasks.Task<CurrencyWithLimits> GetCurrenciesNFTCheckoutPrimaryAsync(string provider = default(string), bool? includeLimits = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get currencies with limits
        /// </summary>
        /// <remarks>
        /// Returns a list of supported currencies and their limits
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Provider name (optional)</param>
        /// <param name="includeLimits">Flag if limits should be included in the response or not (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyWithLimits)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencyWithLimits>> GetCurrenciesNFTCheckoutPrimaryWithHttpInfoAsync(string provider = default(string), bool? includeLimits = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT primary sale transaction by id
        /// </summary>
        /// <remarks>
        /// given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftprimarytransactionGetResponse</returns>
        System.Threading.Tasks.Task<NftprimarytransactionGetResponse> GetNftPrimaryTransactionAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT primary sale transaction by id
        /// </summary>
        /// <remarks>
        /// given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftprimarytransactionGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftprimarytransactionGetResponse>> GetNftPrimaryTransactionWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of NFT primary sales transactions
        /// </summary>
        /// <remarks>
        /// Returns a list of NFT primary sales transactions
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="transactionId">Transaction id (optional)</param>
        /// <param name="contractAddress">Contract address of the asset (optional)</param>
        /// <param name="sellerWalletAddress">Ethereum address of the seller (optional)</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction (optional)</param>
        /// <param name="status">Transaction status (optional)</param>
        /// <param name="provider">Checkout provider name (optional)</param>
        /// <param name="mintId">Minting transaction ID - see mintTokens response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftprimarytransactionListTransactionsResponse</returns>
        System.Threading.Tasks.Task<NftprimarytransactionListTransactionsResponse> GetNftPrimaryTransactionsAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string transactionId = default(string), string contractAddress = default(string), string sellerWalletAddress = default(string), string userWalletAddress = default(string), string status = default(string), string provider = default(string), string mintId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of NFT primary sales transactions
        /// </summary>
        /// <remarks>
        /// Returns a list of NFT primary sales transactions
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="transactionId">Transaction id (optional)</param>
        /// <param name="contractAddress">Contract address of the asset (optional)</param>
        /// <param name="sellerWalletAddress">Ethereum address of the seller (optional)</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction (optional)</param>
        /// <param name="status">Transaction status (optional)</param>
        /// <param name="provider">Checkout provider name (optional)</param>
        /// <param name="mintId">Minting transaction ID - see mintTokens response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftprimarytransactionListTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftprimarytransactionListTransactionsResponse>> GetNftPrimaryTransactionsWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string transactionId = default(string), string contractAddress = default(string), string sellerWalletAddress = default(string), string userWalletAddress = default(string), string status = default(string), string provider = default(string), string mintId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INftCheckoutPrimaryApi : INftCheckoutPrimaryApiSync, INftCheckoutPrimaryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NftCheckoutPrimaryApi : INftCheckoutPrimaryApi
    {
        private Imx.Sdk.Gen.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NftCheckoutPrimaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NftCheckoutPrimaryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NftCheckoutPrimaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NftCheckoutPrimaryApi(string basePath)
        {
            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                new Imx.Sdk.Gen.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NftCheckoutPrimaryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NftCheckoutPrimaryApi(Imx.Sdk.Gen.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NftCheckoutPrimaryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NftCheckoutPrimaryApi(Imx.Sdk.Gen.Client.ISynchronousClient client, Imx.Sdk.Gen.Client.IAsynchronousClient asyncClient, Imx.Sdk.Gen.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Imx.Sdk.Gen.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Imx.Sdk.Gen.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get currencies with limits Returns a list of supported currencies and their limits
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Provider name (optional)</param>
        /// <param name="includeLimits">Flag if limits should be included in the response or not (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencyWithLimits</returns>
        public CurrencyWithLimits GetCurrenciesNFTCheckoutPrimary(string provider = default(string), bool? includeLimits = default(bool?), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<CurrencyWithLimits> localVarResponse = GetCurrenciesNFTCheckoutPrimaryWithHttpInfo(provider, includeLimits);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get currencies with limits Returns a list of supported currencies and their limits
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Provider name (optional)</param>
        /// <param name="includeLimits">Flag if limits should be included in the response or not (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencyWithLimits</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<CurrencyWithLimits> GetCurrenciesNFTCheckoutPrimaryWithHttpInfo(string provider = default(string), bool? includeLimits = default(bool?), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.1");

            if (provider != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "provider", provider));
            }
            if (includeLimits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "include_limits", includeLimits));
            }

            localVarRequestOptions.Operation = "NftCheckoutPrimaryApi.GetCurrenciesNFTCheckoutPrimary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CurrencyWithLimits>("/v2/nft/primary/currencies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrenciesNFTCheckoutPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get currencies with limits Returns a list of supported currencies and their limits
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Provider name (optional)</param>
        /// <param name="includeLimits">Flag if limits should be included in the response or not (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyWithLimits</returns>
        public async System.Threading.Tasks.Task<CurrencyWithLimits> GetCurrenciesNFTCheckoutPrimaryAsync(string provider = default(string), bool? includeLimits = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<CurrencyWithLimits> localVarResponse = await GetCurrenciesNFTCheckoutPrimaryWithHttpInfoAsync(provider, includeLimits, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get currencies with limits Returns a list of supported currencies and their limits
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Provider name (optional)</param>
        /// <param name="includeLimits">Flag if limits should be included in the response or not (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyWithLimits)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<CurrencyWithLimits>> GetCurrenciesNFTCheckoutPrimaryWithHttpInfoAsync(string provider = default(string), bool? includeLimits = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (provider != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "provider", provider));
            }
            if (includeLimits != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "include_limits", includeLimits));
            }

            localVarRequestOptions.Operation = "NftCheckoutPrimaryApi.GetCurrenciesNFTCheckoutPrimary";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CurrencyWithLimits>("/v2/nft/primary/currencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrenciesNFTCheckoutPrimary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT primary sale transaction by id given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NftprimarytransactionGetResponse</returns>
        public NftprimarytransactionGetResponse GetNftPrimaryTransaction(string transactionId, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<NftprimarytransactionGetResponse> localVarResponse = GetNftPrimaryTransactionWithHttpInfo(transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT primary sale transaction by id given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NftprimarytransactionGetResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<NftprimarytransactionGetResponse> GetNftPrimaryTransactionWithHttpInfo(string transactionId, int operationIndex = 0)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'transactionId' when calling NftCheckoutPrimaryApi->GetNftPrimaryTransaction");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.1");

            localVarRequestOptions.PathParameters.Add("transaction_id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "NftCheckoutPrimaryApi.GetNftPrimaryTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<NftprimarytransactionGetResponse>("/v2/nft/primary/{transaction_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNftPrimaryTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT primary sale transaction by id given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftprimarytransactionGetResponse</returns>
        public async System.Threading.Tasks.Task<NftprimarytransactionGetResponse> GetNftPrimaryTransactionAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<NftprimarytransactionGetResponse> localVarResponse = await GetNftPrimaryTransactionWithHttpInfoAsync(transactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT primary sale transaction by id given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftprimarytransactionGetResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<NftprimarytransactionGetResponse>> GetNftPrimaryTransactionWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'transactionId' when calling NftCheckoutPrimaryApi->GetNftPrimaryTransaction");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "NftCheckoutPrimaryApi.GetNftPrimaryTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NftprimarytransactionGetResponse>("/v2/nft/primary/{transaction_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNftPrimaryTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of NFT primary sales transactions Returns a list of NFT primary sales transactions
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="transactionId">Transaction id (optional)</param>
        /// <param name="contractAddress">Contract address of the asset (optional)</param>
        /// <param name="sellerWalletAddress">Ethereum address of the seller (optional)</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction (optional)</param>
        /// <param name="status">Transaction status (optional)</param>
        /// <param name="provider">Checkout provider name (optional)</param>
        /// <param name="mintId">Minting transaction ID - see mintTokens response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NftprimarytransactionListTransactionsResponse</returns>
        public NftprimarytransactionListTransactionsResponse GetNftPrimaryTransactions(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string transactionId = default(string), string contractAddress = default(string), string sellerWalletAddress = default(string), string userWalletAddress = default(string), string status = default(string), string provider = default(string), string mintId = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<NftprimarytransactionListTransactionsResponse> localVarResponse = GetNftPrimaryTransactionsWithHttpInfo(pageSize, cursor, orderBy, direction, transactionId, contractAddress, sellerWalletAddress, userWalletAddress, status, provider, mintId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of NFT primary sales transactions Returns a list of NFT primary sales transactions
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="transactionId">Transaction id (optional)</param>
        /// <param name="contractAddress">Contract address of the asset (optional)</param>
        /// <param name="sellerWalletAddress">Ethereum address of the seller (optional)</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction (optional)</param>
        /// <param name="status">Transaction status (optional)</param>
        /// <param name="provider">Checkout provider name (optional)</param>
        /// <param name="mintId">Minting transaction ID - see mintTokens response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NftprimarytransactionListTransactionsResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<NftprimarytransactionListTransactionsResponse> GetNftPrimaryTransactionsWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string transactionId = default(string), string contractAddress = default(string), string sellerWalletAddress = default(string), string userWalletAddress = default(string), string status = default(string), string provider = default(string), string mintId = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.1");

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (transactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "transaction_id", transactionId));
            }
            if (contractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "contract_address", contractAddress));
            }
            if (sellerWalletAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "seller_wallet_address", sellerWalletAddress));
            }
            if (userWalletAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "user_wallet_address", userWalletAddress));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (provider != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "provider", provider));
            }
            if (mintId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "mint_id", mintId));
            }

            localVarRequestOptions.Operation = "NftCheckoutPrimaryApi.GetNftPrimaryTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<NftprimarytransactionListTransactionsResponse>("/v2/nft/primary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNftPrimaryTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of NFT primary sales transactions Returns a list of NFT primary sales transactions
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="transactionId">Transaction id (optional)</param>
        /// <param name="contractAddress">Contract address of the asset (optional)</param>
        /// <param name="sellerWalletAddress">Ethereum address of the seller (optional)</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction (optional)</param>
        /// <param name="status">Transaction status (optional)</param>
        /// <param name="provider">Checkout provider name (optional)</param>
        /// <param name="mintId">Minting transaction ID - see mintTokens response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftprimarytransactionListTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<NftprimarytransactionListTransactionsResponse> GetNftPrimaryTransactionsAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string transactionId = default(string), string contractAddress = default(string), string sellerWalletAddress = default(string), string userWalletAddress = default(string), string status = default(string), string provider = default(string), string mintId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<NftprimarytransactionListTransactionsResponse> localVarResponse = await GetNftPrimaryTransactionsWithHttpInfoAsync(pageSize, cursor, orderBy, direction, transactionId, contractAddress, sellerWalletAddress, userWalletAddress, status, provider, mintId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of NFT primary sales transactions Returns a list of NFT primary sales transactions
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="transactionId">Transaction id (optional)</param>
        /// <param name="contractAddress">Contract address of the asset (optional)</param>
        /// <param name="sellerWalletAddress">Ethereum address of the seller (optional)</param>
        /// <param name="userWalletAddress">Ethereum address of the user who wants to create transaction (optional)</param>
        /// <param name="status">Transaction status (optional)</param>
        /// <param name="provider">Checkout provider name (optional)</param>
        /// <param name="mintId">Minting transaction ID - see mintTokens response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftprimarytransactionListTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<NftprimarytransactionListTransactionsResponse>> GetNftPrimaryTransactionsWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string transactionId = default(string), string contractAddress = default(string), string sellerWalletAddress = default(string), string userWalletAddress = default(string), string status = default(string), string provider = default(string), string mintId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (transactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "transaction_id", transactionId));
            }
            if (contractAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "contract_address", contractAddress));
            }
            if (sellerWalletAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "seller_wallet_address", sellerWalletAddress));
            }
            if (userWalletAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "user_wallet_address", userWalletAddress));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (provider != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "provider", provider));
            }
            if (mintId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "mint_id", mintId));
            }

            localVarRequestOptions.Operation = "NftCheckoutPrimaryApi.GetNftPrimaryTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NftprimarytransactionListTransactionsResponse>("/v2/nft/primary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNftPrimaryTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
