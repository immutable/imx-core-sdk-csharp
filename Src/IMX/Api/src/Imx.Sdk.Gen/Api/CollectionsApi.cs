/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Imx.Sdk.Gen.Client;
using Imx.Sdk.Gen.Model;

namespace Imx.Sdk.Gen.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Create collection
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createCollectionRequest">create a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Collection</returns>
        Collection CreateCollection(string iMXSignature, string iMXTimestamp, CreateCollectionRequest createCollectionRequest, int operationIndex = 0);

        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Create collection
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createCollectionRequest">create a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> CreateCollectionWithHttpInfo(string iMXSignature, string iMXTimestamp, CreateCollectionRequest createCollectionRequest, int operationIndex = 0);
        /// <summary>
        /// Get details of a collection at the given address
        /// </summary>
        /// <remarks>
        /// Get details of a collection at the given address
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Collection</returns>
        Collection GetCollection(string address, int operationIndex = 0);

        /// <summary>
        /// Get details of a collection at the given address
        /// </summary>
        /// <remarks>
        /// Get details of a collection at the given address
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> GetCollectionWithHttpInfo(string address, int operationIndex = 0);
        /// <summary>
        /// Get a list of collection filters
        /// </summary>
        /// <remarks>
        /// Get a list of collection filters
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="nextPageToken">Next page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionFilter</returns>
        CollectionFilter ListCollectionFilters(string address, int? pageSize = default(int?), string nextPageToken = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of collection filters
        /// </summary>
        /// <remarks>
        /// Get a list of collection filters
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="nextPageToken">Next page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionFilter</returns>
        ApiResponse<CollectionFilter> ListCollectionFiltersWithHttpInfo(string address, int? pageSize = default(int?), string nextPageToken = default(string), int operationIndex = 0);
        /// <summary>
        /// Get a list of collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="blacklist">List of collections not to be included, separated by commas (optional)</param>
        /// <param name="whitelist">List of collections to be included, separated by commas (optional)</param>
        /// <param name="keyword">Keyword to search in collection name and description (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCollectionsResponse</returns>
        ListCollectionsResponse ListCollections(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string blacklist = default(string), string whitelist = default(string), string keyword = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="blacklist">List of collections not to be included, separated by commas (optional)</param>
        /// <param name="whitelist">List of collections to be included, separated by commas (optional)</param>
        /// <param name="keyword">Keyword to search in collection name and description (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCollectionsResponse</returns>
        ApiResponse<ListCollectionsResponse> ListCollectionsWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string blacklist = default(string), string whitelist = default(string), string keyword = default(string), int operationIndex = 0);
        /// <summary>
        /// Update collection
        /// </summary>
        /// <remarks>
        /// Update collection
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="updateCollectionRequest">update a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Collection</returns>
        Collection UpdateCollection(string address, string iMXSignature, string iMXTimestamp, UpdateCollectionRequest updateCollectionRequest, int operationIndex = 0);

        /// <summary>
        /// Update collection
        /// </summary>
        /// <remarks>
        /// Update collection
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="updateCollectionRequest">update a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Collection</returns>
        ApiResponse<Collection> UpdateCollectionWithHttpInfo(string address, string iMXSignature, string iMXTimestamp, UpdateCollectionRequest updateCollectionRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Create collection
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createCollectionRequest">create a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> CreateCollectionAsync(string iMXSignature, string iMXTimestamp, CreateCollectionRequest createCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Create collection
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createCollectionRequest">create a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> CreateCollectionWithHttpInfoAsync(string iMXSignature, string iMXTimestamp, CreateCollectionRequest createCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details of a collection at the given address
        /// </summary>
        /// <remarks>
        /// Get details of a collection at the given address
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> GetCollectionAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of a collection at the given address
        /// </summary>
        /// <remarks>
        /// Get details of a collection at the given address
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> GetCollectionWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of collection filters
        /// </summary>
        /// <remarks>
        /// Get a list of collection filters
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="nextPageToken">Next page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionFilter</returns>
        System.Threading.Tasks.Task<CollectionFilter> ListCollectionFiltersAsync(string address, int? pageSize = default(int?), string nextPageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of collection filters
        /// </summary>
        /// <remarks>
        /// Get a list of collection filters
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="nextPageToken">Next page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionFilter>> ListCollectionFiltersWithHttpInfoAsync(string address, int? pageSize = default(int?), string nextPageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="blacklist">List of collections not to be included, separated by commas (optional)</param>
        /// <param name="whitelist">List of collections to be included, separated by commas (optional)</param>
        /// <param name="keyword">Keyword to search in collection name and description (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionsResponse</returns>
        System.Threading.Tasks.Task<ListCollectionsResponse> ListCollectionsAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string blacklist = default(string), string whitelist = default(string), string keyword = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of collections
        /// </summary>
        /// <remarks>
        /// Get a list of collections
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="blacklist">List of collections not to be included, separated by commas (optional)</param>
        /// <param name="whitelist">List of collections to be included, separated by commas (optional)</param>
        /// <param name="keyword">Keyword to search in collection name and description (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCollectionsResponse>> ListCollectionsWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string blacklist = default(string), string whitelist = default(string), string keyword = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update collection
        /// </summary>
        /// <remarks>
        /// Update collection
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="updateCollectionRequest">update a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        System.Threading.Tasks.Task<Collection> UpdateCollectionAsync(string address, string iMXSignature, string iMXTimestamp, UpdateCollectionRequest updateCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update collection
        /// </summary>
        /// <remarks>
        /// Update collection
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="updateCollectionRequest">update a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collection>> UpdateCollectionWithHttpInfoAsync(string address, string iMXSignature, string iMXTimestamp, UpdateCollectionRequest updateCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApi : ICollectionsApiSync, ICollectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionsApi : ICollectionsApi
    {
        private Imx.Sdk.Gen.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi(string basePath)
        {
            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                new Imx.Sdk.Gen.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionsApi(Imx.Sdk.Gen.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CollectionsApi(Imx.Sdk.Gen.Client.ISynchronousClient client, Imx.Sdk.Gen.Client.IAsynchronousClient asyncClient, Imx.Sdk.Gen.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Imx.Sdk.Gen.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Imx.Sdk.Gen.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create collection Create collection
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createCollectionRequest">create a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Collection</returns>
        public Collection CreateCollection(string iMXSignature, string iMXTimestamp, CreateCollectionRequest createCollectionRequest, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<Collection> localVarResponse = CreateCollectionWithHttpInfo(iMXSignature, iMXTimestamp, createCollectionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create collection Create collection
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createCollectionRequest">create a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Collection</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<Collection> CreateCollectionWithHttpInfo(string iMXSignature, string iMXTimestamp, CreateCollectionRequest createCollectionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling CollectionsApi->CreateCollection");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling CollectionsApi->CreateCollection");
            }

            // verify the required parameter 'createCollectionRequest' is set
            if (createCollectionRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'createCollectionRequest' when calling CollectionsApi->CreateCollection");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = createCollectionRequest;

            localVarRequestOptions.Operation = "CollectionsApi.CreateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Collection>("/v1/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create collection Create collection
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createCollectionRequest">create a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> CreateCollectionAsync(string iMXSignature, string iMXTimestamp, CreateCollectionRequest createCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<Collection> localVarResponse = await CreateCollectionWithHttpInfoAsync(iMXSignature, iMXTimestamp, createCollectionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create collection Create collection
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="createCollectionRequest">create a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<Collection>> CreateCollectionWithHttpInfoAsync(string iMXSignature, string iMXTimestamp, CreateCollectionRequest createCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling CollectionsApi->CreateCollection");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling CollectionsApi->CreateCollection");
            }

            // verify the required parameter 'createCollectionRequest' is set
            if (createCollectionRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'createCollectionRequest' when calling CollectionsApi->CreateCollection");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = createCollectionRequest;

            localVarRequestOptions.Operation = "CollectionsApi.CreateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Collection>("/v1/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a collection at the given address Get details of a collection at the given address
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Collection</returns>
        public Collection GetCollection(string address, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<Collection> localVarResponse = GetCollectionWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a collection at the given address Get details of a collection at the given address
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Collection</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<Collection> GetCollectionWithHttpInfo(string address, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'address' when calling CollectionsApi->GetCollection");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(address)); // path parameter

            localVarRequestOptions.Operation = "CollectionsApi.GetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection>("/v1/collections/{address}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a collection at the given address Get details of a collection at the given address
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> GetCollectionAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<Collection> localVarResponse = await GetCollectionWithHttpInfoAsync(address, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a collection at the given address Get details of a collection at the given address
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<Collection>> GetCollectionWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'address' when calling CollectionsApi->GetCollection");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(address)); // path parameter

            localVarRequestOptions.Operation = "CollectionsApi.GetCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Collection>("/v1/collections/{address}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of collection filters Get a list of collection filters
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="nextPageToken">Next page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CollectionFilter</returns>
        public CollectionFilter ListCollectionFilters(string address, int? pageSize = default(int?), string nextPageToken = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<CollectionFilter> localVarResponse = ListCollectionFiltersWithHttpInfo(address, pageSize, nextPageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of collection filters Get a list of collection filters
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="nextPageToken">Next page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CollectionFilter</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<CollectionFilter> ListCollectionFiltersWithHttpInfo(string address, int? pageSize = default(int?), string nextPageToken = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'address' when calling CollectionsApi->ListCollectionFilters");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextPageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "next_page_token", nextPageToken));
            }

            localVarRequestOptions.Operation = "CollectionsApi.ListCollectionFilters";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CollectionFilter>("/v1/collections/{address}/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollectionFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of collection filters Get a list of collection filters
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="nextPageToken">Next page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CollectionFilter</returns>
        public async System.Threading.Tasks.Task<CollectionFilter> ListCollectionFiltersAsync(string address, int? pageSize = default(int?), string nextPageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<CollectionFilter> localVarResponse = await ListCollectionFiltersWithHttpInfoAsync(address, pageSize, nextPageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of collection filters Get a list of collection filters
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="nextPageToken">Next page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CollectionFilter)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<CollectionFilter>> ListCollectionFiltersWithHttpInfoAsync(string address, int? pageSize = default(int?), string nextPageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'address' when calling CollectionsApi->ListCollectionFilters");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (nextPageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "next_page_token", nextPageToken));
            }

            localVarRequestOptions.Operation = "CollectionsApi.ListCollectionFilters";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CollectionFilter>("/v1/collections/{address}/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollectionFilters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of collections Get a list of collections
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="blacklist">List of collections not to be included, separated by commas (optional)</param>
        /// <param name="whitelist">List of collections to be included, separated by commas (optional)</param>
        /// <param name="keyword">Keyword to search in collection name and description (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCollectionsResponse</returns>
        public ListCollectionsResponse ListCollections(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string blacklist = default(string), string whitelist = default(string), string keyword = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<ListCollectionsResponse> localVarResponse = ListCollectionsWithHttpInfo(pageSize, cursor, orderBy, direction, blacklist, whitelist, keyword);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of collections Get a list of collections
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="blacklist">List of collections not to be included, separated by commas (optional)</param>
        /// <param name="whitelist">List of collections to be included, separated by commas (optional)</param>
        /// <param name="keyword">Keyword to search in collection name and description (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCollectionsResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<ListCollectionsResponse> ListCollectionsWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string blacklist = default(string), string whitelist = default(string), string keyword = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (blacklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "blacklist", blacklist));
            }
            if (whitelist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "whitelist", whitelist));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }

            localVarRequestOptions.Operation = "CollectionsApi.ListCollections";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCollectionsResponse>("/v1/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of collections Get a list of collections
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="blacklist">List of collections not to be included, separated by commas (optional)</param>
        /// <param name="whitelist">List of collections to be included, separated by commas (optional)</param>
        /// <param name="keyword">Keyword to search in collection name and description (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCollectionsResponse</returns>
        public async System.Threading.Tasks.Task<ListCollectionsResponse> ListCollectionsAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string blacklist = default(string), string whitelist = default(string), string keyword = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<ListCollectionsResponse> localVarResponse = await ListCollectionsWithHttpInfoAsync(pageSize, cursor, orderBy, direction, blacklist, whitelist, keyword, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of collections Get a list of collections
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="blacklist">List of collections not to be included, separated by commas (optional)</param>
        /// <param name="whitelist">List of collections to be included, separated by commas (optional)</param>
        /// <param name="keyword">Keyword to search in collection name and description (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCollectionsResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<ListCollectionsResponse>> ListCollectionsWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string blacklist = default(string), string whitelist = default(string), string keyword = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (blacklist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "blacklist", blacklist));
            }
            if (whitelist != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "whitelist", whitelist));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }

            localVarRequestOptions.Operation = "CollectionsApi.ListCollections";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCollectionsResponse>("/v1/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update collection Update collection
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="updateCollectionRequest">update a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Collection</returns>
        public Collection UpdateCollection(string address, string iMXSignature, string iMXTimestamp, UpdateCollectionRequest updateCollectionRequest, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<Collection> localVarResponse = UpdateCollectionWithHttpInfo(address, iMXSignature, iMXTimestamp, updateCollectionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update collection Update collection
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="updateCollectionRequest">update a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Collection</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<Collection> UpdateCollectionWithHttpInfo(string address, string iMXSignature, string iMXTimestamp, UpdateCollectionRequest updateCollectionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'address' when calling CollectionsApi->UpdateCollection");
            }

            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling CollectionsApi->UpdateCollection");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling CollectionsApi->UpdateCollection");
            }

            // verify the required parameter 'updateCollectionRequest' is set
            if (updateCollectionRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'updateCollectionRequest' when calling CollectionsApi->UpdateCollection");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = updateCollectionRequest;

            localVarRequestOptions.Operation = "CollectionsApi.UpdateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Collection>("/v1/collections/{address}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update collection Update collection
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="updateCollectionRequest">update a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection</returns>
        public async System.Threading.Tasks.Task<Collection> UpdateCollectionAsync(string address, string iMXSignature, string iMXTimestamp, UpdateCollectionRequest updateCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<Collection> localVarResponse = await UpdateCollectionWithHttpInfoAsync(address, iMXSignature, iMXTimestamp, updateCollectionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update collection Update collection
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Collection contract address</param>
        /// <param name="iMXSignature">String created by signing wallet address and timestamp</param>
        /// <param name="iMXTimestamp">Unix Epoc timestamp</param>
        /// <param name="updateCollectionRequest">update a collection</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Collection)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<Collection>> UpdateCollectionWithHttpInfoAsync(string address, string iMXSignature, string iMXTimestamp, UpdateCollectionRequest updateCollectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'address' when calling CollectionsApi->UpdateCollection");
            }

            // verify the required parameter 'iMXSignature' is set
            if (iMXSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'iMXSignature' when calling CollectionsApi->UpdateCollection");
            }

            // verify the required parameter 'iMXTimestamp' is set
            if (iMXTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'iMXTimestamp' when calling CollectionsApi->UpdateCollection");
            }

            // verify the required parameter 'updateCollectionRequest' is set
            if (updateCollectionRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'updateCollectionRequest' when calling CollectionsApi->UpdateCollection");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(iMXSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("IMX-Timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(iMXTimestamp)); // header parameter
            localVarRequestOptions.Data = updateCollectionRequest;

            localVarRequestOptions.Operation = "CollectionsApi.UpdateCollection";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Collection>("/v1/collections/{address}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCollection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
