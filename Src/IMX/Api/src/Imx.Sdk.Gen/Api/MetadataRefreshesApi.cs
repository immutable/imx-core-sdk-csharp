/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Imx.Sdk.Gen.Client;
using Imx.Sdk.Gen.Model;

namespace Imx.Sdk.Gen.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataRefreshesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of metadata refreshes
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="collectionAddress">Collection address (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetadataRefreshes</returns>
        GetMetadataRefreshes GetAListOfMetadataRefreshes(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), string collectionAddress = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of metadata refreshes
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="collectionAddress">Collection address (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetadataRefreshes</returns>
        ApiResponse<GetMetadataRefreshes> GetAListOfMetadataRefreshesWithHttpInfo(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), string collectionAddress = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get metadata refresh errors
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetadataRefreshErrorsResponse</returns>
        GetMetadataRefreshErrorsResponse GetMetadataRefreshErrors(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get metadata refresh errors
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetadataRefreshErrorsResponse</returns>
        ApiResponse<GetMetadataRefreshErrorsResponse> GetMetadataRefreshErrorsWithHttpInfo(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get metadata refresh results
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetadataRefreshResponse</returns>
        GetMetadataRefreshResponse GetMetadataRefreshResults(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get metadata refresh results
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetadataRefreshResponse</returns>
        ApiResponse<GetMetadataRefreshResponse> GetMetadataRefreshResultsWithHttpInfo(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request metadata refresh for provided tokens
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="createMetadataRefreshRequest">Create metadata refresh request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMetadataRefreshResponse</returns>
        CreateMetadataRefreshResponse RequestAMetadataRefresh(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, CreateMetadataRefreshRequest createMetadataRefreshRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request metadata refresh for provided tokens
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="createMetadataRefreshRequest">Create metadata refresh request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMetadataRefreshResponse</returns>
        ApiResponse<CreateMetadataRefreshResponse> RequestAMetadataRefreshWithHttpInfo(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, CreateMetadataRefreshRequest createMetadataRefreshRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataRefreshesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of metadata refreshes
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="collectionAddress">Collection address (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetadataRefreshes</returns>
        System.Threading.Tasks.Task<GetMetadataRefreshes> GetAListOfMetadataRefreshesAsync(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), string collectionAddress = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of metadata refreshes
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="collectionAddress">Collection address (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetadataRefreshes)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMetadataRefreshes>> GetAListOfMetadataRefreshesWithHttpInfoAsync(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), string collectionAddress = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get metadata refresh errors
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetadataRefreshErrorsResponse</returns>
        System.Threading.Tasks.Task<GetMetadataRefreshErrorsResponse> GetMetadataRefreshErrorsAsync(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get metadata refresh errors
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetadataRefreshErrorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMetadataRefreshErrorsResponse>> GetMetadataRefreshErrorsWithHttpInfoAsync(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get metadata refresh results
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetadataRefreshResponse</returns>
        System.Threading.Tasks.Task<GetMetadataRefreshResponse> GetMetadataRefreshResultsAsync(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get metadata refresh results
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetadataRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMetadataRefreshResponse>> GetMetadataRefreshResultsWithHttpInfoAsync(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request metadata refresh for provided tokens
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="createMetadataRefreshRequest">Create metadata refresh request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMetadataRefreshResponse</returns>
        System.Threading.Tasks.Task<CreateMetadataRefreshResponse> RequestAMetadataRefreshAsync(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, CreateMetadataRefreshRequest createMetadataRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request metadata refresh for provided tokens
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="createMetadataRefreshRequest">Create metadata refresh request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMetadataRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMetadataRefreshResponse>> RequestAMetadataRefreshWithHttpInfoAsync(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, CreateMetadataRefreshRequest createMetadataRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataRefreshesApi : IMetadataRefreshesApiSync, IMetadataRefreshesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataRefreshesApi : IMetadataRefreshesApi
    {
        private Imx.Sdk.Gen.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRefreshesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataRefreshesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRefreshesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataRefreshesApi(string basePath)
        {
            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                new Imx.Sdk.Gen.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRefreshesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetadataRefreshesApi(Imx.Sdk.Gen.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRefreshesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetadataRefreshesApi(Imx.Sdk.Gen.Client.ISynchronousClient client, Imx.Sdk.Gen.Client.IAsynchronousClient asyncClient, Imx.Sdk.Gen.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Imx.Sdk.Gen.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Imx.Sdk.Gen.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get a list of metadata refreshes
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="collectionAddress">Collection address (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetadataRefreshes</returns>
        public GetMetadataRefreshes GetAListOfMetadataRefreshes(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), string collectionAddress = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshes> localVarResponse = GetAListOfMetadataRefreshesWithHttpInfo(xImxEthSignature, xImxEthTimestamp, xImxEthAddress, pageSize, cursor, collectionAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of metadata refreshes
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="collectionAddress">Collection address (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetadataRefreshes</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshes> GetAListOfMetadataRefreshesWithHttpInfo(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), string collectionAddress = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling MetadataRefreshesApi->GetAListOfMetadataRefreshes");
            }

            // verify the required parameter 'xImxEthTimestamp' is set
            if (xImxEthTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthTimestamp' when calling MetadataRefreshesApi->GetAListOfMetadataRefreshes");
            }

            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling MetadataRefreshesApi->GetAListOfMetadataRefreshes");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (collectionAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "collection_address", collectionAddress));
            }
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthTimestamp)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter

            localVarRequestOptions.Operation = "MetadataRefreshesApi.GetAListOfMetadataRefreshes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMetadataRefreshes>("/v1/metadata-refreshes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAListOfMetadataRefreshes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of metadata refreshes
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="collectionAddress">Collection address (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetadataRefreshes</returns>
        public async System.Threading.Tasks.Task<GetMetadataRefreshes> GetAListOfMetadataRefreshesAsync(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), string collectionAddress = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshes> localVarResponse = await GetAListOfMetadataRefreshesWithHttpInfoAsync(xImxEthSignature, xImxEthTimestamp, xImxEthAddress, pageSize, cursor, collectionAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of metadata refreshes
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="collectionAddress">Collection address (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetadataRefreshes)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshes>> GetAListOfMetadataRefreshesWithHttpInfoAsync(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), string collectionAddress = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling MetadataRefreshesApi->GetAListOfMetadataRefreshes");
            }

            // verify the required parameter 'xImxEthTimestamp' is set
            if (xImxEthTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthTimestamp' when calling MetadataRefreshesApi->GetAListOfMetadataRefreshes");
            }

            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling MetadataRefreshesApi->GetAListOfMetadataRefreshes");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (collectionAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "collection_address", collectionAddress));
            }
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthTimestamp)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter

            localVarRequestOptions.Operation = "MetadataRefreshesApi.GetAListOfMetadataRefreshes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMetadataRefreshes>("/v1/metadata-refreshes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAListOfMetadataRefreshes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get metadata refresh errors
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetadataRefreshErrorsResponse</returns>
        public GetMetadataRefreshErrorsResponse GetMetadataRefreshErrors(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshErrorsResponse> localVarResponse = GetMetadataRefreshErrorsWithHttpInfo(refreshId, xImxEthSignature, xImxEthTimestamp, xImxEthAddress, pageSize, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get metadata refresh errors
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetadataRefreshErrorsResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshErrorsResponse> GetMetadataRefreshErrorsWithHttpInfo(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'refreshId' is set
            if (refreshId == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'refreshId' when calling MetadataRefreshesApi->GetMetadataRefreshErrors");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling MetadataRefreshesApi->GetMetadataRefreshErrors");
            }

            // verify the required parameter 'xImxEthTimestamp' is set
            if (xImxEthTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthTimestamp' when calling MetadataRefreshesApi->GetMetadataRefreshErrors");
            }

            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling MetadataRefreshesApi->GetMetadataRefreshErrors");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("refresh_id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(refreshId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthTimestamp)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter

            localVarRequestOptions.Operation = "MetadataRefreshesApi.GetMetadataRefreshErrors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMetadataRefreshErrorsResponse>("/v1/metadata-refreshes/{refresh_id}/errors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataRefreshErrors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get metadata refresh errors
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetadataRefreshErrorsResponse</returns>
        public async System.Threading.Tasks.Task<GetMetadataRefreshErrorsResponse> GetMetadataRefreshErrorsAsync(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshErrorsResponse> localVarResponse = await GetMetadataRefreshErrorsWithHttpInfoAsync(refreshId, xImxEthSignature, xImxEthTimestamp, xImxEthAddress, pageSize, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get metadata refresh errors
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetadataRefreshErrorsResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshErrorsResponse>> GetMetadataRefreshErrorsWithHttpInfoAsync(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int? pageSize = default(int?), string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'refreshId' is set
            if (refreshId == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'refreshId' when calling MetadataRefreshesApi->GetMetadataRefreshErrors");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling MetadataRefreshesApi->GetMetadataRefreshErrors");
            }

            // verify the required parameter 'xImxEthTimestamp' is set
            if (xImxEthTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthTimestamp' when calling MetadataRefreshesApi->GetMetadataRefreshErrors");
            }

            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling MetadataRefreshesApi->GetMetadataRefreshErrors");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("refresh_id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(refreshId)); // path parameter
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthTimestamp)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter

            localVarRequestOptions.Operation = "MetadataRefreshesApi.GetMetadataRefreshErrors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMetadataRefreshErrorsResponse>("/v1/metadata-refreshes/{refresh_id}/errors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataRefreshErrors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get metadata refresh results
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMetadataRefreshResponse</returns>
        public GetMetadataRefreshResponse GetMetadataRefreshResults(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshResponse> localVarResponse = GetMetadataRefreshResultsWithHttpInfo(refreshId, xImxEthSignature, xImxEthTimestamp, xImxEthAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get metadata refresh results
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMetadataRefreshResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshResponse> GetMetadataRefreshResultsWithHttpInfo(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int operationIndex = 0)
        {
            // verify the required parameter 'refreshId' is set
            if (refreshId == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'refreshId' when calling MetadataRefreshesApi->GetMetadataRefreshResults");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling MetadataRefreshesApi->GetMetadataRefreshResults");
            }

            // verify the required parameter 'xImxEthTimestamp' is set
            if (xImxEthTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthTimestamp' when calling MetadataRefreshesApi->GetMetadataRefreshResults");
            }

            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling MetadataRefreshesApi->GetMetadataRefreshResults");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("refresh_id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(refreshId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthTimestamp)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter

            localVarRequestOptions.Operation = "MetadataRefreshesApi.GetMetadataRefreshResults";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMetadataRefreshResponse>("/v1/metadata-refreshes/{refresh_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataRefreshResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get metadata refresh results
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMetadataRefreshResponse</returns>
        public async System.Threading.Tasks.Task<GetMetadataRefreshResponse> GetMetadataRefreshResultsAsync(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshResponse> localVarResponse = await GetMetadataRefreshResultsWithHttpInfoAsync(refreshId, xImxEthSignature, xImxEthTimestamp, xImxEthAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get metadata refresh results
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshId">The metadata refresh ID</param>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMetadataRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<GetMetadataRefreshResponse>> GetMetadataRefreshResultsWithHttpInfoAsync(string refreshId, string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'refreshId' is set
            if (refreshId == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'refreshId' when calling MetadataRefreshesApi->GetMetadataRefreshResults");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling MetadataRefreshesApi->GetMetadataRefreshResults");
            }

            // verify the required parameter 'xImxEthTimestamp' is set
            if (xImxEthTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthTimestamp' when calling MetadataRefreshesApi->GetMetadataRefreshResults");
            }

            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling MetadataRefreshesApi->GetMetadataRefreshResults");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("refresh_id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(refreshId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthTimestamp)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter

            localVarRequestOptions.Operation = "MetadataRefreshesApi.GetMetadataRefreshResults";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMetadataRefreshResponse>("/v1/metadata-refreshes/{refresh_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataRefreshResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request metadata refresh for provided tokens
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="createMetadataRefreshRequest">Create metadata refresh request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMetadataRefreshResponse</returns>
        public CreateMetadataRefreshResponse RequestAMetadataRefresh(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, CreateMetadataRefreshRequest createMetadataRefreshRequest, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<CreateMetadataRefreshResponse> localVarResponse = RequestAMetadataRefreshWithHttpInfo(xImxEthSignature, xImxEthTimestamp, xImxEthAddress, createMetadataRefreshRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request metadata refresh for provided tokens
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="createMetadataRefreshRequest">Create metadata refresh request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMetadataRefreshResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<CreateMetadataRefreshResponse> RequestAMetadataRefreshWithHttpInfo(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, CreateMetadataRefreshRequest createMetadataRefreshRequest, int operationIndex = 0)
        {
            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling MetadataRefreshesApi->RequestAMetadataRefresh");
            }

            // verify the required parameter 'xImxEthTimestamp' is set
            if (xImxEthTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthTimestamp' when calling MetadataRefreshesApi->RequestAMetadataRefresh");
            }

            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling MetadataRefreshesApi->RequestAMetadataRefresh");
            }

            // verify the required parameter 'createMetadataRefreshRequest' is set
            if (createMetadataRefreshRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'createMetadataRefreshRequest' when calling MetadataRefreshesApi->RequestAMetadataRefresh");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthTimestamp)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.Data = createMetadataRefreshRequest;

            localVarRequestOptions.Operation = "MetadataRefreshesApi.RequestAMetadataRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMetadataRefreshResponse>("/v1/metadata-refreshes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestAMetadataRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request metadata refresh for provided tokens
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="createMetadataRefreshRequest">Create metadata refresh request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMetadataRefreshResponse</returns>
        public async System.Threading.Tasks.Task<CreateMetadataRefreshResponse> RequestAMetadataRefreshAsync(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, CreateMetadataRefreshRequest createMetadataRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<CreateMetadataRefreshResponse> localVarResponse = await RequestAMetadataRefreshWithHttpInfoAsync(xImxEthSignature, xImxEthTimestamp, xImxEthAddress, createMetadataRefreshRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request metadata refresh for provided tokens
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthSignature">String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature</param>
        /// <param name="xImxEthTimestamp">Unix Epoc timestamp</param>
        /// <param name="xImxEthAddress">Wallet Address that signed the signature</param>
        /// <param name="createMetadataRefreshRequest">Create metadata refresh request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMetadataRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<CreateMetadataRefreshResponse>> RequestAMetadataRefreshWithHttpInfoAsync(string xImxEthSignature, string xImxEthTimestamp, string xImxEthAddress, CreateMetadataRefreshRequest createMetadataRefreshRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling MetadataRefreshesApi->RequestAMetadataRefresh");
            }

            // verify the required parameter 'xImxEthTimestamp' is set
            if (xImxEthTimestamp == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthTimestamp' when calling MetadataRefreshesApi->RequestAMetadataRefresh");
            }

            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling MetadataRefreshesApi->RequestAMetadataRefresh");
            }

            // verify the required parameter 'createMetadataRefreshRequest' is set
            if (createMetadataRefreshRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'createMetadataRefreshRequest' when calling MetadataRefreshesApi->RequestAMetadataRefresh");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-timestamp", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthTimestamp)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.Data = createMetadataRefreshRequest;

            localVarRequestOptions.Operation = "MetadataRefreshesApi.RequestAMetadataRefresh";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateMetadataRefreshResponse>("/v1/metadata-refreshes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestAMetadataRefresh", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
