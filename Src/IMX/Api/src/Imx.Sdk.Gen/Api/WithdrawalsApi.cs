/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Imx.Sdk.Gen.Client;
using Imx.Sdk.Gen.Model;

namespace Imx.Sdk.Gen.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWithdrawalsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a withdrawal of a token
        /// </summary>
        /// <remarks>
        /// Creates a withdrawal
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createWithdrawalRequest">create a withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWithdrawalResponse</returns>
        CreateWithdrawalResponse CreateWithdrawal(string xImxEthAddress, string xImxEthSignature, CreateWithdrawalRequest createWithdrawalRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a withdrawal of a token
        /// </summary>
        /// <remarks>
        /// Creates a withdrawal
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createWithdrawalRequest">create a withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWithdrawalResponse</returns>
        ApiResponse<CreateWithdrawalResponse> CreateWithdrawalWithHttpInfo(string xImxEthAddress, string xImxEthSignature, CreateWithdrawalRequest createWithdrawalRequest, int operationIndex = 0);
        /// <summary>
        /// Gets details of a signable withdrawal
        /// </summary>
        /// <remarks>
        /// Gets details of a signable withdrawal
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableWithdrawalRequest">get details of signable withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableWithdrawalResponse</returns>
        GetSignableWithdrawalResponse GetSignableWithdrawal(GetSignableWithdrawalRequest getSignableWithdrawalRequest, int operationIndex = 0);

        /// <summary>
        /// Gets details of a signable withdrawal
        /// </summary>
        /// <remarks>
        /// Gets details of a signable withdrawal
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableWithdrawalRequest">get details of signable withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableWithdrawalResponse</returns>
        ApiResponse<GetSignableWithdrawalResponse> GetSignableWithdrawalWithHttpInfo(GetSignableWithdrawalRequest getSignableWithdrawalRequest, int operationIndex = 0);
        /// <summary>
        /// Gets details of withdrawal with the given ID
        /// </summary>
        /// <remarks>
        /// Gets details of withdrawal with the given ID
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Withdrawal ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Withdrawal</returns>
        Withdrawal GetWithdrawal(string id, int operationIndex = 0);

        /// <summary>
        /// Gets details of withdrawal with the given ID
        /// </summary>
        /// <remarks>
        /// Gets details of withdrawal with the given ID
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Withdrawal ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Withdrawal</returns>
        ApiResponse<Withdrawal> GetWithdrawalWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a list of withdrawals
        /// </summary>
        /// <remarks>
        /// Get a list of withdrawals
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawnToWallet">Withdrawal has been transferred to user&#39;s Layer 1 wallet (optional)</param>
        /// <param name="rollupStatus">Status of the on-chain batch confirmation for this withdrawal (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this withdrawal (optional)</param>
        /// <param name="status">Status of this withdrawal (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the withdrawn asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the withdrawn asset (optional)</param>
        /// <param name="tokenName">Token name of the withdrawn asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the withdrawn asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the withdrawn asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the withdrawn asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWithdrawalsResponse</returns>
        ListWithdrawalsResponse ListWithdrawals(bool? withdrawnToWallet = default(bool?), string rollupStatus = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of withdrawals
        /// </summary>
        /// <remarks>
        /// Get a list of withdrawals
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawnToWallet">Withdrawal has been transferred to user&#39;s Layer 1 wallet (optional)</param>
        /// <param name="rollupStatus">Status of the on-chain batch confirmation for this withdrawal (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this withdrawal (optional)</param>
        /// <param name="status">Status of this withdrawal (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the withdrawn asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the withdrawn asset (optional)</param>
        /// <param name="tokenName">Token name of the withdrawn asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the withdrawn asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the withdrawn asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the withdrawn asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWithdrawalsResponse</returns>
        ApiResponse<ListWithdrawalsResponse> ListWithdrawalsWithHttpInfo(bool? withdrawnToWallet = default(bool?), string rollupStatus = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWithdrawalsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a withdrawal of a token
        /// </summary>
        /// <remarks>
        /// Creates a withdrawal
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createWithdrawalRequest">create a withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWithdrawalResponse</returns>
        System.Threading.Tasks.Task<CreateWithdrawalResponse> CreateWithdrawalAsync(string xImxEthAddress, string xImxEthSignature, CreateWithdrawalRequest createWithdrawalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a withdrawal of a token
        /// </summary>
        /// <remarks>
        /// Creates a withdrawal
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createWithdrawalRequest">create a withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWithdrawalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWithdrawalResponse>> CreateWithdrawalWithHttpInfoAsync(string xImxEthAddress, string xImxEthSignature, CreateWithdrawalRequest createWithdrawalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets details of a signable withdrawal
        /// </summary>
        /// <remarks>
        /// Gets details of a signable withdrawal
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableWithdrawalRequest">get details of signable withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableWithdrawalResponse</returns>
        System.Threading.Tasks.Task<GetSignableWithdrawalResponse> GetSignableWithdrawalAsync(GetSignableWithdrawalRequest getSignableWithdrawalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets details of a signable withdrawal
        /// </summary>
        /// <remarks>
        /// Gets details of a signable withdrawal
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableWithdrawalRequest">get details of signable withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableWithdrawalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSignableWithdrawalResponse>> GetSignableWithdrawalWithHttpInfoAsync(GetSignableWithdrawalRequest getSignableWithdrawalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets details of withdrawal with the given ID
        /// </summary>
        /// <remarks>
        /// Gets details of withdrawal with the given ID
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Withdrawal ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Withdrawal</returns>
        System.Threading.Tasks.Task<Withdrawal> GetWithdrawalAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets details of withdrawal with the given ID
        /// </summary>
        /// <remarks>
        /// Gets details of withdrawal with the given ID
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Withdrawal ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Withdrawal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Withdrawal>> GetWithdrawalWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of withdrawals
        /// </summary>
        /// <remarks>
        /// Get a list of withdrawals
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawnToWallet">Withdrawal has been transferred to user&#39;s Layer 1 wallet (optional)</param>
        /// <param name="rollupStatus">Status of the on-chain batch confirmation for this withdrawal (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this withdrawal (optional)</param>
        /// <param name="status">Status of this withdrawal (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the withdrawn asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the withdrawn asset (optional)</param>
        /// <param name="tokenName">Token name of the withdrawn asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the withdrawn asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the withdrawn asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the withdrawn asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWithdrawalsResponse</returns>
        System.Threading.Tasks.Task<ListWithdrawalsResponse> ListWithdrawalsAsync(bool? withdrawnToWallet = default(bool?), string rollupStatus = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of withdrawals
        /// </summary>
        /// <remarks>
        /// Get a list of withdrawals
        /// </remarks>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawnToWallet">Withdrawal has been transferred to user&#39;s Layer 1 wallet (optional)</param>
        /// <param name="rollupStatus">Status of the on-chain batch confirmation for this withdrawal (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this withdrawal (optional)</param>
        /// <param name="status">Status of this withdrawal (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the withdrawn asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the withdrawn asset (optional)</param>
        /// <param name="tokenName">Token name of the withdrawn asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the withdrawn asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the withdrawn asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the withdrawn asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWithdrawalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListWithdrawalsResponse>> ListWithdrawalsWithHttpInfoAsync(bool? withdrawnToWallet = default(bool?), string rollupStatus = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWithdrawalsApi : IWithdrawalsApiSync, IWithdrawalsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WithdrawalsApi : IWithdrawalsApi
    {
        private Imx.Sdk.Gen.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WithdrawalsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WithdrawalsApi(string basePath)
        {
            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                new Imx.Sdk.Gen.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WithdrawalsApi(Imx.Sdk.Gen.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Imx.Sdk.Gen.Client.Configuration.MergeConfigurations(
                Imx.Sdk.Gen.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Imx.Sdk.Gen.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawalsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WithdrawalsApi(Imx.Sdk.Gen.Client.ISynchronousClient client, Imx.Sdk.Gen.Client.IAsynchronousClient asyncClient, Imx.Sdk.Gen.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Imx.Sdk.Gen.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Imx.Sdk.Gen.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Imx.Sdk.Gen.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Imx.Sdk.Gen.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a withdrawal of a token Creates a withdrawal
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createWithdrawalRequest">create a withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWithdrawalResponse</returns>
        public CreateWithdrawalResponse CreateWithdrawal(string xImxEthAddress, string xImxEthSignature, CreateWithdrawalRequest createWithdrawalRequest, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<CreateWithdrawalResponse> localVarResponse = CreateWithdrawalWithHttpInfo(xImxEthAddress, xImxEthSignature, createWithdrawalRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a withdrawal of a token Creates a withdrawal
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createWithdrawalRequest">create a withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWithdrawalResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<CreateWithdrawalResponse> CreateWithdrawalWithHttpInfo(string xImxEthAddress, string xImxEthSignature, CreateWithdrawalRequest createWithdrawalRequest, int operationIndex = 0)
        {
            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling WithdrawalsApi->CreateWithdrawal");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling WithdrawalsApi->CreateWithdrawal");
            }

            // verify the required parameter 'createWithdrawalRequest' is set
            if (createWithdrawalRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'createWithdrawalRequest' when calling WithdrawalsApi->CreateWithdrawal");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.Data = createWithdrawalRequest;

            localVarRequestOptions.Operation = "WithdrawalsApi.CreateWithdrawal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWithdrawalResponse>("/v1/withdrawals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWithdrawal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a withdrawal of a token Creates a withdrawal
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createWithdrawalRequest">create a withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWithdrawalResponse</returns>
        public async System.Threading.Tasks.Task<CreateWithdrawalResponse> CreateWithdrawalAsync(string xImxEthAddress, string xImxEthSignature, CreateWithdrawalRequest createWithdrawalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<CreateWithdrawalResponse> localVarResponse = await CreateWithdrawalWithHttpInfoAsync(xImxEthAddress, xImxEthSignature, createWithdrawalRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a withdrawal of a token Creates a withdrawal
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createWithdrawalRequest">create a withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWithdrawalResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<CreateWithdrawalResponse>> CreateWithdrawalWithHttpInfoAsync(string xImxEthAddress, string xImxEthSignature, CreateWithdrawalRequest createWithdrawalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling WithdrawalsApi->CreateWithdrawal");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling WithdrawalsApi->CreateWithdrawal");
            }

            // verify the required parameter 'createWithdrawalRequest' is set
            if (createWithdrawalRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'createWithdrawalRequest' when calling WithdrawalsApi->CreateWithdrawal");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.Data = createWithdrawalRequest;

            localVarRequestOptions.Operation = "WithdrawalsApi.CreateWithdrawal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWithdrawalResponse>("/v1/withdrawals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWithdrawal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets details of a signable withdrawal Gets details of a signable withdrawal
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableWithdrawalRequest">get details of signable withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableWithdrawalResponse</returns>
        public GetSignableWithdrawalResponse GetSignableWithdrawal(GetSignableWithdrawalRequest getSignableWithdrawalRequest, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetSignableWithdrawalResponse> localVarResponse = GetSignableWithdrawalWithHttpInfo(getSignableWithdrawalRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets details of a signable withdrawal Gets details of a signable withdrawal
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableWithdrawalRequest">get details of signable withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableWithdrawalResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<GetSignableWithdrawalResponse> GetSignableWithdrawalWithHttpInfo(GetSignableWithdrawalRequest getSignableWithdrawalRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSignableWithdrawalRequest' is set
            if (getSignableWithdrawalRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'getSignableWithdrawalRequest' when calling WithdrawalsApi->GetSignableWithdrawal");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.Data = getSignableWithdrawalRequest;

            localVarRequestOptions.Operation = "WithdrawalsApi.GetSignableWithdrawal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSignableWithdrawalResponse>("/v1/signable-withdrawal-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableWithdrawal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets details of a signable withdrawal Gets details of a signable withdrawal
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableWithdrawalRequest">get details of signable withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableWithdrawalResponse</returns>
        public async System.Threading.Tasks.Task<GetSignableWithdrawalResponse> GetSignableWithdrawalAsync(GetSignableWithdrawalRequest getSignableWithdrawalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<GetSignableWithdrawalResponse> localVarResponse = await GetSignableWithdrawalWithHttpInfoAsync(getSignableWithdrawalRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets details of a signable withdrawal Gets details of a signable withdrawal
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableWithdrawalRequest">get details of signable withdrawal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableWithdrawalResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<GetSignableWithdrawalResponse>> GetSignableWithdrawalWithHttpInfoAsync(GetSignableWithdrawalRequest getSignableWithdrawalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSignableWithdrawalRequest' is set
            if (getSignableWithdrawalRequest == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'getSignableWithdrawalRequest' when calling WithdrawalsApi->GetSignableWithdrawal");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableWithdrawalRequest;

            localVarRequestOptions.Operation = "WithdrawalsApi.GetSignableWithdrawal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSignableWithdrawalResponse>("/v1/signable-withdrawal-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableWithdrawal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets details of withdrawal with the given ID Gets details of withdrawal with the given ID
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Withdrawal ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Withdrawal</returns>
        public Withdrawal GetWithdrawal(string id, int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<Withdrawal> localVarResponse = GetWithdrawalWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets details of withdrawal with the given ID Gets details of withdrawal with the given ID
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Withdrawal ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Withdrawal</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<Withdrawal> GetWithdrawalWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'id' when calling WithdrawalsApi->GetWithdrawal");
            }

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WithdrawalsApi.GetWithdrawal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Withdrawal>("/v1/withdrawals/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWithdrawal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets details of withdrawal with the given ID Gets details of withdrawal with the given ID
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Withdrawal ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Withdrawal</returns>
        public async System.Threading.Tasks.Task<Withdrawal> GetWithdrawalAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<Withdrawal> localVarResponse = await GetWithdrawalWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets details of withdrawal with the given ID Gets details of withdrawal with the given ID
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Withdrawal ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Withdrawal)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<Withdrawal>> GetWithdrawalWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Imx.Sdk.Gen.Client.ApiException(400, "Missing required parameter 'id' when calling WithdrawalsApi->GetWithdrawal");
            }


            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Imx.Sdk.Gen.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WithdrawalsApi.GetWithdrawal";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Withdrawal>("/v1/withdrawals/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWithdrawal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of withdrawals Get a list of withdrawals
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawnToWallet">Withdrawal has been transferred to user&#39;s Layer 1 wallet (optional)</param>
        /// <param name="rollupStatus">Status of the on-chain batch confirmation for this withdrawal (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this withdrawal (optional)</param>
        /// <param name="status">Status of this withdrawal (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the withdrawn asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the withdrawn asset (optional)</param>
        /// <param name="tokenName">Token name of the withdrawn asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the withdrawn asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the withdrawn asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the withdrawn asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWithdrawalsResponse</returns>
        public ListWithdrawalsResponse ListWithdrawals(bool? withdrawnToWallet = default(bool?), string rollupStatus = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.ApiResponse<ListWithdrawalsResponse> localVarResponse = ListWithdrawalsWithHttpInfo(withdrawnToWallet, rollupStatus, pageSize, cursor, orderBy, direction, user, status, minTimestamp, maxTimestamp, tokenType, tokenId, assetId, tokenAddress, tokenName, minQuantity, maxQuantity, metadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of withdrawals Get a list of withdrawals
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawnToWallet">Withdrawal has been transferred to user&#39;s Layer 1 wallet (optional)</param>
        /// <param name="rollupStatus">Status of the on-chain batch confirmation for this withdrawal (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this withdrawal (optional)</param>
        /// <param name="status">Status of this withdrawal (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the withdrawn asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the withdrawn asset (optional)</param>
        /// <param name="tokenName">Token name of the withdrawn asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the withdrawn asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the withdrawn asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the withdrawn asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWithdrawalsResponse</returns>
        public Imx.Sdk.Gen.Client.ApiResponse<ListWithdrawalsResponse> ListWithdrawalsWithHttpInfo(bool? withdrawnToWallet = default(bool?), string rollupStatus = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0)
        {
            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            if (withdrawnToWallet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "withdrawn_to_wallet", withdrawnToWallet));
            }
            if (rollupStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "rollup_status", rollupStatus));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (minTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "min_timestamp", minTimestamp));
            }
            if (maxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "max_timestamp", maxTimestamp));
            }
            if (tokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "token_type", tokenType));
            }
            if (tokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "token_id", tokenId));
            }
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            if (tokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "token_address", tokenAddress));
            }
            if (tokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "token_name", tokenName));
            }
            if (minQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "min_quantity", minQuantity));
            }
            if (maxQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "max_quantity", maxQuantity));
            }
            if (metadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "metadata", metadata));
            }

            localVarRequestOptions.Operation = "WithdrawalsApi.ListWithdrawals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListWithdrawalsResponse>("/v1/withdrawals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of withdrawals Get a list of withdrawals
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawnToWallet">Withdrawal has been transferred to user&#39;s Layer 1 wallet (optional)</param>
        /// <param name="rollupStatus">Status of the on-chain batch confirmation for this withdrawal (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this withdrawal (optional)</param>
        /// <param name="status">Status of this withdrawal (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the withdrawn asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the withdrawn asset (optional)</param>
        /// <param name="tokenName">Token name of the withdrawn asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the withdrawn asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the withdrawn asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the withdrawn asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWithdrawalsResponse</returns>
        public async System.Threading.Tasks.Task<ListWithdrawalsResponse> ListWithdrawalsAsync(bool? withdrawnToWallet = default(bool?), string rollupStatus = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Imx.Sdk.Gen.Client.ApiResponse<ListWithdrawalsResponse> localVarResponse = await ListWithdrawalsWithHttpInfoAsync(withdrawnToWallet, rollupStatus, pageSize, cursor, orderBy, direction, user, status, minTimestamp, maxTimestamp, tokenType, tokenId, assetId, tokenAddress, tokenName, minQuantity, maxQuantity, metadata, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of withdrawals Get a list of withdrawals
        /// </summary>
        /// <exception cref="Imx.Sdk.Gen.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withdrawnToWallet">Withdrawal has been transferred to user&#39;s Layer 1 wallet (optional)</param>
        /// <param name="rollupStatus">Status of the on-chain batch confirmation for this withdrawal (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this withdrawal (optional)</param>
        /// <param name="status">Status of this withdrawal (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the withdrawn asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the withdrawn asset (optional)</param>
        /// <param name="tokenName">Token name of the withdrawn asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the withdrawn asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the withdrawn asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the withdrawn asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWithdrawalsResponse)</returns>
        public async System.Threading.Tasks.Task<Imx.Sdk.Gen.Client.ApiResponse<ListWithdrawalsResponse>> ListWithdrawalsWithHttpInfoAsync(bool? withdrawnToWallet = default(bool?), string rollupStatus = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Imx.Sdk.Gen.Client.RequestOptions localVarRequestOptions = new Imx.Sdk.Gen.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Imx.Sdk.Gen.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (withdrawnToWallet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "withdrawn_to_wallet", withdrawnToWallet));
            }
            if (rollupStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "rollup_status", rollupStatus));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (minTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "min_timestamp", minTimestamp));
            }
            if (maxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "max_timestamp", maxTimestamp));
            }
            if (tokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "token_type", tokenType));
            }
            if (tokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "token_id", tokenId));
            }
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            if (tokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "token_address", tokenAddress));
            }
            if (tokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "token_name", tokenName));
            }
            if (minQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "min_quantity", minQuantity));
            }
            if (maxQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "max_quantity", maxQuantity));
            }
            if (metadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Imx.Sdk.Gen.Client.ClientUtils.ParameterToMultiMap("", "metadata", metadata));
            }

            localVarRequestOptions.Operation = "WithdrawalsApi.ListWithdrawals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListWithdrawalsResponse>("/v1/withdrawals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
