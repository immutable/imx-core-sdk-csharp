/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// OptionalExchangeData
    /// </summary>
    [DataContract(Name = "OptionalExchangeData")]
    public partial class OptionalExchangeData : IEquatable<OptionalExchangeData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionalExchangeData" /> class.
        /// </summary>
        /// <param name="externalId">Provider transaction ID.</param>
        /// <param name="feesAmount">Fees amount.</param>
        /// <param name="fromAmount">Amount that was exchanged from.</param>
        /// <param name="fromCurrency">Currency that was exchanged from.</param>
        /// <param name="providerWalletAddress">Provider wallet address that was used for transferring crypto.</param>
        /// <param name="toAmount">Amount that was exchanged to.</param>
        /// <param name="toCurrency">Currency that was exchanged to.</param>
        /// <param name="transferId">Transfer ID.</param>
        public OptionalExchangeData(string externalId = default(string), decimal feesAmount = default(decimal), decimal fromAmount = default(decimal), string fromCurrency = default(string), string providerWalletAddress = default(string), decimal toAmount = default(decimal), string toCurrency = default(string), string transferId = default(string))
        {
            this.ExternalId = externalId;
            this.FeesAmount = feesAmount;
            this.FromAmount = fromAmount;
            this.FromCurrency = fromCurrency;
            this.ProviderWalletAddress = providerWalletAddress;
            this.ToAmount = toAmount;
            this.ToCurrency = toCurrency;
            this.TransferId = transferId;
        }

        /// <summary>
        /// Provider transaction ID
        /// </summary>
        /// <value>Provider transaction ID</value>
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Fees amount
        /// </summary>
        /// <value>Fees amount</value>
        [DataMember(Name = "fees_amount", EmitDefaultValue = false)]
        public decimal FeesAmount { get; set; }

        /// <summary>
        /// Amount that was exchanged from
        /// </summary>
        /// <value>Amount that was exchanged from</value>
        [DataMember(Name = "from_amount", EmitDefaultValue = false)]
        public decimal FromAmount { get; set; }

        /// <summary>
        /// Currency that was exchanged from
        /// </summary>
        /// <value>Currency that was exchanged from</value>
        [DataMember(Name = "from_currency", EmitDefaultValue = false)]
        public string FromCurrency { get; set; }

        /// <summary>
        /// Provider wallet address that was used for transferring crypto
        /// </summary>
        /// <value>Provider wallet address that was used for transferring crypto</value>
        [DataMember(Name = "provider_wallet_address", EmitDefaultValue = false)]
        public string ProviderWalletAddress { get; set; }

        /// <summary>
        /// Amount that was exchanged to
        /// </summary>
        /// <value>Amount that was exchanged to</value>
        [DataMember(Name = "to_amount", EmitDefaultValue = false)]
        public decimal ToAmount { get; set; }

        /// <summary>
        /// Currency that was exchanged to
        /// </summary>
        /// <value>Currency that was exchanged to</value>
        [DataMember(Name = "to_currency", EmitDefaultValue = false)]
        public string ToCurrency { get; set; }

        /// <summary>
        /// Transfer ID
        /// </summary>
        /// <value>Transfer ID</value>
        [DataMember(Name = "transfer_id", EmitDefaultValue = false)]
        public string TransferId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionalExchangeData {\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  FeesAmount: ").Append(FeesAmount).Append("\n");
            sb.Append("  FromAmount: ").Append(FromAmount).Append("\n");
            sb.Append("  FromCurrency: ").Append(FromCurrency).Append("\n");
            sb.Append("  ProviderWalletAddress: ").Append(ProviderWalletAddress).Append("\n");
            sb.Append("  ToAmount: ").Append(ToAmount).Append("\n");
            sb.Append("  ToCurrency: ").Append(ToCurrency).Append("\n");
            sb.Append("  TransferId: ").Append(TransferId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionalExchangeData);
        }

        /// <summary>
        /// Returns true if OptionalExchangeData instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionalExchangeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionalExchangeData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.FeesAmount == input.FeesAmount ||
                    this.FeesAmount.Equals(input.FeesAmount)
                ) && 
                (
                    this.FromAmount == input.FromAmount ||
                    this.FromAmount.Equals(input.FromAmount)
                ) && 
                (
                    this.FromCurrency == input.FromCurrency ||
                    (this.FromCurrency != null &&
                    this.FromCurrency.Equals(input.FromCurrency))
                ) && 
                (
                    this.ProviderWalletAddress == input.ProviderWalletAddress ||
                    (this.ProviderWalletAddress != null &&
                    this.ProviderWalletAddress.Equals(input.ProviderWalletAddress))
                ) && 
                (
                    this.ToAmount == input.ToAmount ||
                    this.ToAmount.Equals(input.ToAmount)
                ) && 
                (
                    this.ToCurrency == input.ToCurrency ||
                    (this.ToCurrency != null &&
                    this.ToCurrency.Equals(input.ToCurrency))
                ) && 
                (
                    this.TransferId == input.TransferId ||
                    (this.TransferId != null &&
                    this.TransferId.Equals(input.TransferId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FeesAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.FromAmount.GetHashCode();
                if (this.FromCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.FromCurrency.GetHashCode();
                }
                if (this.ProviderWalletAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderWalletAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ToAmount.GetHashCode();
                if (this.ToCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.ToCurrency.GetHashCode();
                }
                if (this.TransferId != null)
                {
                    hashCode = (hashCode * 59) + this.TransferId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
