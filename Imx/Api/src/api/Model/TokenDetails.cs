/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// TokenDetails
    /// </summary>
    [DataContract(Name = "TokenDetails")]
    public partial class TokenDetails : IEquatable<TokenDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenDetails" /> class.
        /// </summary>
        /// <param name="decimals">Number of decimals for token (required).</param>
        /// <param name="imageUrl">Url for the icon of the token (required).</param>
        /// <param name="name">Full name of the token (e.g. Ether) (required).</param>
        /// <param name="quantum">Quantum for token (required).</param>
        /// <param name="symbol">Ticker symbol for token (e.g. ETH/USDC/IMX) (required).</param>
        /// <param name="tokenAddress">Address of the ERC721 contract (required).</param>
        public TokenDetails(string decimals = default(string), string imageUrl = default(string), string name = default(string), string quantum = default(string), string symbol = default(string), string tokenAddress = default(string))
        {
            // to ensure "decimals" is required (not null)
            if (decimals == null)
            {
                throw new ArgumentNullException("decimals is a required property for TokenDetails and cannot be null");
            }
            this.Decimals = decimals;
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null)
            {
                throw new ArgumentNullException("imageUrl is a required property for TokenDetails and cannot be null");
            }
            this.ImageUrl = imageUrl;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TokenDetails and cannot be null");
            }
            this.Name = name;
            // to ensure "quantum" is required (not null)
            if (quantum == null)
            {
                throw new ArgumentNullException("quantum is a required property for TokenDetails and cannot be null");
            }
            this.Quantum = quantum;
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for TokenDetails and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "tokenAddress" is required (not null)
            if (tokenAddress == null)
            {
                throw new ArgumentNullException("tokenAddress is a required property for TokenDetails and cannot be null");
            }
            this.TokenAddress = tokenAddress;
        }

        /// <summary>
        /// Number of decimals for token
        /// </summary>
        /// <value>Number of decimals for token</value>
        [DataMember(Name = "decimals", IsRequired = true, EmitDefaultValue = true)]
        public string Decimals { get; set; }

        /// <summary>
        /// Url for the icon of the token
        /// </summary>
        /// <value>Url for the icon of the token</value>
        [DataMember(Name = "image_url", IsRequired = true, EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Full name of the token (e.g. Ether)
        /// </summary>
        /// <value>Full name of the token (e.g. Ether)</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Quantum for token
        /// </summary>
        /// <value>Quantum for token</value>
        [DataMember(Name = "quantum", IsRequired = true, EmitDefaultValue = true)]
        public string Quantum { get; set; }

        /// <summary>
        /// Ticker symbol for token (e.g. ETH/USDC/IMX)
        /// </summary>
        /// <value>Ticker symbol for token (e.g. ETH/USDC/IMX)</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// Address of the ERC721 contract
        /// </summary>
        /// <value>Address of the ERC721 contract</value>
        [DataMember(Name = "token_address", IsRequired = true, EmitDefaultValue = true)]
        public string TokenAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenDetails {\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Quantum: ").Append(Quantum).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenDetails);
        }

        /// <summary>
        /// Returns true if TokenDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Decimals == input.Decimals ||
                    (this.Decimals != null &&
                    this.Decimals.Equals(input.Decimals))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Quantum == input.Quantum ||
                    (this.Quantum != null &&
                    this.Quantum.Equals(input.Quantum))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.TokenAddress == input.TokenAddress ||
                    (this.TokenAddress != null &&
                    this.TokenAddress.Equals(input.TokenAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Decimals != null)
                {
                    hashCode = (hashCode * 59) + this.Decimals.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Quantum != null)
                {
                    hashCode = (hashCode * 59) + this.Quantum.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.TokenAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
