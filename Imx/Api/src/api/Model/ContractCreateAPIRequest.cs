/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// ContractCreateAPIRequest
    /// </summary>
    [DataContract(Name = "contract.CreateAPIRequest")]
    public partial class ContractCreateAPIRequest : IEquatable<ContractCreateAPIRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractCreateAPIRequest" /> class.
        /// </summary>
        /// <param name="contractAddress">contractAddress.</param>
        /// <param name="dataUrl">dataUrl.</param>
        /// <param name="mintUrl">mintUrl.</param>
        public ContractCreateAPIRequest(string contractAddress = default(string), string dataUrl = default(string), string mintUrl = default(string))
        {
            this.ContractAddress = contractAddress;
            this.DataUrl = dataUrl;
            this.MintUrl = mintUrl;
        }

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [DataMember(Name = "contract_address", EmitDefaultValue = false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets DataUrl
        /// </summary>
        [DataMember(Name = "data_url", EmitDefaultValue = false)]
        public string DataUrl { get; set; }

        /// <summary>
        /// Gets or Sets MintUrl
        /// </summary>
        [DataMember(Name = "mint_url", EmitDefaultValue = false)]
        public string MintUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractCreateAPIRequest {\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  DataUrl: ").Append(DataUrl).Append("\n");
            sb.Append("  MintUrl: ").Append(MintUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractCreateAPIRequest);
        }

        /// <summary>
        /// Returns true if ContractCreateAPIRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractCreateAPIRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractCreateAPIRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.DataUrl == input.DataUrl ||
                    (this.DataUrl != null &&
                    this.DataUrl.Equals(input.DataUrl))
                ) && 
                (
                    this.MintUrl == input.MintUrl ||
                    (this.MintUrl != null &&
                    this.MintUrl.Equals(input.MintUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.DataUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DataUrl.GetHashCode();
                }
                if (this.MintUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MintUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
