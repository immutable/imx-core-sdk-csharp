/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = api.Client.OpenAPIDateConverter;

namespace api.Model
{
    /// <summary>
    /// WidgetParams
    /// </summary>
    [DataContract(Name = "WidgetParams")]
    public partial class WidgetParams : IEquatable<WidgetParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WidgetParams" /> class.
        /// </summary>
        /// <param name="amount">Amount that will be prefilled in the widget.</param>
        /// <param name="supportedCurrencies">Currencies that will be available in the widget. If not defined all available currencies will be shown.</param>
        /// <param name="theme">Widget theme dark by default.</param>
        public WidgetParams(string amount = default(string), List<string> supportedCurrencies = default(List<string>), string theme = default(string))
        {
            this.Amount = amount;
            this.SupportedCurrencies = supportedCurrencies;
            this.Theme = theme;
        }

        /// <summary>
        /// Amount that will be prefilled in the widget
        /// </summary>
        /// <value>Amount that will be prefilled in the widget</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Currencies that will be available in the widget. If not defined all available currencies will be shown
        /// </summary>
        /// <value>Currencies that will be available in the widget. If not defined all available currencies will be shown</value>
        [DataMember(Name = "supported_currencies", EmitDefaultValue = false)]
        public List<string> SupportedCurrencies { get; set; }

        /// <summary>
        /// Widget theme dark by default
        /// </summary>
        /// <value>Widget theme dark by default</value>
        [DataMember(Name = "theme", EmitDefaultValue = false)]
        public string Theme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WidgetParams {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SupportedCurrencies: ").Append(SupportedCurrencies).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WidgetParams);
        }

        /// <summary>
        /// Returns true if WidgetParams instances are equal
        /// </summary>
        /// <param name="input">Instance of WidgetParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.SupportedCurrencies == input.SupportedCurrencies ||
                    this.SupportedCurrencies != null &&
                    input.SupportedCurrencies != null &&
                    this.SupportedCurrencies.SequenceEqual(input.SupportedCurrencies)
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.SupportedCurrencies != null)
                {
                    hashCode = (hashCode * 59) + this.SupportedCurrencies.GetHashCode();
                }
                if (this.Theme != null)
                {
                    hashCode = (hashCode * 59) + this.Theme.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
