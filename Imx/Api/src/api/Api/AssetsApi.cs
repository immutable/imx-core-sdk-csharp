/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using api.Client;
using api.Model;

namespace api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get details of an asset
        /// </summary>
        /// <remarks>
        /// Get details of an asset
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenAddress">Address of the ERC721 contract</param>
        /// <param name="tokenId">Either ERC721 token ID or internal IMX ID</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Asset</returns>
        Asset GetAsset(string tokenAddress, string tokenId, bool? includeFees = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get details of an asset
        /// </summary>
        /// <remarks>
        /// Get details of an asset
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenAddress">Address of the ERC721 contract</param>
        /// <param name="tokenId">Either ERC721 token ID or internal IMX ID</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Asset</returns>
        ApiResponse<Asset> GetAssetWithHttpInfo(string tokenAddress, string tokenId, bool? includeFees = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get a list of assets
        /// </summary>
        /// <remarks>
        /// Get a list of assets
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who owns these assets (optional)</param>
        /// <param name="status">Status of these assets (optional)</param>
        /// <param name="name">Name of the asset to search (optional)</param>
        /// <param name="metadata">URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]})) (optional)</param>
        /// <param name="sellOrders">Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)</param>
        /// <param name="buyOrders">Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="collection">Collection contract address (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAssetsResponse</returns>
        ListAssetsResponse ListAssets(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string name = default(string), string metadata = default(string), bool? sellOrders = default(bool?), bool? buyOrders = default(bool?), bool? includeFees = default(bool?), string collection = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of assets
        /// </summary>
        /// <remarks>
        /// Get a list of assets
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who owns these assets (optional)</param>
        /// <param name="status">Status of these assets (optional)</param>
        /// <param name="name">Name of the asset to search (optional)</param>
        /// <param name="metadata">URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]})) (optional)</param>
        /// <param name="sellOrders">Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)</param>
        /// <param name="buyOrders">Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="collection">Collection contract address (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAssetsResponse</returns>
        ApiResponse<ListAssetsResponse> ListAssetsWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string name = default(string), string metadata = default(string), bool? sellOrders = default(bool?), bool? buyOrders = default(bool?), bool? includeFees = default(bool?), string collection = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get details of an asset
        /// </summary>
        /// <remarks>
        /// Get details of an asset
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenAddress">Address of the ERC721 contract</param>
        /// <param name="tokenId">Either ERC721 token ID or internal IMX ID</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> GetAssetAsync(string tokenAddress, string tokenId, bool? includeFees = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of an asset
        /// </summary>
        /// <remarks>
        /// Get details of an asset
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenAddress">Address of the ERC721 contract</param>
        /// <param name="tokenId">Either ERC721 token ID or internal IMX ID</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetWithHttpInfoAsync(string tokenAddress, string tokenId, bool? includeFees = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of assets
        /// </summary>
        /// <remarks>
        /// Get a list of assets
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who owns these assets (optional)</param>
        /// <param name="status">Status of these assets (optional)</param>
        /// <param name="name">Name of the asset to search (optional)</param>
        /// <param name="metadata">URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]})) (optional)</param>
        /// <param name="sellOrders">Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)</param>
        /// <param name="buyOrders">Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="collection">Collection contract address (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAssetsResponse</returns>
        System.Threading.Tasks.Task<ListAssetsResponse> ListAssetsAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string name = default(string), string metadata = default(string), bool? sellOrders = default(bool?), bool? buyOrders = default(bool?), bool? includeFees = default(bool?), string collection = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of assets
        /// </summary>
        /// <remarks>
        /// Get a list of assets
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who owns these assets (optional)</param>
        /// <param name="status">Status of these assets (optional)</param>
        /// <param name="name">Name of the asset to search (optional)</param>
        /// <param name="metadata">URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]})) (optional)</param>
        /// <param name="sellOrders">Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)</param>
        /// <param name="buyOrders">Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="collection">Collection contract address (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAssetsResponse>> ListAssetsWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string name = default(string), string metadata = default(string), bool? sellOrders = default(bool?), bool? buyOrders = default(bool?), bool? includeFees = default(bool?), string collection = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IAssetsApi
    {
        private api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                new api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetsApi(api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetsApi(api.Client.ISynchronousClient client, api.Client.IAsynchronousClient asyncClient, api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get details of an asset Get details of an asset
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenAddress">Address of the ERC721 contract</param>
        /// <param name="tokenId">Either ERC721 token ID or internal IMX ID</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Asset</returns>
        public Asset GetAsset(string tokenAddress, string tokenId, bool? includeFees = default(bool?), int operationIndex = 0)
        {
            api.Client.ApiResponse<Asset> localVarResponse = GetAssetWithHttpInfo(tokenAddress, tokenId, includeFees);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an asset Get details of an asset
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenAddress">Address of the ERC721 contract</param>
        /// <param name="tokenId">Either ERC721 token ID or internal IMX ID</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Asset</returns>
        public api.Client.ApiResponse<Asset> GetAssetWithHttpInfo(string tokenAddress, string tokenId, bool? includeFees = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'tokenAddress' is set
            if (tokenAddress == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'tokenAddress' when calling AssetsApi->GetAsset");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'tokenId' when calling AssetsApi->GetAsset");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("token_address", api.Client.ClientUtils.ParameterToString(tokenAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", api.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (includeFees != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "include_fees", includeFees));
            }

            localVarRequestOptions.Operation = "AssetsApi.GetAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Asset>("/v1/assets/{token_address}/{token_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of an asset Get details of an asset
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenAddress">Address of the ERC721 contract</param>
        /// <param name="tokenId">Either ERC721 token ID or internal IMX ID</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> GetAssetAsync(string tokenAddress, string tokenId, bool? includeFees = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<Asset> localVarResponse = await GetAssetWithHttpInfoAsync(tokenAddress, tokenId, includeFees, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an asset Get details of an asset
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenAddress">Address of the ERC721 contract</param>
        /// <param name="tokenId">Either ERC721 token ID or internal IMX ID</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<Asset>> GetAssetWithHttpInfoAsync(string tokenAddress, string tokenId, bool? includeFees = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenAddress' is set
            if (tokenAddress == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'tokenAddress' when calling AssetsApi->GetAsset");
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'tokenId' when calling AssetsApi->GetAsset");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token_address", api.Client.ClientUtils.ParameterToString(tokenAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", api.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (includeFees != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "include_fees", includeFees));
            }

            localVarRequestOptions.Operation = "AssetsApi.GetAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Asset>("/v1/assets/{token_address}/{token_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of assets Get a list of assets
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who owns these assets (optional)</param>
        /// <param name="status">Status of these assets (optional)</param>
        /// <param name="name">Name of the asset to search (optional)</param>
        /// <param name="metadata">URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]})) (optional)</param>
        /// <param name="sellOrders">Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)</param>
        /// <param name="buyOrders">Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="collection">Collection contract address (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAssetsResponse</returns>
        public ListAssetsResponse ListAssets(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string name = default(string), string metadata = default(string), bool? sellOrders = default(bool?), bool? buyOrders = default(bool?), bool? includeFees = default(bool?), string collection = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0)
        {
            api.Client.ApiResponse<ListAssetsResponse> localVarResponse = ListAssetsWithHttpInfo(pageSize, cursor, orderBy, direction, user, status, name, metadata, sellOrders, buyOrders, includeFees, collection, updatedMinTimestamp, updatedMaxTimestamp, auxiliaryFeePercentages, auxiliaryFeeRecipients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of assets Get a list of assets
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who owns these assets (optional)</param>
        /// <param name="status">Status of these assets (optional)</param>
        /// <param name="name">Name of the asset to search (optional)</param>
        /// <param name="metadata">URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]})) (optional)</param>
        /// <param name="sellOrders">Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)</param>
        /// <param name="buyOrders">Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="collection">Collection contract address (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAssetsResponse</returns>
        public api.Client.ApiResponse<ListAssetsResponse> ListAssetsWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string name = default(string), string metadata = default(string), bool? sellOrders = default(bool?), bool? buyOrders = default(bool?), bool? includeFees = default(bool?), string collection = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0)
        {
            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (metadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "metadata", metadata));
            }
            if (sellOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "sell_orders", sellOrders));
            }
            if (buyOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "buy_orders", buyOrders));
            }
            if (includeFees != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "include_fees", includeFees));
            }
            if (collection != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "collection", collection));
            }
            if (updatedMinTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "updated_min_timestamp", updatedMinTimestamp));
            }
            if (updatedMaxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "updated_max_timestamp", updatedMaxTimestamp));
            }
            if (auxiliaryFeePercentages != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_percentages", auxiliaryFeePercentages));
            }
            if (auxiliaryFeeRecipients != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_recipients", auxiliaryFeeRecipients));
            }

            localVarRequestOptions.Operation = "AssetsApi.ListAssets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAssetsResponse>("/v1/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of assets Get a list of assets
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who owns these assets (optional)</param>
        /// <param name="status">Status of these assets (optional)</param>
        /// <param name="name">Name of the asset to search (optional)</param>
        /// <param name="metadata">URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]})) (optional)</param>
        /// <param name="sellOrders">Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)</param>
        /// <param name="buyOrders">Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="collection">Collection contract address (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAssetsResponse</returns>
        public async System.Threading.Tasks.Task<ListAssetsResponse> ListAssetsAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string name = default(string), string metadata = default(string), bool? sellOrders = default(bool?), bool? buyOrders = default(bool?), bool? includeFees = default(bool?), string collection = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<ListAssetsResponse> localVarResponse = await ListAssetsWithHttpInfoAsync(pageSize, cursor, orderBy, direction, user, status, name, metadata, sellOrders, buyOrders, includeFees, collection, updatedMinTimestamp, updatedMaxTimestamp, auxiliaryFeePercentages, auxiliaryFeeRecipients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of assets Get a list of assets
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who owns these assets (optional)</param>
        /// <param name="status">Status of these assets (optional)</param>
        /// <param name="name">Name of the asset to search (optional)</param>
        /// <param name="metadata">URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({&#39;proto&#39;:[&#39;1147&#39;],&#39;quality&#39;:[&#39;Meteorite&#39;]})) (optional)</param>
        /// <param name="sellOrders">Set flag to true to fetch an array of sell order details with accepted status associated with the asset (optional)</param>
        /// <param name="buyOrders">Set flag to true to fetch an array of buy order details  with accepted status associated with the asset (optional)</param>
        /// <param name="includeFees">Set flag to include fees associated with the asset (optional)</param>
        /// <param name="collection">Collection contract address (optional)</param>
        /// <param name="updatedMinTimestamp">Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="updatedMaxTimestamp">Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="auxiliaryFeePercentages">Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients (optional)</param>
        /// <param name="auxiliaryFeeRecipients">Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAssetsResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<ListAssetsResponse>> ListAssetsWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string name = default(string), string metadata = default(string), bool? sellOrders = default(bool?), bool? buyOrders = default(bool?), bool? includeFees = default(bool?), string collection = default(string), string updatedMinTimestamp = default(string), string updatedMaxTimestamp = default(string), string auxiliaryFeePercentages = default(string), string auxiliaryFeeRecipients = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (metadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "metadata", metadata));
            }
            if (sellOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "sell_orders", sellOrders));
            }
            if (buyOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "buy_orders", buyOrders));
            }
            if (includeFees != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "include_fees", includeFees));
            }
            if (collection != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "collection", collection));
            }
            if (updatedMinTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "updated_min_timestamp", updatedMinTimestamp));
            }
            if (updatedMaxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "updated_max_timestamp", updatedMaxTimestamp));
            }
            if (auxiliaryFeePercentages != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_percentages", auxiliaryFeePercentages));
            }
            if (auxiliaryFeeRecipients != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "auxiliary_fee_recipients", auxiliaryFeeRecipients));
            }

            localVarRequestOptions.Operation = "AssetsApi.ListAssets";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAssetsResponse>("/v1/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
