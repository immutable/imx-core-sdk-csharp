/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using api.Client;
using api.Model;

namespace api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDepositsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get details of a deposit with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of a deposit with the given ID
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Deposit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Deposit</returns>
        Deposit GetDeposit(string id, int operationIndex = 0);

        /// <summary>
        /// Get details of a deposit with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of a deposit with the given ID
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Deposit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Deposit</returns>
        ApiResponse<Deposit> GetDepositWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Gets details of a signable deposit
        /// </summary>
        /// <remarks>
        /// Gets details of a signable deposit
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableDepositRequest">Get details of signable deposit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableDepositResponse</returns>
        GetSignableDepositResponse GetSignableDeposit(GetSignableDepositRequest getSignableDepositRequest, int operationIndex = 0);

        /// <summary>
        /// Gets details of a signable deposit
        /// </summary>
        /// <remarks>
        /// Gets details of a signable deposit
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableDepositRequest">Get details of signable deposit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableDepositResponse</returns>
        ApiResponse<GetSignableDepositResponse> GetSignableDepositWithHttpInfo(GetSignableDepositRequest getSignableDepositRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of deposits
        /// </summary>
        /// <remarks>
        /// Get a list of deposits
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this deposit (optional)</param>
        /// <param name="status">Status of this deposit (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the deposited asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the deposited asset (optional)</param>
        /// <param name="tokenName">Token name of the deposited asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the deposited asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the deposited asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the deposited asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDepositsResponse</returns>
        ListDepositsResponse ListDeposits(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of deposits
        /// </summary>
        /// <remarks>
        /// Get a list of deposits
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this deposit (optional)</param>
        /// <param name="status">Status of this deposit (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the deposited asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the deposited asset (optional)</param>
        /// <param name="tokenName">Token name of the deposited asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the deposited asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the deposited asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the deposited asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDepositsResponse</returns>
        ApiResponse<ListDepositsResponse> ListDepositsWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDepositsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get details of a deposit with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of a deposit with the given ID
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Deposit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Deposit</returns>
        System.Threading.Tasks.Task<Deposit> GetDepositAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of a deposit with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of a deposit with the given ID
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Deposit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Deposit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Deposit>> GetDepositWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets details of a signable deposit
        /// </summary>
        /// <remarks>
        /// Gets details of a signable deposit
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableDepositRequest">Get details of signable deposit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableDepositResponse</returns>
        System.Threading.Tasks.Task<GetSignableDepositResponse> GetSignableDepositAsync(GetSignableDepositRequest getSignableDepositRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets details of a signable deposit
        /// </summary>
        /// <remarks>
        /// Gets details of a signable deposit
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableDepositRequest">Get details of signable deposit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableDepositResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSignableDepositResponse>> GetSignableDepositWithHttpInfoAsync(GetSignableDepositRequest getSignableDepositRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of deposits
        /// </summary>
        /// <remarks>
        /// Get a list of deposits
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this deposit (optional)</param>
        /// <param name="status">Status of this deposit (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the deposited asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the deposited asset (optional)</param>
        /// <param name="tokenName">Token name of the deposited asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the deposited asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the deposited asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the deposited asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDepositsResponse</returns>
        System.Threading.Tasks.Task<ListDepositsResponse> ListDepositsAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of deposits
        /// </summary>
        /// <remarks>
        /// Get a list of deposits
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this deposit (optional)</param>
        /// <param name="status">Status of this deposit (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the deposited asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the deposited asset (optional)</param>
        /// <param name="tokenName">Token name of the deposited asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the deposited asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the deposited asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the deposited asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDepositsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDepositsResponse>> ListDepositsWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDepositsApi : IDepositsApiSync, IDepositsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DepositsApi : IDepositsApi
    {
        private api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DepositsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DepositsApi(string basePath)
        {
            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                new api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DepositsApi(api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DepositsApi(api.Client.ISynchronousClient client, api.Client.IAsynchronousClient asyncClient, api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get details of a deposit with the given ID Get details of a deposit with the given ID
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Deposit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Deposit</returns>
        public Deposit GetDeposit(string id, int operationIndex = 0)
        {
            api.Client.ApiResponse<Deposit> localVarResponse = GetDepositWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a deposit with the given ID Get details of a deposit with the given ID
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Deposit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Deposit</returns>
        public api.Client.ApiResponse<Deposit> GetDepositWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'id' when calling DepositsApi->GetDeposit");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DepositsApi.GetDeposit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Deposit>("/v1/deposits/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeposit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a deposit with the given ID Get details of a deposit with the given ID
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Deposit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Deposit</returns>
        public async System.Threading.Tasks.Task<Deposit> GetDepositAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<Deposit> localVarResponse = await GetDepositWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a deposit with the given ID Get details of a deposit with the given ID
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Deposit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Deposit)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<Deposit>> GetDepositWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'id' when calling DepositsApi->GetDeposit");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DepositsApi.GetDeposit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Deposit>("/v1/deposits/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeposit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets details of a signable deposit Gets details of a signable deposit
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableDepositRequest">Get details of signable deposit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableDepositResponse</returns>
        public GetSignableDepositResponse GetSignableDeposit(GetSignableDepositRequest getSignableDepositRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<GetSignableDepositResponse> localVarResponse = GetSignableDepositWithHttpInfo(getSignableDepositRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets details of a signable deposit Gets details of a signable deposit
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableDepositRequest">Get details of signable deposit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableDepositResponse</returns>
        public api.Client.ApiResponse<GetSignableDepositResponse> GetSignableDepositWithHttpInfo(GetSignableDepositRequest getSignableDepositRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSignableDepositRequest' is set
            if (getSignableDepositRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'getSignableDepositRequest' when calling DepositsApi->GetSignableDeposit");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableDepositRequest;

            localVarRequestOptions.Operation = "DepositsApi.GetSignableDeposit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSignableDepositResponse>("/v1/signable-deposit-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableDeposit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets details of a signable deposit Gets details of a signable deposit
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableDepositRequest">Get details of signable deposit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableDepositResponse</returns>
        public async System.Threading.Tasks.Task<GetSignableDepositResponse> GetSignableDepositAsync(GetSignableDepositRequest getSignableDepositRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<GetSignableDepositResponse> localVarResponse = await GetSignableDepositWithHttpInfoAsync(getSignableDepositRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets details of a signable deposit Gets details of a signable deposit
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableDepositRequest">Get details of signable deposit</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableDepositResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<GetSignableDepositResponse>> GetSignableDepositWithHttpInfoAsync(GetSignableDepositRequest getSignableDepositRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSignableDepositRequest' is set
            if (getSignableDepositRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'getSignableDepositRequest' when calling DepositsApi->GetSignableDeposit");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableDepositRequest;

            localVarRequestOptions.Operation = "DepositsApi.GetSignableDeposit";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSignableDepositResponse>("/v1/signable-deposit-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableDeposit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of deposits Get a list of deposits
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this deposit (optional)</param>
        /// <param name="status">Status of this deposit (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the deposited asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the deposited asset (optional)</param>
        /// <param name="tokenName">Token name of the deposited asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the deposited asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the deposited asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the deposited asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDepositsResponse</returns>
        public ListDepositsResponse ListDeposits(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0)
        {
            api.Client.ApiResponse<ListDepositsResponse> localVarResponse = ListDepositsWithHttpInfo(pageSize, cursor, orderBy, direction, user, status, minTimestamp, maxTimestamp, tokenType, tokenId, assetId, tokenAddress, tokenName, minQuantity, maxQuantity, metadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of deposits Get a list of deposits
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this deposit (optional)</param>
        /// <param name="status">Status of this deposit (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the deposited asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the deposited asset (optional)</param>
        /// <param name="tokenName">Token name of the deposited asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the deposited asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the deposited asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the deposited asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDepositsResponse</returns>
        public api.Client.ApiResponse<ListDepositsResponse> ListDepositsWithHttpInfo(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0)
        {
            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (minTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "min_timestamp", minTimestamp));
            }
            if (maxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "max_timestamp", maxTimestamp));
            }
            if (tokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "token_type", tokenType));
            }
            if (tokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "token_id", tokenId));
            }
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            if (tokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "token_address", tokenAddress));
            }
            if (tokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "token_name", tokenName));
            }
            if (minQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "min_quantity", minQuantity));
            }
            if (maxQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "max_quantity", maxQuantity));
            }
            if (metadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "metadata", metadata));
            }

            localVarRequestOptions.Operation = "DepositsApi.ListDeposits";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDepositsResponse>("/v1/deposits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeposits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of deposits Get a list of deposits
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this deposit (optional)</param>
        /// <param name="status">Status of this deposit (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the deposited asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the deposited asset (optional)</param>
        /// <param name="tokenName">Token name of the deposited asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the deposited asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the deposited asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the deposited asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDepositsResponse</returns>
        public async System.Threading.Tasks.Task<ListDepositsResponse> ListDepositsAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<ListDepositsResponse> localVarResponse = await ListDepositsWithHttpInfoAsync(pageSize, cursor, orderBy, direction, user, status, minTimestamp, maxTimestamp, tokenType, tokenId, assetId, tokenAddress, tokenName, minQuantity, maxQuantity, metadata, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of deposits Get a list of deposits
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="user">Ethereum address of the user who submitted this deposit (optional)</param>
        /// <param name="status">Status of this deposit (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="tokenType">Token type of the deposited asset (optional)</param>
        /// <param name="tokenId">ERC721 Token ID of the minted asset (optional)</param>
        /// <param name="assetId">Internal IMX ID of the minted asset (optional)</param>
        /// <param name="tokenAddress">Token address of the deposited asset (optional)</param>
        /// <param name="tokenName">Token name of the deposited asset (optional)</param>
        /// <param name="minQuantity">Min quantity for the deposited asset (optional)</param>
        /// <param name="maxQuantity">Max quantity for the deposited asset (optional)</param>
        /// <param name="metadata">JSON-encoded metadata filters for the deposited asset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDepositsResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<ListDepositsResponse>> ListDepositsWithHttpInfoAsync(int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string user = default(string), string status = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), string tokenType = default(string), string tokenId = default(string), string assetId = default(string), string tokenAddress = default(string), string tokenName = default(string), string minQuantity = default(string), string maxQuantity = default(string), string metadata = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (user != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "user", user));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (minTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "min_timestamp", minTimestamp));
            }
            if (maxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "max_timestamp", maxTimestamp));
            }
            if (tokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "token_type", tokenType));
            }
            if (tokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "token_id", tokenId));
            }
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            if (tokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "token_address", tokenAddress));
            }
            if (tokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "token_name", tokenName));
            }
            if (minQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "min_quantity", minQuantity));
            }
            if (maxQuantity != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "max_quantity", maxQuantity));
            }
            if (metadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "metadata", metadata));
            }

            localVarRequestOptions.Operation = "DepositsApi.ListDeposits";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDepositsResponse>("/v1/deposits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeposits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
