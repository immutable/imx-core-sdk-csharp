/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using api.Client;
using api.Model;

namespace api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get operator signature to allow clients to register the user
        /// </summary>
        /// <remarks>
        /// Get operator signature to allow clients to register the user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableRegistrationResponse</returns>
        GetSignableRegistrationResponse GetSignableRegistration(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0);

        /// <summary>
        /// Get operator signature to allow clients to register the user
        /// </summary>
        /// <remarks>
        /// Get operator signature to allow clients to register the user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableRegistrationResponse</returns>
        ApiResponse<GetSignableRegistrationResponse> GetSignableRegistrationWithHttpInfo(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0);
        /// <summary>
        /// Get encoded details to allow clients to register the user offchain
        /// </summary>
        /// <remarks>
        /// Get encoded details to allow clients to register the user offchain
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User Offchain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableRegistrationOffchainResponse</returns>
        GetSignableRegistrationOffchainResponse GetSignableRegistrationOffchain(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0);

        /// <summary>
        /// Get encoded details to allow clients to register the user offchain
        /// </summary>
        /// <remarks>
        /// Get encoded details to allow clients to register the user offchain
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User Offchain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableRegistrationOffchainResponse</returns>
        ApiResponse<GetSignableRegistrationOffchainResponse> GetSignableRegistrationOffchainWithHttpInfo(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0);
        /// <summary>
        /// Get stark keys for a registered user
        /// </summary>
        /// <remarks>
        /// Get stark keys for a registered user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUsersApiResponse</returns>
        GetUsersApiResponse GetUsers(string user, int operationIndex = 0);

        /// <summary>
        /// Get stark keys for a registered user
        /// </summary>
        /// <remarks>
        /// Get stark keys for a registered user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUsersApiResponse</returns>
        ApiResponse<GetUsersApiResponse> GetUsersWithHttpInfo(string user, int operationIndex = 0);
        /// <summary>
        /// Registers a user
        /// </summary>
        /// <remarks>
        /// Registers a user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterUserResponse</returns>
        RegisterUserResponse RegisterUser(RegisterUserRequest registerUserRequest, int operationIndex = 0);

        /// <summary>
        /// Registers a user
        /// </summary>
        /// <remarks>
        /// Registers a user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterUserResponse</returns>
        ApiResponse<RegisterUserResponse> RegisterUserWithHttpInfo(RegisterUserRequest registerUserRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get operator signature to allow clients to register the user
        /// </summary>
        /// <remarks>
        /// Get operator signature to allow clients to register the user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableRegistrationResponse</returns>
        System.Threading.Tasks.Task<GetSignableRegistrationResponse> GetSignableRegistrationAsync(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get operator signature to allow clients to register the user
        /// </summary>
        /// <remarks>
        /// Get operator signature to allow clients to register the user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableRegistrationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSignableRegistrationResponse>> GetSignableRegistrationWithHttpInfoAsync(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get encoded details to allow clients to register the user offchain
        /// </summary>
        /// <remarks>
        /// Get encoded details to allow clients to register the user offchain
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User Offchain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableRegistrationOffchainResponse</returns>
        System.Threading.Tasks.Task<GetSignableRegistrationOffchainResponse> GetSignableRegistrationOffchainAsync(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get encoded details to allow clients to register the user offchain
        /// </summary>
        /// <remarks>
        /// Get encoded details to allow clients to register the user offchain
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User Offchain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableRegistrationOffchainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSignableRegistrationOffchainResponse>> GetSignableRegistrationOffchainWithHttpInfoAsync(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get stark keys for a registered user
        /// </summary>
        /// <remarks>
        /// Get stark keys for a registered user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUsersApiResponse</returns>
        System.Threading.Tasks.Task<GetUsersApiResponse> GetUsersAsync(string user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get stark keys for a registered user
        /// </summary>
        /// <remarks>
        /// Get stark keys for a registered user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUsersApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersApiResponse>> GetUsersWithHttpInfoAsync(string user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Registers a user
        /// </summary>
        /// <remarks>
        /// Registers a user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterUserResponse</returns>
        System.Threading.Tasks.Task<RegisterUserResponse> RegisterUserAsync(RegisterUserRequest registerUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Registers a user
        /// </summary>
        /// <remarks>
        /// Registers a user
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterUserResponse>> RegisterUserWithHttpInfoAsync(RegisterUserRequest registerUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                new api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(api.Client.ISynchronousClient client, api.Client.IAsynchronousClient asyncClient, api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get operator signature to allow clients to register the user Get operator signature to allow clients to register the user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableRegistrationResponse</returns>
        public GetSignableRegistrationResponse GetSignableRegistration(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<GetSignableRegistrationResponse> localVarResponse = GetSignableRegistrationWithHttpInfo(getSignableRegistrationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get operator signature to allow clients to register the user Get operator signature to allow clients to register the user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableRegistrationResponse</returns>
        public api.Client.ApiResponse<GetSignableRegistrationResponse> GetSignableRegistrationWithHttpInfo(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSignableRegistrationRequest' is set
            if (getSignableRegistrationRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'getSignableRegistrationRequest' when calling UsersApi->GetSignableRegistration");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableRegistrationRequest;

            localVarRequestOptions.Operation = "UsersApi.GetSignableRegistration";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSignableRegistrationResponse>("/v1/signable-registration", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableRegistration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get operator signature to allow clients to register the user Get operator signature to allow clients to register the user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableRegistrationResponse</returns>
        public async System.Threading.Tasks.Task<GetSignableRegistrationResponse> GetSignableRegistrationAsync(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<GetSignableRegistrationResponse> localVarResponse = await GetSignableRegistrationWithHttpInfoAsync(getSignableRegistrationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get operator signature to allow clients to register the user Get operator signature to allow clients to register the user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableRegistrationResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<GetSignableRegistrationResponse>> GetSignableRegistrationWithHttpInfoAsync(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSignableRegistrationRequest' is set
            if (getSignableRegistrationRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'getSignableRegistrationRequest' when calling UsersApi->GetSignableRegistration");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableRegistrationRequest;

            localVarRequestOptions.Operation = "UsersApi.GetSignableRegistration";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSignableRegistrationResponse>("/v1/signable-registration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableRegistration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get encoded details to allow clients to register the user offchain Get encoded details to allow clients to register the user offchain
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User Offchain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableRegistrationOffchainResponse</returns>
        public GetSignableRegistrationOffchainResponse GetSignableRegistrationOffchain(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<GetSignableRegistrationOffchainResponse> localVarResponse = GetSignableRegistrationOffchainWithHttpInfo(getSignableRegistrationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get encoded details to allow clients to register the user offchain Get encoded details to allow clients to register the user offchain
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User Offchain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableRegistrationOffchainResponse</returns>
        public api.Client.ApiResponse<GetSignableRegistrationOffchainResponse> GetSignableRegistrationOffchainWithHttpInfo(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSignableRegistrationRequest' is set
            if (getSignableRegistrationRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'getSignableRegistrationRequest' when calling UsersApi->GetSignableRegistrationOffchain");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableRegistrationRequest;

            localVarRequestOptions.Operation = "UsersApi.GetSignableRegistrationOffchain";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSignableRegistrationOffchainResponse>("/v1/signable-registration-offchain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableRegistrationOffchain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get encoded details to allow clients to register the user offchain Get encoded details to allow clients to register the user offchain
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User Offchain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableRegistrationOffchainResponse</returns>
        public async System.Threading.Tasks.Task<GetSignableRegistrationOffchainResponse> GetSignableRegistrationOffchainAsync(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<GetSignableRegistrationOffchainResponse> localVarResponse = await GetSignableRegistrationOffchainWithHttpInfoAsync(getSignableRegistrationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get encoded details to allow clients to register the user offchain Get encoded details to allow clients to register the user offchain
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableRegistrationRequest">Register User Offchain</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableRegistrationOffchainResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<GetSignableRegistrationOffchainResponse>> GetSignableRegistrationOffchainWithHttpInfoAsync(GetSignableRegistrationRequest getSignableRegistrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSignableRegistrationRequest' is set
            if (getSignableRegistrationRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'getSignableRegistrationRequest' when calling UsersApi->GetSignableRegistrationOffchain");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableRegistrationRequest;

            localVarRequestOptions.Operation = "UsersApi.GetSignableRegistrationOffchain";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSignableRegistrationOffchainResponse>("/v1/signable-registration-offchain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableRegistrationOffchain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get stark keys for a registered user Get stark keys for a registered user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUsersApiResponse</returns>
        public GetUsersApiResponse GetUsers(string user, int operationIndex = 0)
        {
            api.Client.ApiResponse<GetUsersApiResponse> localVarResponse = GetUsersWithHttpInfo(user);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get stark keys for a registered user Get stark keys for a registered user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUsersApiResponse</returns>
        public api.Client.ApiResponse<GetUsersApiResponse> GetUsersWithHttpInfo(string user, int operationIndex = 0)
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->GetUsers");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user", api.Client.ClientUtils.ParameterToString(user)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUsersApiResponse>("/v1/users/{user}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get stark keys for a registered user Get stark keys for a registered user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUsersApiResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersApiResponse> GetUsersAsync(string user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<GetUsersApiResponse> localVarResponse = await GetUsersWithHttpInfoAsync(user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get stark keys for a registered user Get stark keys for a registered user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUsersApiResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<GetUsersApiResponse>> GetUsersWithHttpInfoAsync(string user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'user' when calling UsersApi->GetUsers");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user", api.Client.ClientUtils.ParameterToString(user)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUsersApiResponse>("/v1/users/{user}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Registers a user Registers a user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterUserResponse</returns>
        public RegisterUserResponse RegisterUser(RegisterUserRequest registerUserRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<RegisterUserResponse> localVarResponse = RegisterUserWithHttpInfo(registerUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Registers a user Registers a user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterUserResponse</returns>
        public api.Client.ApiResponse<RegisterUserResponse> RegisterUserWithHttpInfo(RegisterUserRequest registerUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'registerUserRequest' is set
            if (registerUserRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'registerUserRequest' when calling UsersApi->RegisterUser");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerUserRequest;

            localVarRequestOptions.Operation = "UsersApi.RegisterUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RegisterUserResponse>("/v1/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Registers a user Registers a user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterUserResponse</returns>
        public async System.Threading.Tasks.Task<RegisterUserResponse> RegisterUserAsync(RegisterUserRequest registerUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<RegisterUserResponse> localVarResponse = await RegisterUserWithHttpInfoAsync(registerUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Registers a user Registers a user
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserRequest">Register User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterUserResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<RegisterUserResponse>> RegisterUserWithHttpInfoAsync(RegisterUserRequest registerUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registerUserRequest' is set
            if (registerUserRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'registerUserRequest' when calling UsersApi->RegisterUser");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerUserRequest;

            localVarRequestOptions.Operation = "UsersApi.RegisterUser";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RegisterUserResponse>("/v1/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
