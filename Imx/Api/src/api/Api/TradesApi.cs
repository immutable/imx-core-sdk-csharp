/*
 * Immutable X API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using api.Client;
using api.Model;

namespace api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Trade between two parties
        /// </summary>
        /// <remarks>
        /// Create a Trade
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createTradeRequest">create a trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTradeResponse</returns>
        CreateTradeResponse CreateTrade(string xImxEthAddress, string xImxEthSignature, CreateTradeRequestV1 createTradeRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Trade between two parties
        /// </summary>
        /// <remarks>
        /// Create a Trade
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createTradeRequest">create a trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTradeResponse</returns>
        ApiResponse<CreateTradeResponse> CreateTradeWithHttpInfo(string xImxEthAddress, string xImxEthSignature, CreateTradeRequestV1 createTradeRequest, int operationIndex = 0);
        /// <summary>
        /// Get details a signable trade V3
        /// </summary>
        /// <remarks>
        /// Get details a signable trade V3
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableTradeRequest">get a signable trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableTradeResponse</returns>
        GetSignableTradeResponse GetSignableTrade(GetSignableTradeRequest getSignableTradeRequest, int operationIndex = 0);

        /// <summary>
        /// Get details a signable trade V3
        /// </summary>
        /// <remarks>
        /// Get details a signable trade V3
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableTradeRequest">get a signable trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableTradeResponse</returns>
        ApiResponse<GetSignableTradeResponse> GetSignableTradeWithHttpInfo(GetSignableTradeRequest getSignableTradeRequest, int operationIndex = 0);
        /// <summary>
        /// Get details of a trade with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of a trade with the given ID
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Trade ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Trade</returns>
        Trade GetTrade(string id, int operationIndex = 0);

        /// <summary>
        /// Get details of a trade with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of a trade with the given ID
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Trade ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Trade</returns>
        ApiResponse<Trade> GetTradeWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a list of trades
        /// </summary>
        /// <remarks>
        /// Get a list of trades
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyATokenType">Party A&#39;s (buy order) token type of currency used to buy (optional)</param>
        /// <param name="partyATokenAddress">Party A&#39;s (buy order) token address of currency used to buy (optional)</param>
        /// <param name="partyBTokenType">Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)</param>
        /// <param name="partyBTokenAddress">Party B&#39;s (sell order) collection address of NFT sold (optional)</param>
        /// <param name="partyBTokenId">Party B&#39;s (sell order) token id of NFT sold (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListTradesResponse</returns>
        ListTradesResponse ListTrades(string partyATokenType = default(string), string partyATokenAddress = default(string), string partyBTokenType = default(string), string partyBTokenAddress = default(string), string partyBTokenId = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), int operationIndex = 0);

        /// <summary>
        /// Get a list of trades
        /// </summary>
        /// <remarks>
        /// Get a list of trades
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyATokenType">Party A&#39;s (buy order) token type of currency used to buy (optional)</param>
        /// <param name="partyATokenAddress">Party A&#39;s (buy order) token address of currency used to buy (optional)</param>
        /// <param name="partyBTokenType">Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)</param>
        /// <param name="partyBTokenAddress">Party B&#39;s (sell order) collection address of NFT sold (optional)</param>
        /// <param name="partyBTokenId">Party B&#39;s (sell order) token id of NFT sold (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListTradesResponse</returns>
        ApiResponse<ListTradesResponse> ListTradesWithHttpInfo(string partyATokenType = default(string), string partyATokenAddress = default(string), string partyBTokenType = default(string), string partyBTokenAddress = default(string), string partyBTokenId = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Trade between two parties
        /// </summary>
        /// <remarks>
        /// Create a Trade
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createTradeRequest">create a trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTradeResponse</returns>
        System.Threading.Tasks.Task<CreateTradeResponse> CreateTradeAsync(string xImxEthAddress, string xImxEthSignature, CreateTradeRequestV1 createTradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Trade between two parties
        /// </summary>
        /// <remarks>
        /// Create a Trade
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createTradeRequest">create a trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTradeResponse>> CreateTradeWithHttpInfoAsync(string xImxEthAddress, string xImxEthSignature, CreateTradeRequestV1 createTradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details a signable trade V3
        /// </summary>
        /// <remarks>
        /// Get details a signable trade V3
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableTradeRequest">get a signable trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableTradeResponse</returns>
        System.Threading.Tasks.Task<GetSignableTradeResponse> GetSignableTradeAsync(GetSignableTradeRequest getSignableTradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details a signable trade V3
        /// </summary>
        /// <remarks>
        /// Get details a signable trade V3
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableTradeRequest">get a signable trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableTradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSignableTradeResponse>> GetSignableTradeWithHttpInfoAsync(GetSignableTradeRequest getSignableTradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details of a trade with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of a trade with the given ID
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Trade ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Trade</returns>
        System.Threading.Tasks.Task<Trade> GetTradeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of a trade with the given ID
        /// </summary>
        /// <remarks>
        /// Get details of a trade with the given ID
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Trade ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Trade)</returns>
        System.Threading.Tasks.Task<ApiResponse<Trade>> GetTradeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of trades
        /// </summary>
        /// <remarks>
        /// Get a list of trades
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyATokenType">Party A&#39;s (buy order) token type of currency used to buy (optional)</param>
        /// <param name="partyATokenAddress">Party A&#39;s (buy order) token address of currency used to buy (optional)</param>
        /// <param name="partyBTokenType">Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)</param>
        /// <param name="partyBTokenAddress">Party B&#39;s (sell order) collection address of NFT sold (optional)</param>
        /// <param name="partyBTokenId">Party B&#39;s (sell order) token id of NFT sold (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTradesResponse</returns>
        System.Threading.Tasks.Task<ListTradesResponse> ListTradesAsync(string partyATokenType = default(string), string partyATokenAddress = default(string), string partyBTokenType = default(string), string partyBTokenAddress = default(string), string partyBTokenId = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of trades
        /// </summary>
        /// <remarks>
        /// Get a list of trades
        /// </remarks>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyATokenType">Party A&#39;s (buy order) token type of currency used to buy (optional)</param>
        /// <param name="partyATokenAddress">Party A&#39;s (buy order) token address of currency used to buy (optional)</param>
        /// <param name="partyBTokenType">Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)</param>
        /// <param name="partyBTokenAddress">Party B&#39;s (sell order) collection address of NFT sold (optional)</param>
        /// <param name="partyBTokenId">Party B&#39;s (sell order) token id of NFT sold (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTradesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTradesResponse>> ListTradesWithHttpInfoAsync(string partyATokenType = default(string), string partyATokenAddress = default(string), string partyBTokenType = default(string), string partyBTokenAddress = default(string), string partyBTokenId = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradesApi : ITradesApiSync, ITradesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TradesApi : ITradesApi
    {
        private api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradesApi(string basePath)
        {
            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                new api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradesApi(api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = api.Client.Configuration.MergeConfigurations(
                api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TradesApi(api.Client.ISynchronousClient client, api.Client.IAsynchronousClient asyncClient, api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Trade between two parties Create a Trade
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createTradeRequest">create a trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTradeResponse</returns>
        public CreateTradeResponse CreateTrade(string xImxEthAddress, string xImxEthSignature, CreateTradeRequestV1 createTradeRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<CreateTradeResponse> localVarResponse = CreateTradeWithHttpInfo(xImxEthAddress, xImxEthSignature, createTradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Trade between two parties Create a Trade
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createTradeRequest">create a trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTradeResponse</returns>
        public api.Client.ApiResponse<CreateTradeResponse> CreateTradeWithHttpInfo(string xImxEthAddress, string xImxEthSignature, CreateTradeRequestV1 createTradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling TradesApi->CreateTrade");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling TradesApi->CreateTrade");
            }

            // verify the required parameter 'createTradeRequest' is set
            if (createTradeRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'createTradeRequest' when calling TradesApi->CreateTrade");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", api.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", api.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.Data = createTradeRequest;

            localVarRequestOptions.Operation = "TradesApi.CreateTrade";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTradeResponse>("/v1/trades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Trade between two parties Create a Trade
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createTradeRequest">create a trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTradeResponse</returns>
        public async System.Threading.Tasks.Task<CreateTradeResponse> CreateTradeAsync(string xImxEthAddress, string xImxEthSignature, CreateTradeRequestV1 createTradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<CreateTradeResponse> localVarResponse = await CreateTradeWithHttpInfoAsync(xImxEthAddress, xImxEthSignature, createTradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Trade between two parties Create a Trade
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xImxEthAddress">eth address</param>
        /// <param name="xImxEthSignature">eth signature</param>
        /// <param name="createTradeRequest">create a trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTradeResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<CreateTradeResponse>> CreateTradeWithHttpInfoAsync(string xImxEthAddress, string xImxEthSignature, CreateTradeRequestV1 createTradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xImxEthAddress' is set
            if (xImxEthAddress == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'xImxEthAddress' when calling TradesApi->CreateTrade");
            }

            // verify the required parameter 'xImxEthSignature' is set
            if (xImxEthSignature == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'xImxEthSignature' when calling TradesApi->CreateTrade");
            }

            // verify the required parameter 'createTradeRequest' is set
            if (createTradeRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'createTradeRequest' when calling TradesApi->CreateTrade");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-address", api.Client.ClientUtils.ParameterToString(xImxEthAddress)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-imx-eth-signature", api.Client.ClientUtils.ParameterToString(xImxEthSignature)); // header parameter
            localVarRequestOptions.Data = createTradeRequest;

            localVarRequestOptions.Operation = "TradesApi.CreateTrade";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTradeResponse>("/v1/trades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details a signable trade V3 Get details a signable trade V3
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableTradeRequest">get a signable trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSignableTradeResponse</returns>
        public GetSignableTradeResponse GetSignableTrade(GetSignableTradeRequest getSignableTradeRequest, int operationIndex = 0)
        {
            api.Client.ApiResponse<GetSignableTradeResponse> localVarResponse = GetSignableTradeWithHttpInfo(getSignableTradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details a signable trade V3 Get details a signable trade V3
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableTradeRequest">get a signable trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSignableTradeResponse</returns>
        public api.Client.ApiResponse<GetSignableTradeResponse> GetSignableTradeWithHttpInfo(GetSignableTradeRequest getSignableTradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSignableTradeRequest' is set
            if (getSignableTradeRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'getSignableTradeRequest' when calling TradesApi->GetSignableTrade");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.Data = getSignableTradeRequest;

            localVarRequestOptions.Operation = "TradesApi.GetSignableTrade";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSignableTradeResponse>("/v3/signable-trade-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details a signable trade V3 Get details a signable trade V3
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableTradeRequest">get a signable trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSignableTradeResponse</returns>
        public async System.Threading.Tasks.Task<GetSignableTradeResponse> GetSignableTradeAsync(GetSignableTradeRequest getSignableTradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<GetSignableTradeResponse> localVarResponse = await GetSignableTradeWithHttpInfoAsync(getSignableTradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details a signable trade V3 Get details a signable trade V3
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSignableTradeRequest">get a signable trade</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSignableTradeResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<GetSignableTradeResponse>> GetSignableTradeWithHttpInfoAsync(GetSignableTradeRequest getSignableTradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSignableTradeRequest' is set
            if (getSignableTradeRequest == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'getSignableTradeRequest' when calling TradesApi->GetSignableTrade");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSignableTradeRequest;

            localVarRequestOptions.Operation = "TradesApi.GetSignableTrade";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSignableTradeResponse>("/v3/signable-trade-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSignableTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a trade with the given ID Get details of a trade with the given ID
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Trade ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Trade</returns>
        public Trade GetTrade(string id, int operationIndex = 0)
        {
            api.Client.ApiResponse<Trade> localVarResponse = GetTradeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a trade with the given ID Get details of a trade with the given ID
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Trade ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Trade</returns>
        public api.Client.ApiResponse<Trade> GetTradeWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'id' when calling TradesApi->GetTrade");
            }

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            localVarRequestOptions.PathParameters.Add("id", api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TradesApi.GetTrade";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Trade>("/v1/trades/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a trade with the given ID Get details of a trade with the given ID
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Trade ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Trade</returns>
        public async System.Threading.Tasks.Task<Trade> GetTradeAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<Trade> localVarResponse = await GetTradeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a trade with the given ID Get details of a trade with the given ID
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Trade ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Trade)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<Trade>> GetTradeWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new api.Client.ApiException(400, "Missing required parameter 'id' when calling TradesApi->GetTrade");
            }


            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TradesApi.GetTrade";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Trade>("/v1/trades/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of trades Get a list of trades
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyATokenType">Party A&#39;s (buy order) token type of currency used to buy (optional)</param>
        /// <param name="partyATokenAddress">Party A&#39;s (buy order) token address of currency used to buy (optional)</param>
        /// <param name="partyBTokenType">Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)</param>
        /// <param name="partyBTokenAddress">Party B&#39;s (sell order) collection address of NFT sold (optional)</param>
        /// <param name="partyBTokenId">Party B&#39;s (sell order) token id of NFT sold (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListTradesResponse</returns>
        public ListTradesResponse ListTrades(string partyATokenType = default(string), string partyATokenAddress = default(string), string partyBTokenType = default(string), string partyBTokenAddress = default(string), string partyBTokenId = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), int operationIndex = 0)
        {
            api.Client.ApiResponse<ListTradesResponse> localVarResponse = ListTradesWithHttpInfo(partyATokenType, partyATokenAddress, partyBTokenType, partyBTokenAddress, partyBTokenId, pageSize, cursor, orderBy, direction, minTimestamp, maxTimestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of trades Get a list of trades
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyATokenType">Party A&#39;s (buy order) token type of currency used to buy (optional)</param>
        /// <param name="partyATokenAddress">Party A&#39;s (buy order) token address of currency used to buy (optional)</param>
        /// <param name="partyBTokenType">Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)</param>
        /// <param name="partyBTokenAddress">Party B&#39;s (sell order) collection address of NFT sold (optional)</param>
        /// <param name="partyBTokenId">Party B&#39;s (sell order) token id of NFT sold (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListTradesResponse</returns>
        public api.Client.ApiResponse<ListTradesResponse> ListTradesWithHttpInfo(string partyATokenType = default(string), string partyATokenAddress = default(string), string partyBTokenType = default(string), string partyBTokenAddress = default(string), string partyBTokenId = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), int operationIndex = 0)
        {
            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("x-sdk-version", "imx-core-sdk-csharp-0.1.0");

            if (partyATokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_a_token_type", partyATokenType));
            }
            if (partyATokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_a_token_address", partyATokenAddress));
            }
            if (partyBTokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_b_token_type", partyBTokenType));
            }
            if (partyBTokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_b_token_address", partyBTokenAddress));
            }
            if (partyBTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_b_token_id", partyBTokenId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (minTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "min_timestamp", minTimestamp));
            }
            if (maxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "max_timestamp", maxTimestamp));
            }

            localVarRequestOptions.Operation = "TradesApi.ListTrades";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListTradesResponse>("/v1/trades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of trades Get a list of trades
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyATokenType">Party A&#39;s (buy order) token type of currency used to buy (optional)</param>
        /// <param name="partyATokenAddress">Party A&#39;s (buy order) token address of currency used to buy (optional)</param>
        /// <param name="partyBTokenType">Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)</param>
        /// <param name="partyBTokenAddress">Party B&#39;s (sell order) collection address of NFT sold (optional)</param>
        /// <param name="partyBTokenId">Party B&#39;s (sell order) token id of NFT sold (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTradesResponse</returns>
        public async System.Threading.Tasks.Task<ListTradesResponse> ListTradesAsync(string partyATokenType = default(string), string partyATokenAddress = default(string), string partyBTokenType = default(string), string partyBTokenAddress = default(string), string partyBTokenId = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            api.Client.ApiResponse<ListTradesResponse> localVarResponse = await ListTradesWithHttpInfoAsync(partyATokenType, partyATokenAddress, partyBTokenType, partyBTokenAddress, partyBTokenId, pageSize, cursor, orderBy, direction, minTimestamp, maxTimestamp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of trades Get a list of trades
        /// </summary>
        /// <exception cref="api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partyATokenType">Party A&#39;s (buy order) token type of currency used to buy (optional)</param>
        /// <param name="partyATokenAddress">Party A&#39;s (buy order) token address of currency used to buy (optional)</param>
        /// <param name="partyBTokenType">Party B&#39;s (sell order) token type of NFT sold - always ERC721 (optional)</param>
        /// <param name="partyBTokenAddress">Party B&#39;s (sell order) collection address of NFT sold (optional)</param>
        /// <param name="partyBTokenId">Party B&#39;s (sell order) token id of NFT sold (optional)</param>
        /// <param name="pageSize">Page size of the result (optional)</param>
        /// <param name="cursor">Cursor (optional)</param>
        /// <param name="orderBy">Property to sort by (optional)</param>
        /// <param name="direction">Direction to sort (asc/desc) (optional)</param>
        /// <param name="minTimestamp">Minimum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="maxTimestamp">Maximum timestamp for this trade, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTradesResponse)</returns>
        public async System.Threading.Tasks.Task<api.Client.ApiResponse<ListTradesResponse>> ListTradesWithHttpInfoAsync(string partyATokenType = default(string), string partyATokenAddress = default(string), string partyBTokenType = default(string), string partyBTokenAddress = default(string), string partyBTokenId = default(string), int? pageSize = default(int?), string cursor = default(string), string orderBy = default(string), string direction = default(string), string minTimestamp = default(string), string maxTimestamp = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            api.Client.RequestOptions localVarRequestOptions = new api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (partyATokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_a_token_type", partyATokenType));
            }
            if (partyATokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_a_token_address", partyATokenAddress));
            }
            if (partyBTokenType != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_b_token_type", partyBTokenType));
            }
            if (partyBTokenAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_b_token_address", partyBTokenAddress));
            }
            if (partyBTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "party_b_token_id", partyBTokenId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (minTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "min_timestamp", minTimestamp));
            }
            if (maxTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(api.Client.ClientUtils.ParameterToMultiMap("", "max_timestamp", maxTimestamp));
            }

            localVarRequestOptions.Operation = "TradesApi.ListTrades";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListTradesResponse>("/v1/trades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
